
miniquad-f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800737c  0800737c  0001737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e4  080074e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074ec  080074ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080074f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000070  08007564  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08007564  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014902  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e4d  00000000  00000000  000349a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d0  00000000  00000000  000377f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  000388c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000226c8  00000000  00000000  00039808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec27  00000000  00000000  0005bed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c75d6  00000000  00000000  0006aaf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001320cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d24  00000000  00000000  00132148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007364 	.word	0x08007364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007364 	.word	0x08007364

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e02:	463b      	mov	r3, r7
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e10:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <MX_ADC1_Init+0x9c>)
 8000e12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <MX_ADC1_Init+0xa0>)
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e5e:	f002 f9a5 	bl	80031ac <HAL_ADC_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e68:	f001 fb66 	bl	8002538 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_ADC1_Init+0x98>)
 8000e7e:	f002 f9d9 	bl	8003234 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e88:	f001 fb56 	bl	8002538 <Error_Handler>
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000098 	.word	0x20000098
 8000e98:	40012000 	.word	0x40012000
 8000e9c:	0f000001 	.word	0x0f000001

08000ea0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <HAL_ADC_MspInit+0x7c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d127      	bne.n	8000f12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_ADC_MspInit+0x80>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <HAL_ADC_MspInit+0x80>)
 8000ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_ADC_MspInit+0x80>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_ADC_MspInit+0x80>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_ADC_MspInit+0x80>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_ADC_MspInit+0x80>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = BAT0_Pin;
 8000efa:	2301      	movs	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efe:	2303      	movs	r3, #3
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT0_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <HAL_ADC_MspInit+0x84>)
 8000f0e:	f002 fc91 	bl	8003834 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40012000 	.word	0x40012000
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000

08000f28 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a3a      	ldr	r2, [pc, #232]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b38      	ldr	r3, [pc, #224]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b34      	ldr	r3, [pc, #208]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a33      	ldr	r2, [pc, #204]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a2c      	ldr	r2, [pc, #176]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <MX_GPIO_Init+0x108>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_USR_Pin|LED_DBG_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000f98:	4826      	ldr	r0, [pc, #152]	; (8001034 <MX_GPIO_Init+0x10c>)
 8000f9a:	f002 fde5 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa4:	4824      	ldr	r0, [pc, #144]	; (8001038 <MX_GPIO_Init+0x110>)
 8000fa6:	f002 fddf 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8000faa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481d      	ldr	r0, [pc, #116]	; (8001034 <MX_GPIO_Init+0x10c>)
 8000fc0:	f002 fc38 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_USR_Pin|LED_DBG_Pin;
 8000fc4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4815      	ldr	r0, [pc, #84]	; (8001034 <MX_GPIO_Init+0x10c>)
 8000fde:	f002 fc29 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS3_Pin;
 8000fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS3_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480f      	ldr	r0, [pc, #60]	; (8001038 <MX_GPIO_Init+0x110>)
 8000ffc:	f002 fc1a 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT1_Pin|DRDY_Pin;
 8001000:	23c0      	movs	r3, #192	; 0xc0
 8001002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <MX_GPIO_Init+0x114>)
 8001006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	4808      	ldr	r0, [pc, #32]	; (8001034 <MX_GPIO_Init+0x10c>)
 8001014:	f002 fc0e 	bl	8003834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2017      	movs	r0, #23
 800101e:	f002 fbdf 	bl	80037e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001022:	2017      	movs	r0, #23
 8001024:	f002 fbf8 	bl	8003818 <HAL_NVIC_EnableIRQ>

}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40020400 	.word	0x40020400
 8001038:	40020000 	.word	0x40020000
 800103c:	10110000 	.word	0x10110000

08001040 <L3G4_Init>:
static L3G4_Status_t readRegister16(L3G4_t *l3g4, uint8_t reg, uint16_t *result);
static L3G4_Status_t writeRegister8(L3G4_t *l3g4, uint8_t reg, uint8_t data);
static L3G4_Status_t writeAndVerifyRegister8(L3G4_t *l3g4, uint8_t reg,
		uint8_t data);

void L3G4_Init(L3G4_t *l3g4) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	memset(l3g4, 0, sizeof(*l3g4));
 8001048:	222c      	movs	r2, #44	; 0x2c
 800104a:	2100      	movs	r1, #0
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f005 fa39 	bl	80064c4 <memset>
	l3g4->config.ODR = L3G4_ODR_400;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	701a      	strb	r2, [r3, #0]
	l3g4->config.Bandwidth = L3G4_BW_0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	705a      	strb	r2, [r3, #1]
	l3g4->config.Mode = L3G4_NOR_SLE_MOD;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2208      	movs	r2, #8
 8001062:	709a      	strb	r2, [r3, #2]
	l3g4->config.Axis_Enable = L3G4_XYZEN;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2207      	movs	r2, #7
 8001068:	70da      	strb	r2, [r3, #3]
	l3g4->config.HPF_Enable = L3G4_HPF_ENA;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2210      	movs	r2, #16
 800106e:	711a      	strb	r2, [r3, #4]
	l3g4->config.HPF_Mode = L3G4_HPM_NOR_RES;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	715a      	strb	r2, [r3, #5]
	l3g4->config.HPCF = L3G4_HPCF_9;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2209      	movs	r2, #9
 800107a:	719a      	strb	r2, [r3, #6]
	l3g4->config.INT1_Enable = L3G4_INT1_DIS;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	71da      	strb	r2, [r3, #7]
	l3g4->config.DRRY_Enable = L3G4_DRDY_INT2_ENA;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2208      	movs	r2, #8
 8001086:	721a      	strb	r2, [r3, #8]
	l3g4->config.BDU = L3G4_BDU_CONTINOUS;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	725a      	strb	r2, [r3, #9]
	l3g4->config.FS = L3G4_FS_2000;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2220      	movs	r2, #32
 8001092:	729a      	strb	r2, [r3, #10]
	l3g4->config.FIFO_Enable = L3G4_FIFO_DIS;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	72da      	strb	r2, [r3, #11]
	l3g4->config.FIFO_Mode = L3G4_BYBASS_MOD;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	731a      	strb	r2, [r3, #12]
	l3g4->config.INT1_SEL = L3G4_INT1_SEL_3;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	220c      	movs	r2, #12
 80010a4:	735a      	strb	r2, [r3, #13]
	l3g4->config.OUT_SEL = L3G4_OUT_SEL_3;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	739a      	strb	r2, [r3, #14]
	l3g4->spi = (void*) 0;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
	l3g4->drdyPin = 0xFFFF;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b8:	835a      	strh	r2, [r3, #26]
	l3g4->outX = 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	841a      	strh	r2, [r3, #32]
	l3g4->outY = 0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	845a      	strh	r2, [r3, #34]	; 0x22
	l3g4->outZ = 0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	849a      	strh	r2, [r3, #36]	; 0x24
	l3g4->calibX = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	84da      	strh	r2, [r3, #38]	; 0x26
	l3g4->calibY = 0;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	851a      	strh	r2, [r3, #40]	; 0x28
	l3g4->calibZ = 0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <L3G4_InstallDriver>:

void L3G4_InstallDriver(L3G4_t *l3g4, SPI_HandleTypeDef *spi) {
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
	l3g4->spi = spi;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	611a      	str	r2, [r3, #16]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <L3G4_InstallGPIO>:

void L3G4_InstallGPIO(L3G4_t *l3g4, GPIO_TypeDef *csPort, uint16_t csPin,
		uint16_t drdyPin) {
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	4611      	mov	r1, r2
 800110e:	461a      	mov	r2, r3
 8001110:	460b      	mov	r3, r1
 8001112:	80fb      	strh	r3, [r7, #6]
 8001114:	4613      	mov	r3, r2
 8001116:	80bb      	strh	r3, [r7, #4]
	l3g4->csPort = csPort;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	615a      	str	r2, [r3, #20]
	l3g4->csPin = csPin;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	88fa      	ldrh	r2, [r7, #6]
 8001122:	831a      	strh	r2, [r3, #24]
	l3g4->drdyPin = drdyPin;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	88ba      	ldrh	r2, [r7, #4]
 8001128:	835a      	strh	r2, [r3, #26]
	HAL_GPIO_WritePin(l3g4->csPort, l3g4->csPin, GPIO_PIN_SET);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6958      	ldr	r0, [r3, #20]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8b1b      	ldrh	r3, [r3, #24]
 8001132:	2201      	movs	r2, #1
 8001134:	4619      	mov	r1, r3
 8001136:	f002 fd17 	bl	8003b68 <HAL_GPIO_WritePin>
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <L3G4_CheckConnect>:

L3G4_Status_t L3G4_CheckConnect(L3G4_t *l3g4) {
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
	if (L3G4_OK != readRegister8(l3g4, L3G4_WHO_AM_I, &result)) {
 800114e:	f107 030f 	add.w	r3, r7, #15
 8001152:	461a      	mov	r2, r3
 8001154:	210f      	movs	r1, #15
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 fba4 	bl	80018a4 <readRegister8>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <L3G4_CheckConnect+0x24>
		return L3G4_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e016      	b.n	8001194 <L3G4_CheckConnect+0x52>
	}

	if (result != WHO_AM_I_VALID) {
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2bd3      	cmp	r3, #211	; 0xd3
 800116a:	d012      	beq.n	8001192 <L3G4_CheckConnect+0x50>
		if (L3G4_OK != readRegister8(l3g4, L3G4_WHO_AM_I, &result)) {
 800116c:	f107 030f 	add.w	r3, r7, #15
 8001170:	461a      	mov	r2, r3
 8001172:	210f      	movs	r1, #15
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 fb95 	bl	80018a4 <readRegister8>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <L3G4_CheckConnect+0x42>
			return L3G4_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e007      	b.n	8001194 <L3G4_CheckConnect+0x52>
		}
		if (result != WHO_AM_I_VALID) {
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2bd3      	cmp	r3, #211	; 0xd3
 8001188:	d001      	beq.n	800118e <L3G4_CheckConnect+0x4c>
			return L3G4_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e002      	b.n	8001194 <L3G4_CheckConnect+0x52>
		}
		return L3G4_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <L3G4_CheckConnect+0x52>
	}
	return L3G4_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <L3G4_CheckDataAvailable>:

L3G4_Status_t L3G4_CheckDataAvailable(L3G4_t *l3g4) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
	if (L3G4_OK == readRegister8(l3g4, L3G4_STATUS_REG, &result)) {
 80011a8:	f107 030f 	add.w	r3, r7, #15
 80011ac:	461a      	mov	r2, r3
 80011ae:	2127      	movs	r1, #39	; 0x27
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fb77 	bl	80018a4 <readRegister8>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d106      	bne.n	80011ca <L3G4_CheckDataAvailable+0x2e>
		if (result & 0x08) {
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <L3G4_CheckDataAvailable+0x2e>
			return L3G4_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <L3G4_CheckDataAvailable+0x30>
		}
	}
	return L3G4_BUSY;
 80011ca:	2302      	movs	r3, #2
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <L3G4_Config>:

L3G4_Status_t L3G4_Config(L3G4_t *l3g4) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	uint8_t ctrl1 = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
	uint8_t ctrl2 = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73bb      	strb	r3, [r7, #14]
	uint8_t ctrl3 = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	737b      	strb	r3, [r7, #13]
	uint8_t ctrl4 = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	733b      	strb	r3, [r7, #12]
	uint8_t ctrl5 = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	72fb      	strb	r3, [r7, #11]

	ctrl1 |= l3g4->config.ODR | l3g4->config.Bandwidth | l3g4->config.Mode
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	4313      	orrs	r3, r2
 8001202:	b2da      	uxtb	r2, r3
			| l3g4->config.Axis_Enable;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	78db      	ldrb	r3, [r3, #3]
	ctrl1 |= l3g4->config.ODR | l3g4->config.Bandwidth | l3g4->config.Mode
 8001208:	4313      	orrs	r3, r2
 800120a:	b2da      	uxtb	r2, r3
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	4313      	orrs	r3, r2
 8001210:	73fb      	strb	r3, [r7, #15]
	ctrl2 |= l3g4->config.HPF_Mode | l3g4->config.HPCF;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	795a      	ldrb	r2, [r3, #5]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	799b      	ldrb	r3, [r3, #6]
 800121a:	4313      	orrs	r3, r2
 800121c:	b2da      	uxtb	r2, r3
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	4313      	orrs	r3, r2
 8001222:	73bb      	strb	r3, [r7, #14]
	ctrl3 |= l3g4->config.INT1_Enable | L3G4_BOOT_INT1_DIS | L3G4_INT1_ACT_H
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	79da      	ldrb	r2, [r3, #7]
			| L3G4_INT1_PP | l3g4->config.DRRY_Enable | L3G4_WTM_INT2_DIS
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7a1b      	ldrb	r3, [r3, #8]
	ctrl3 |= l3g4->config.INT1_Enable | L3G4_BOOT_INT1_DIS | L3G4_INT1_ACT_H
 800122c:	4313      	orrs	r3, r2
 800122e:	b2da      	uxtb	r2, r3
 8001230:	7b7b      	ldrb	r3, [r7, #13]
 8001232:	4313      	orrs	r3, r2
 8001234:	737b      	strb	r3, [r7, #13]
			| L3G4_ORUN_INT2_DIS | L3G4_EMP_INT2_DIS;
	ctrl4 |= l3g4->config.BDU | L3G4_BLE_LSB | l3g4->config.FS | L3G4_ST_NOR
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7a5a      	ldrb	r2, [r3, #9]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7a9b      	ldrb	r3, [r3, #10]
 800123e:	4313      	orrs	r3, r2
 8001240:	b2da      	uxtb	r2, r3
 8001242:	7b3b      	ldrb	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	733b      	strb	r3, [r7, #12]
			| L3G4_SPI_4_WIRE;
	ctrl5 |= L3G4_BOOT_NOR | l3g4->config.FIFO_Enable | l3g4->config.HPF_Enable
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7ada      	ldrb	r2, [r3, #11]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	791b      	ldrb	r3, [r3, #4]
 8001250:	4313      	orrs	r3, r2
 8001252:	b2da      	uxtb	r2, r3
			| l3g4->config.INT1_SEL | l3g4->config.OUT_SEL;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7b5b      	ldrb	r3, [r3, #13]
	ctrl5 |= L3G4_BOOT_NOR | l3g4->config.FIFO_Enable | l3g4->config.HPF_Enable
 8001258:	4313      	orrs	r3, r2
 800125a:	b2da      	uxtb	r2, r3
			| l3g4->config.INT1_SEL | l3g4->config.OUT_SEL;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7b9b      	ldrb	r3, [r3, #14]
	ctrl5 |= L3G4_BOOT_NOR | l3g4->config.FIFO_Enable | l3g4->config.HPF_Enable
 8001260:	4313      	orrs	r3, r2
 8001262:	b2da      	uxtb	r2, r3
 8001264:	7afb      	ldrb	r3, [r7, #11]
 8001266:	4313      	orrs	r3, r2
 8001268:	72fb      	strb	r3, [r7, #11]

	if (L3G4_OK != writeAndVerifyRegister8(l3g4, L3G4_CTRL_REG1, ctrl1)) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	461a      	mov	r2, r3
 800126e:	2120      	movs	r1, #32
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 fbdd 	bl	8001a30 <writeAndVerifyRegister8>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <L3G4_Config+0xac>
		return L3G4_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e02c      	b.n	80012da <L3G4_Config+0x106>
	}
	if (L3G4_OK != writeAndVerifyRegister8(l3g4, L3G4_CTRL_REG2, ctrl2)) {
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	461a      	mov	r2, r3
 8001284:	2121      	movs	r1, #33	; 0x21
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fbd2 	bl	8001a30 <writeAndVerifyRegister8>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <L3G4_Config+0xc2>
		return L3G4_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e021      	b.n	80012da <L3G4_Config+0x106>
	}
	if (L3G4_OK != writeAndVerifyRegister8(l3g4, L3G4_CTRL_REG3, ctrl3)) {
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	461a      	mov	r2, r3
 800129a:	2122      	movs	r1, #34	; 0x22
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fbc7 	bl	8001a30 <writeAndVerifyRegister8>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <L3G4_Config+0xd8>
		return L3G4_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e016      	b.n	80012da <L3G4_Config+0x106>
	}
	if (L3G4_OK != writeAndVerifyRegister8(l3g4, L3G4_CTRL_REG4, ctrl4)) {
 80012ac:	7b3b      	ldrb	r3, [r7, #12]
 80012ae:	461a      	mov	r2, r3
 80012b0:	2123      	movs	r1, #35	; 0x23
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fbbc 	bl	8001a30 <writeAndVerifyRegister8>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <L3G4_Config+0xee>
		return L3G4_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00b      	b.n	80012da <L3G4_Config+0x106>
	}
	if (L3G4_OK != writeAndVerifyRegister8(l3g4, L3G4_CTRL_REG5, ctrl5)) {
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	461a      	mov	r2, r3
 80012c6:	2124      	movs	r1, #36	; 0x24
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fbb1 	bl	8001a30 <writeAndVerifyRegister8>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <L3G4_Config+0x104>
		return L3G4_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <L3G4_Config+0x106>
	}

	return L3G4_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	0000      	movs	r0, r0
 80012e4:	0000      	movs	r0, r0
	...

080012e8 <L3G4_GetLastX>:
	l3g4->calibX = calibX / sample;
	l3g4->calibY = calibY / sample;
	l3g4->calibZ = calibZ / sample;
}

float L3G4_GetLastX(L3G4_t *l3g4) {
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	float x;
	switch (l3g4->config.FS) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7a9b      	ldrb	r3, [r3, #10]
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	d01d      	beq.n	8001334 <L3G4_GetLastX+0x4c>
 80012f8:	2b20      	cmp	r3, #32
 80012fa:	d002      	beq.n	8001302 <L3G4_GetLastX+0x1a>
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d032      	beq.n	8001366 <L3G4_GetLastX+0x7e>
		break;
	case L3G4_FS_250:
		x = (float) l3g4->outX * FS_250_SENSI;
		break;
	default:
		break;
 8001300:	e04a      	b.n	8001398 <L3G4_GetLastX+0xb0>
		x = (float) l3g4->outX * FS_2000_SENSI;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001310:	ee17 0a90 	vmov	r0, s15
 8001314:	f7ff f910 	bl	8000538 <__aeabi_f2d>
 8001318:	a323      	add	r3, pc, #140	; (adr r3, 80013a8 <L3G4_GetLastX+0xc0>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f963 	bl	80005e8 <__aeabi_dmul>
 8001322:	4603      	mov	r3, r0
 8001324:	460c      	mov	r4, r1
 8001326:	4618      	mov	r0, r3
 8001328:	4621      	mov	r1, r4
 800132a:	f7ff fb97 	bl	8000a5c <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	60fb      	str	r3, [r7, #12]
		break;
 8001332:	e031      	b.n	8001398 <L3G4_GetLastX+0xb0>
		x = (float) l3g4->outX * FS_500_SENSI;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ee17 0a90 	vmov	r0, s15
 8001346:	f7ff f8f7 	bl	8000538 <__aeabi_f2d>
 800134a:	a319      	add	r3, pc, #100	; (adr r3, 80013b0 <L3G4_GetLastX+0xc8>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff f94a 	bl	80005e8 <__aeabi_dmul>
 8001354:	4603      	mov	r3, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4618      	mov	r0, r3
 800135a:	4621      	mov	r1, r4
 800135c:	f7ff fb7e 	bl	8000a5c <__aeabi_d2f>
 8001360:	4603      	mov	r3, r0
 8001362:	60fb      	str	r3, [r7, #12]
		break;
 8001364:	e018      	b.n	8001398 <L3G4_GetLastX+0xb0>
		x = (float) l3g4->outX * FS_250_SENSI;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001374:	ee17 0a90 	vmov	r0, s15
 8001378:	f7ff f8de 	bl	8000538 <__aeabi_f2d>
 800137c:	a30e      	add	r3, pc, #56	; (adr r3, 80013b8 <L3G4_GetLastX+0xd0>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f931 	bl	80005e8 <__aeabi_dmul>
 8001386:	4603      	mov	r3, r0
 8001388:	460c      	mov	r4, r1
 800138a:	4618      	mov	r0, r3
 800138c:	4621      	mov	r1, r4
 800138e:	f7ff fb65 	bl	8000a5c <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	60fb      	str	r3, [r7, #12]
		break;
 8001396:	bf00      	nop
	}
	return x;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	ee07 3a90 	vmov	s15, r3
}
 800139e:	eeb0 0a67 	vmov.f32	s0, s15
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	1eb851ec 	.word	0x1eb851ec
 80013ac:	3fb1eb85 	.word	0x3fb1eb85
 80013b0:	1eb851ec 	.word	0x1eb851ec
 80013b4:	3f91eb85 	.word	0x3f91eb85
 80013b8:	1eb851ec 	.word	0x1eb851ec
 80013bc:	3f81eb85 	.word	0x3f81eb85

080013c0 <L3G4_GetLastY>:

float L3G4_GetLastY(L3G4_t *l3g4) {
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	float y;
	switch (l3g4->config.FS) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7a9b      	ldrb	r3, [r3, #10]
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	d01d      	beq.n	800140c <L3G4_GetLastY+0x4c>
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	d002      	beq.n	80013da <L3G4_GetLastY+0x1a>
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d032      	beq.n	800143e <L3G4_GetLastY+0x7e>
		break;
	case L3G4_FS_250:
		y = (float) l3g4->outY * FS_250_SENSI;
		break;
	default:
		break;
 80013d8:	e04a      	b.n	8001470 <L3G4_GetLastY+0xb0>
		y = (float) l3g4->outY * FS_2000_SENSI;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e8:	ee17 0a90 	vmov	r0, s15
 80013ec:	f7ff f8a4 	bl	8000538 <__aeabi_f2d>
 80013f0:	a323      	add	r3, pc, #140	; (adr r3, 8001480 <L3G4_GetLastY+0xc0>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f8f7 	bl	80005e8 <__aeabi_dmul>
 80013fa:	4603      	mov	r3, r0
 80013fc:	460c      	mov	r4, r1
 80013fe:	4618      	mov	r0, r3
 8001400:	4621      	mov	r1, r4
 8001402:	f7ff fb2b 	bl	8000a5c <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	60fb      	str	r3, [r7, #12]
		break;
 800140a:	e031      	b.n	8001470 <L3G4_GetLastY+0xb0>
		y = (float) l3g4->outY * FS_500_SENSI;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141a:	ee17 0a90 	vmov	r0, s15
 800141e:	f7ff f88b 	bl	8000538 <__aeabi_f2d>
 8001422:	a319      	add	r3, pc, #100	; (adr r3, 8001488 <L3G4_GetLastY+0xc8>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7ff f8de 	bl	80005e8 <__aeabi_dmul>
 800142c:	4603      	mov	r3, r0
 800142e:	460c      	mov	r4, r1
 8001430:	4618      	mov	r0, r3
 8001432:	4621      	mov	r1, r4
 8001434:	f7ff fb12 	bl	8000a5c <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	60fb      	str	r3, [r7, #12]
		break;
 800143c:	e018      	b.n	8001470 <L3G4_GetLastY+0xb0>
		y = (float) l3g4->outY * FS_250_SENSI;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ee17 0a90 	vmov	r0, s15
 8001450:	f7ff f872 	bl	8000538 <__aeabi_f2d>
 8001454:	a30e      	add	r3, pc, #56	; (adr r3, 8001490 <L3G4_GetLastY+0xd0>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f8c5 	bl	80005e8 <__aeabi_dmul>
 800145e:	4603      	mov	r3, r0
 8001460:	460c      	mov	r4, r1
 8001462:	4618      	mov	r0, r3
 8001464:	4621      	mov	r1, r4
 8001466:	f7ff faf9 	bl	8000a5c <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	60fb      	str	r3, [r7, #12]
		break;
 800146e:	bf00      	nop
	}
	return y;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	ee07 3a90 	vmov	s15, r3
}
 8001476:	eeb0 0a67 	vmov.f32	s0, s15
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	1eb851ec 	.word	0x1eb851ec
 8001484:	3fb1eb85 	.word	0x3fb1eb85
 8001488:	1eb851ec 	.word	0x1eb851ec
 800148c:	3f91eb85 	.word	0x3f91eb85
 8001490:	1eb851ec 	.word	0x1eb851ec
 8001494:	3f81eb85 	.word	0x3f81eb85

08001498 <L3G4_GetLastZ>:

float L3G4_GetLastZ(L3G4_t *l3g4) {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	float z;
	switch (l3g4->config.FS) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7a9b      	ldrb	r3, [r3, #10]
 80014a4:	2b10      	cmp	r3, #16
 80014a6:	d01d      	beq.n	80014e4 <L3G4_GetLastZ+0x4c>
 80014a8:	2b20      	cmp	r3, #32
 80014aa:	d002      	beq.n	80014b2 <L3G4_GetLastZ+0x1a>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d032      	beq.n	8001516 <L3G4_GetLastZ+0x7e>
		break;
	case L3G4_FS_250:
		z = (float) l3g4->outZ * FS_250_SENSI;
		break;
	default:
		break;
 80014b0:	e04a      	b.n	8001548 <L3G4_GetLastZ+0xb0>
		z = (float) l3g4->outZ * FS_2000_SENSI;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c0:	ee17 0a90 	vmov	r0, s15
 80014c4:	f7ff f838 	bl	8000538 <__aeabi_f2d>
 80014c8:	a323      	add	r3, pc, #140	; (adr r3, 8001558 <L3G4_GetLastZ+0xc0>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f88b 	bl	80005e8 <__aeabi_dmul>
 80014d2:	4603      	mov	r3, r0
 80014d4:	460c      	mov	r4, r1
 80014d6:	4618      	mov	r0, r3
 80014d8:	4621      	mov	r1, r4
 80014da:	f7ff fabf 	bl	8000a5c <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	60fb      	str	r3, [r7, #12]
		break;
 80014e2:	e031      	b.n	8001548 <L3G4_GetLastZ+0xb0>
		z = (float) l3g4->outZ * FS_500_SENSI;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f2:	ee17 0a90 	vmov	r0, s15
 80014f6:	f7ff f81f 	bl	8000538 <__aeabi_f2d>
 80014fa:	a319      	add	r3, pc, #100	; (adr r3, 8001560 <L3G4_GetLastZ+0xc8>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f872 	bl	80005e8 <__aeabi_dmul>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	4618      	mov	r0, r3
 800150a:	4621      	mov	r1, r4
 800150c:	f7ff faa6 	bl	8000a5c <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	60fb      	str	r3, [r7, #12]
		break;
 8001514:	e018      	b.n	8001548 <L3G4_GetLastZ+0xb0>
		z = (float) l3g4->outZ * FS_250_SENSI;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	ee17 0a90 	vmov	r0, s15
 8001528:	f7ff f806 	bl	8000538 <__aeabi_f2d>
 800152c:	a30e      	add	r3, pc, #56	; (adr r3, 8001568 <L3G4_GetLastZ+0xd0>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f859 	bl	80005e8 <__aeabi_dmul>
 8001536:	4603      	mov	r3, r0
 8001538:	460c      	mov	r4, r1
 800153a:	4618      	mov	r0, r3
 800153c:	4621      	mov	r1, r4
 800153e:	f7ff fa8d 	bl	8000a5c <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	60fb      	str	r3, [r7, #12]
		break;
 8001546:	bf00      	nop
	}
	return z;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	1eb851ec 	.word	0x1eb851ec
 800155c:	3fb1eb85 	.word	0x3fb1eb85
 8001560:	1eb851ec 	.word	0x1eb851ec
 8001564:	3f91eb85 	.word	0x3f91eb85
 8001568:	1eb851ec 	.word	0x1eb851ec
 800156c:	3f81eb85 	.word	0x3f81eb85

08001570 <L3G4_GetCalibX>:

float L3G4_GetCalibX(L3G4_t *l3g4) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	float x;
	switch (l3g4->config.FS) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7a9b      	ldrb	r3, [r3, #10]
 800157c:	2b10      	cmp	r3, #16
 800157e:	d01d      	beq.n	80015bc <L3G4_GetCalibX+0x4c>
 8001580:	2b20      	cmp	r3, #32
 8001582:	d002      	beq.n	800158a <L3G4_GetCalibX+0x1a>
 8001584:	2b00      	cmp	r3, #0
 8001586:	d032      	beq.n	80015ee <L3G4_GetCalibX+0x7e>
		break;
	case L3G4_FS_250:
		x = (float) l3g4->calibX * FS_250_SENSI;
		break;
	default:
		break;
 8001588:	e04a      	b.n	8001620 <L3G4_GetCalibX+0xb0>
		x = (float) l3g4->calibX * FS_2000_SENSI;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001598:	ee17 0a90 	vmov	r0, s15
 800159c:	f7fe ffcc 	bl	8000538 <__aeabi_f2d>
 80015a0:	a323      	add	r3, pc, #140	; (adr r3, 8001630 <L3G4_GetCalibX+0xc0>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff f81f 	bl	80005e8 <__aeabi_dmul>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	4618      	mov	r0, r3
 80015b0:	4621      	mov	r1, r4
 80015b2:	f7ff fa53 	bl	8000a5c <__aeabi_d2f>
 80015b6:	4603      	mov	r3, r0
 80015b8:	60fb      	str	r3, [r7, #12]
		break;
 80015ba:	e031      	b.n	8001620 <L3G4_GetCalibX+0xb0>
		x = (float) l3g4->calibX * FS_500_SENSI;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	ee17 0a90 	vmov	r0, s15
 80015ce:	f7fe ffb3 	bl	8000538 <__aeabi_f2d>
 80015d2:	a319      	add	r3, pc, #100	; (adr r3, 8001638 <L3G4_GetCalibX+0xc8>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f806 	bl	80005e8 <__aeabi_dmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	4618      	mov	r0, r3
 80015e2:	4621      	mov	r1, r4
 80015e4:	f7ff fa3a 	bl	8000a5c <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	60fb      	str	r3, [r7, #12]
		break;
 80015ec:	e018      	b.n	8001620 <L3G4_GetCalibX+0xb0>
		x = (float) l3g4->calibX * FS_250_SENSI;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fc:	ee17 0a90 	vmov	r0, s15
 8001600:	f7fe ff9a 	bl	8000538 <__aeabi_f2d>
 8001604:	a30e      	add	r3, pc, #56	; (adr r3, 8001640 <L3G4_GetCalibX+0xd0>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe ffed 	bl	80005e8 <__aeabi_dmul>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	4618      	mov	r0, r3
 8001614:	4621      	mov	r1, r4
 8001616:	f7ff fa21 	bl	8000a5c <__aeabi_d2f>
 800161a:	4603      	mov	r3, r0
 800161c:	60fb      	str	r3, [r7, #12]
		break;
 800161e:	bf00      	nop
	}
	return x;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	ee07 3a90 	vmov	s15, r3
}
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	1eb851ec 	.word	0x1eb851ec
 8001634:	3fb1eb85 	.word	0x3fb1eb85
 8001638:	1eb851ec 	.word	0x1eb851ec
 800163c:	3f91eb85 	.word	0x3f91eb85
 8001640:	1eb851ec 	.word	0x1eb851ec
 8001644:	3f81eb85 	.word	0x3f81eb85

08001648 <L3G4_GetCalibY>:

float L3G4_GetCalibY(L3G4_t *l3g4) {
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	float y;
	switch (l3g4->config.FS) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7a9b      	ldrb	r3, [r3, #10]
 8001654:	2b10      	cmp	r3, #16
 8001656:	d01d      	beq.n	8001694 <L3G4_GetCalibY+0x4c>
 8001658:	2b20      	cmp	r3, #32
 800165a:	d002      	beq.n	8001662 <L3G4_GetCalibY+0x1a>
 800165c:	2b00      	cmp	r3, #0
 800165e:	d032      	beq.n	80016c6 <L3G4_GetCalibY+0x7e>
		break;
	case L3G4_FS_250:
		y = (float) l3g4->calibY * FS_250_SENSI;
		break;
	default:
		break;
 8001660:	e04a      	b.n	80016f8 <L3G4_GetCalibY+0xb0>
		y = (float) l3g4->calibY * FS_2000_SENSI;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ee17 0a90 	vmov	r0, s15
 8001674:	f7fe ff60 	bl	8000538 <__aeabi_f2d>
 8001678:	a323      	add	r3, pc, #140	; (adr r3, 8001708 <L3G4_GetCalibY+0xc0>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe ffb3 	bl	80005e8 <__aeabi_dmul>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	4618      	mov	r0, r3
 8001688:	4621      	mov	r1, r4
 800168a:	f7ff f9e7 	bl	8000a5c <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	60fb      	str	r3, [r7, #12]
		break;
 8001692:	e031      	b.n	80016f8 <L3G4_GetCalibY+0xb0>
		y = (float) l3g4->calibY * FS_500_SENSI;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a2:	ee17 0a90 	vmov	r0, s15
 80016a6:	f7fe ff47 	bl	8000538 <__aeabi_f2d>
 80016aa:	a319      	add	r3, pc, #100	; (adr r3, 8001710 <L3G4_GetCalibY+0xc8>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7fe ff9a 	bl	80005e8 <__aeabi_dmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	4618      	mov	r0, r3
 80016ba:	4621      	mov	r1, r4
 80016bc:	f7ff f9ce 	bl	8000a5c <__aeabi_d2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]
		break;
 80016c4:	e018      	b.n	80016f8 <L3G4_GetCalibY+0xb0>
		y = (float) l3g4->calibY * FS_250_SENSI;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d4:	ee17 0a90 	vmov	r0, s15
 80016d8:	f7fe ff2e 	bl	8000538 <__aeabi_f2d>
 80016dc:	a30e      	add	r3, pc, #56	; (adr r3, 8001718 <L3G4_GetCalibY+0xd0>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe ff81 	bl	80005e8 <__aeabi_dmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	f7ff f9b5 	bl	8000a5c <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	60fb      	str	r3, [r7, #12]
		break;
 80016f6:	bf00      	nop
	}
	return y;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	ee07 3a90 	vmov	s15, r3
}
 80016fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	1eb851ec 	.word	0x1eb851ec
 800170c:	3fb1eb85 	.word	0x3fb1eb85
 8001710:	1eb851ec 	.word	0x1eb851ec
 8001714:	3f91eb85 	.word	0x3f91eb85
 8001718:	1eb851ec 	.word	0x1eb851ec
 800171c:	3f81eb85 	.word	0x3f81eb85

08001720 <L3G4_GetCalibZ>:

float L3G4_GetCalibZ(L3G4_t *l3g4) {
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	float z;
	switch (l3g4->config.FS) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7a9b      	ldrb	r3, [r3, #10]
 800172c:	2b10      	cmp	r3, #16
 800172e:	d01d      	beq.n	800176c <L3G4_GetCalibZ+0x4c>
 8001730:	2b20      	cmp	r3, #32
 8001732:	d002      	beq.n	800173a <L3G4_GetCalibZ+0x1a>
 8001734:	2b00      	cmp	r3, #0
 8001736:	d032      	beq.n	800179e <L3G4_GetCalibZ+0x7e>
		break;
	case L3G4_FS_250:
		z = (float) l3g4->calibZ * FS_250_SENSI;
		break;
	default:
		break;
 8001738:	e04a      	b.n	80017d0 <L3G4_GetCalibZ+0xb0>
		z = (float) l3g4->calibZ * FS_2000_SENSI;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001748:	ee17 0a90 	vmov	r0, s15
 800174c:	f7fe fef4 	bl	8000538 <__aeabi_f2d>
 8001750:	a323      	add	r3, pc, #140	; (adr r3, 80017e0 <L3G4_GetCalibZ+0xc0>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe ff47 	bl	80005e8 <__aeabi_dmul>
 800175a:	4603      	mov	r3, r0
 800175c:	460c      	mov	r4, r1
 800175e:	4618      	mov	r0, r3
 8001760:	4621      	mov	r1, r4
 8001762:	f7ff f97b 	bl	8000a5c <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	60fb      	str	r3, [r7, #12]
		break;
 800176a:	e031      	b.n	80017d0 <L3G4_GetCalibZ+0xb0>
		z = (float) l3g4->calibZ * FS_500_SENSI;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177a:	ee17 0a90 	vmov	r0, s15
 800177e:	f7fe fedb 	bl	8000538 <__aeabi_f2d>
 8001782:	a319      	add	r3, pc, #100	; (adr r3, 80017e8 <L3G4_GetCalibZ+0xc8>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ff2e 	bl	80005e8 <__aeabi_dmul>
 800178c:	4603      	mov	r3, r0
 800178e:	460c      	mov	r4, r1
 8001790:	4618      	mov	r0, r3
 8001792:	4621      	mov	r1, r4
 8001794:	f7ff f962 	bl	8000a5c <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	60fb      	str	r3, [r7, #12]
		break;
 800179c:	e018      	b.n	80017d0 <L3G4_GetCalibZ+0xb0>
		z = (float) l3g4->calibZ * FS_250_SENSI;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	ee17 0a90 	vmov	r0, s15
 80017b0:	f7fe fec2 	bl	8000538 <__aeabi_f2d>
 80017b4:	a30e      	add	r3, pc, #56	; (adr r3, 80017f0 <L3G4_GetCalibZ+0xd0>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe ff15 	bl	80005e8 <__aeabi_dmul>
 80017be:	4603      	mov	r3, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	4618      	mov	r0, r3
 80017c4:	4621      	mov	r1, r4
 80017c6:	f7ff f949 	bl	8000a5c <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	60fb      	str	r3, [r7, #12]
		break;
 80017ce:	bf00      	nop
	}
	return z;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	ee07 3a90 	vmov	s15, r3
}
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	1eb851ec 	.word	0x1eb851ec
 80017e4:	3fb1eb85 	.word	0x3fb1eb85
 80017e8:	1eb851ec 	.word	0x1eb851ec
 80017ec:	3f91eb85 	.word	0x3f91eb85
 80017f0:	1eb851ec 	.word	0x1eb851ec
 80017f4:	3f81eb85 	.word	0x3f81eb85

080017f8 <L3G4_ReadAll>:
	} else {
		HAL_Delay(1);
	}
}

void L3G4_ReadAll(L3G4_t *l3g4) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	uint16_t outX = 0, outY = 0, outZ = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	81fb      	strh	r3, [r7, #14]
 8001804:	2300      	movs	r3, #0
 8001806:	81bb      	strh	r3, [r7, #12]
 8001808:	2300      	movs	r3, #0
 800180a:	817b      	strh	r3, [r7, #10]

	readRegister16(l3g4, L3G4_OUT_X_L, &outX);
 800180c:	f107 030e 	add.w	r3, r7, #14
 8001810:	461a      	mov	r2, r3
 8001812:	2128      	movs	r1, #40	; 0x28
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f884 	bl	8001922 <readRegister16>
	readRegister16(l3g4, L3G4_OUT_Y_L, &outY);
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	461a      	mov	r2, r3
 8001820:	212a      	movs	r1, #42	; 0x2a
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f87d 	bl	8001922 <readRegister16>
	readRegister16(l3g4, L3G4_OUT_Z_L, &outZ);
 8001828:	f107 030a 	add.w	r3, r7, #10
 800182c:	461a      	mov	r2, r3
 800182e:	212c      	movs	r1, #44	; 0x2c
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f876 	bl	8001922 <readRegister16>

	l3g4->outX = ((int16_t) outX) - l3g4->calibX;
 8001836:	89fa      	ldrh	r2, [r7, #14]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800183e:	b29b      	uxth	r3, r3
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	b29b      	uxth	r3, r3
 8001844:	b21a      	sxth	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	841a      	strh	r2, [r3, #32]
	l3g4->outY = ((int16_t) outY) - l3g4->calibY;
 800184a:	89ba      	ldrh	r2, [r7, #12]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001852:	b29b      	uxth	r3, r3
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	b29b      	uxth	r3, r3
 8001858:	b21a      	sxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	845a      	strh	r2, [r3, #34]	; 0x22
	l3g4->outZ = ((int16_t) outZ) - l3g4->calibZ;
 800185e:	897a      	ldrh	r2, [r7, #10]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001866:	b29b      	uxth	r3, r3
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	b29b      	uxth	r3, r3
 800186c:	b21a      	sxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <L3G4_InterruptCallback>:

void L3G4_InterruptCallback(L3G4_t *l3g4, uint16_t pin) {
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	807b      	strh	r3, [r7, #2]
	if (pin == l3g4->drdyPin) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	8b5b      	ldrh	r3, [r3, #26]
 800188a:	b29b      	uxth	r3, r3
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	429a      	cmp	r2, r3
 8001890:	d102      	bne.n	8001898 <L3G4_InterruptCallback+0x1e>
		l3g4->dataAvai = 1U;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	61da      	str	r2, [r3, #28]
	}
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <readRegister8>:

L3G4_Status_t readRegister8(L3G4_t *l3g4, uint8_t reg, uint8_t *result) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	460b      	mov	r3, r1
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	72fb      	strb	r3, [r7, #11]
	uint8_t outByte[2] = { 0x80 | reg, 0 };
 80018b2:	7afb      	ldrb	r3, [r7, #11]
 80018b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	753b      	strb	r3, [r7, #20]
 80018bc:	2300      	movs	r3, #0
 80018be:	757b      	strb	r3, [r7, #21]
	uint8_t inByte[2] = { 0, 0 };
 80018c0:	2300      	movs	r3, #0
 80018c2:	743b      	strb	r3, [r7, #16]
 80018c4:	2300      	movs	r3, #0
 80018c6:	747b      	strb	r3, [r7, #17]
	HAL_StatusTypeDef status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(l3g4->csPort, l3g4->csPin, GPIO_PIN_RESET);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6958      	ldr	r0, [r3, #20]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8b1b      	ldrh	r3, [r3, #24]
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	f002 f946 	bl	8003b68 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(l3g4->spi, outByte, inByte, 2, 1000);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6918      	ldr	r0, [r3, #16]
 80018e0:	f107 0210 	add.w	r2, r7, #16
 80018e4:	f107 0114 	add.w	r1, r7, #20
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2302      	movs	r3, #2
 80018f0:	f002 fe58 	bl	80045a4 <HAL_SPI_TransmitReceive>
 80018f4:	4603      	mov	r3, r0
 80018f6:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(l3g4->csPort, l3g4->csPin, GPIO_PIN_SET);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6958      	ldr	r0, [r3, #20]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8b1b      	ldrh	r3, [r3, #24]
 8001900:	2201      	movs	r2, #1
 8001902:	4619      	mov	r1, r3
 8001904:	f002 f930 	bl	8003b68 <HAL_GPIO_WritePin>

	if (HAL_OK != status) {
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <readRegister8+0x6e>
		return L3G4_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e003      	b.n	800191a <readRegister8+0x76>
	}
	*result = inByte[1];
 8001912:	7c7a      	ldrb	r2, [r7, #17]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	701a      	strb	r2, [r3, #0]
	return L3G4_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <readRegister16>:

L3G4_Status_t readRegister16(L3G4_t *l3g4, uint8_t reg, uint16_t *result) {
 8001922:	b580      	push	{r7, lr}
 8001924:	b088      	sub	sp, #32
 8001926:	af02      	add	r7, sp, #8
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	460b      	mov	r3, r1
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	72fb      	strb	r3, [r7, #11]
	uint8_t outByte[] = { 0xC0 | reg, 0, 0 };
 8001930:	7afb      	ldrb	r3, [r7, #11]
 8001932:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001936:	b2db      	uxtb	r3, r3
 8001938:	753b      	strb	r3, [r7, #20]
 800193a:	2300      	movs	r3, #0
 800193c:	757b      	strb	r3, [r7, #21]
 800193e:	2300      	movs	r3, #0
 8001940:	75bb      	strb	r3, [r7, #22]
	uint8_t inByte[] = { 0, 0, 0 };
 8001942:	2300      	movs	r3, #0
 8001944:	743b      	strb	r3, [r7, #16]
 8001946:	2300      	movs	r3, #0
 8001948:	747b      	strb	r3, [r7, #17]
 800194a:	2300      	movs	r3, #0
 800194c:	74bb      	strb	r3, [r7, #18]
	HAL_StatusTypeDef status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(l3g4->csPort, l3g4->csPin, GPIO_PIN_RESET);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6958      	ldr	r0, [r3, #20]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8b1b      	ldrh	r3, [r3, #24]
 800195a:	2200      	movs	r2, #0
 800195c:	4619      	mov	r1, r3
 800195e:	f002 f903 	bl	8003b68 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(l3g4->spi, outByte, inByte, 3, 1000);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6918      	ldr	r0, [r3, #16]
 8001966:	f107 0210 	add.w	r2, r7, #16
 800196a:	f107 0114 	add.w	r1, r7, #20
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2303      	movs	r3, #3
 8001976:	f002 fe15 	bl	80045a4 <HAL_SPI_TransmitReceive>
 800197a:	4603      	mov	r3, r0
 800197c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(l3g4->csPort, l3g4->csPin, GPIO_PIN_SET);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6958      	ldr	r0, [r3, #20]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8b1b      	ldrh	r3, [r3, #24]
 8001986:	2201      	movs	r2, #1
 8001988:	4619      	mov	r1, r3
 800198a:	f002 f8ed 	bl	8003b68 <HAL_GPIO_WritePin>

	if (HAL_OK != status) {
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <readRegister16+0x76>
		return L3G4_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e00a      	b.n	80019ae <readRegister16+0x8c>
	}
	*result = inByte[2] << 8 | inByte[1];
 8001998:	7cbb      	ldrb	r3, [r7, #18]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	b21a      	sxth	r2, r3
 800199e:	7c7b      	ldrb	r3, [r7, #17]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	801a      	strh	r2, [r3, #0]
	return L3G4_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <writeRegister8>:

L3G4_Status_t writeRegister8(L3G4_t *l3g4, uint8_t reg, uint8_t data) {
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af02      	add	r7, sp, #8
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	70fb      	strb	r3, [r7, #3]
 80019c2:	4613      	mov	r3, r2
 80019c4:	70bb      	strb	r3, [r7, #2]
	uint8_t outByte[2] = { 0x7F & reg, data };
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	733b      	strb	r3, [r7, #12]
 80019d0:	78bb      	ldrb	r3, [r7, #2]
 80019d2:	737b      	strb	r3, [r7, #13]
	uint8_t inByte[2] = { 0, 0 };
 80019d4:	2300      	movs	r3, #0
 80019d6:	723b      	strb	r3, [r7, #8]
 80019d8:	2300      	movs	r3, #0
 80019da:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(l3g4->csPort, l3g4->csPin, GPIO_PIN_RESET);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6958      	ldr	r0, [r3, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	8b1b      	ldrh	r3, [r3, #24]
 80019e8:	2200      	movs	r2, #0
 80019ea:	4619      	mov	r1, r3
 80019ec:	f002 f8bc 	bl	8003b68 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(l3g4->spi, outByte, inByte, 2, 1000);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6918      	ldr	r0, [r3, #16]
 80019f4:	f107 0208 	add.w	r2, r7, #8
 80019f8:	f107 010c 	add.w	r1, r7, #12
 80019fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2302      	movs	r3, #2
 8001a04:	f002 fdce 	bl	80045a4 <HAL_SPI_TransmitReceive>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(l3g4->csPort, l3g4->csPin, GPIO_PIN_SET);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6958      	ldr	r0, [r3, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	8b1b      	ldrh	r3, [r3, #24]
 8001a14:	2201      	movs	r2, #1
 8001a16:	4619      	mov	r1, r3
 8001a18:	f002 f8a6 	bl	8003b68 <HAL_GPIO_WritePin>

	if (HAL_OK != status) {
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <writeRegister8+0x70>
		return L3G4_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <writeRegister8+0x72>
	}
	return L3G4_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <writeAndVerifyRegister8>:

L3G4_Status_t writeAndVerifyRegister8(L3G4_t *l3g4, uint8_t reg, uint8_t data) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	70bb      	strb	r3, [r7, #2]
	uint8_t result = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
	writeRegister8(l3g4, reg, data);
 8001a44:	78ba      	ldrb	r2, [r7, #2]
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffb3 	bl	80019b6 <writeRegister8>
	readRegister8(l3g4, reg, &result);
 8001a50:	f107 020f 	add.w	r2, r7, #15
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff23 	bl	80018a4 <readRegister8>
	if (data != result) {
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	78ba      	ldrb	r2, [r7, #2]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d001      	beq.n	8001a6a <writeAndVerifyRegister8+0x3a>
		return L3G4_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <writeAndVerifyRegister8+0x3c>
	}
	return L3G4_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	(void) file;
	if (HAL_OK
			!= HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY)) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <_write+0x30>)
 8001a8c:	f004 f891 	bl	8005bb2 <HAL_UART_Transmit>
 8001a90:	4603      	mov	r3, r0
	if (HAL_OK
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <_write+0x26>
		return 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <_write+0x28>
	}
	return len;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000298 	.word	0x20000298

08001aa8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b0b4      	sub	sp, #208	; 0xd0
 8001aac:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001aae:	f001 fb19 	bl	80030e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ab2:	f000 fc73 	bl	800239c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ab6:	f7ff fa37 	bl	8000f28 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001aba:	f7ff f99f 	bl	8000dfc <MX_ADC1_Init>
	MX_SPI3_Init();
 8001abe:	f000 fe77 	bl	80027b0 <MX_SPI3_Init>
	MX_TIM2_Init();
 8001ac2:	f001 f8a5 	bl	8002c10 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001ac6:	f001 f8f5 	bl	8002cb4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001aca:	f001 fa6f 	bl	8002fac <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8001ace:	f001 f96b 	bl	8002da8 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	printf("[MINIQUAD STARTED]\n");
 8001ad2:	488b      	ldr	r0, [pc, #556]	; (8001d00 <main+0x258>)
 8001ad4:	f004 fd72 	bl	80065bc <puts>
	HAL_GPIO_WritePin(LED_USR_GPIO_Port, LED_USR_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ade:	4889      	ldr	r0, [pc, #548]	; (8001d04 <main+0x25c>)
 8001ae0:	f002 f842 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aea:	4886      	ldr	r0, [pc, #536]	; (8001d04 <main+0x25c>)
 8001aec:	f002 f83c 	bl	8003b68 <HAL_GPIO_WritePin>

	printf("Starting Timer base\n");
 8001af0:	4885      	ldr	r0, [pc, #532]	; (8001d08 <main+0x260>)
 8001af2:	f004 fd63 	bl	80065bc <puts>
	HAL_TIM_Base_Start(&htim7);
 8001af6:	4885      	ldr	r0, [pc, #532]	; (8001d0c <main+0x264>)
 8001af8:	f002 ffcd 	bl	8004a96 <HAL_TIM_Base_Start>

	printf("Starting PPM decoder\n");
 8001afc:	4884      	ldr	r0, [pc, #528]	; (8001d10 <main+0x268>)
 8001afe:	f004 fd5d 	bl	80065bc <puts>
	PPM_Init(&ppm, 8);
 8001b02:	2108      	movs	r1, #8
 8001b04:	4883      	ldr	r0, [pc, #524]	; (8001d14 <main+0x26c>)
 8001b06:	f000 fdc3 	bl	8002690 <PPM_Init>
	PPM_InstallDriver(&ppm, &htim2, TIM_CHANNEL_1);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4982      	ldr	r1, [pc, #520]	; (8001d18 <main+0x270>)
 8001b0e:	4881      	ldr	r0, [pc, #516]	; (8001d14 <main+0x26c>)
 8001b10:	f000 fdd5 	bl	80026be <PPM_InstallDriver>
	PPM_Start(&ppm);
 8001b14:	487f      	ldr	r0, [pc, #508]	; (8001d14 <main+0x26c>)
 8001b16:	f000 fde4 	bl	80026e2 <PPM_Start>

	printf("Starting PWM\n");
 8001b1a:	4880      	ldr	r0, [pc, #512]	; (8001d1c <main+0x274>)
 8001b1c:	f004 fd4e 	bl	80065bc <puts>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b20:	2100      	movs	r1, #0
 8001b22:	487f      	ldr	r0, [pc, #508]	; (8001d20 <main+0x278>)
 8001b24:	f003 f82a 	bl	8004b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b28:	2104      	movs	r1, #4
 8001b2a:	487d      	ldr	r0, [pc, #500]	; (8001d20 <main+0x278>)
 8001b2c:	f003 f826 	bl	8004b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b30:	2108      	movs	r1, #8
 8001b32:	487b      	ldr	r0, [pc, #492]	; (8001d20 <main+0x278>)
 8001b34:	f003 f822 	bl	8004b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001b38:	210c      	movs	r1, #12
 8001b3a:	4879      	ldr	r0, [pc, #484]	; (8001d20 <main+0x278>)
 8001b3c:	f003 f81e 	bl	8004b7c <HAL_TIM_PWM_Start>

	SET_MOTOR_1(0);
 8001b40:	4b77      	ldr	r3, [pc, #476]	; (8001d20 <main+0x278>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
	SET_MOTOR_2(0);
 8001b48:	4b75      	ldr	r3, [pc, #468]	; (8001d20 <main+0x278>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	639a      	str	r2, [r3, #56]	; 0x38
	SET_MOTOR_3(0);
 8001b50:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <main+0x278>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2200      	movs	r2, #0
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_MOTOR_4(0);
 8001b58:	4b71      	ldr	r3, [pc, #452]	; (8001d20 <main+0x278>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40

	printf("Setting sensor\n");
 8001b60:	4870      	ldr	r0, [pc, #448]	; (8001d24 <main+0x27c>)
 8001b62:	f004 fd2b 	bl	80065bc <puts>
	L3G4_Init(&L3G4);
 8001b66:	4870      	ldr	r0, [pc, #448]	; (8001d28 <main+0x280>)
 8001b68:	f7ff fa6a 	bl	8001040 <L3G4_Init>
	L3G4_InstallDriver(&L3G4, &hspi3);
 8001b6c:	496f      	ldr	r1, [pc, #444]	; (8001d2c <main+0x284>)
 8001b6e:	486e      	ldr	r0, [pc, #440]	; (8001d28 <main+0x280>)
 8001b70:	f7ff fab9 	bl	80010e6 <L3G4_InstallDriver>
	L3G4_InstallGPIO(&L3G4, CS3_GPIO_Port, CS3_Pin, DRDY_Pin);
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b7a:	496d      	ldr	r1, [pc, #436]	; (8001d30 <main+0x288>)
 8001b7c:	486a      	ldr	r0, [pc, #424]	; (8001d28 <main+0x280>)
 8001b7e:	f7ff fac0 	bl	8001102 <L3G4_InstallGPIO>
	while (L3G4_OK != L3G4_CheckConnect(&L3G4)) {
 8001b82:	e012      	b.n	8001baa <main+0x102>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b8a:	485e      	ldr	r0, [pc, #376]	; (8001d04 <main+0x25c>)
 8001b8c:	f001 ffec 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8001b90:	2032      	movs	r0, #50	; 0x32
 8001b92:	f001 fae9 	bl	8003168 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9c:	4859      	ldr	r0, [pc, #356]	; (8001d04 <main+0x25c>)
 8001b9e:	f001 ffe3 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ba6:	f001 fadf 	bl	8003168 <HAL_Delay>
	while (L3G4_OK != L3G4_CheckConnect(&L3G4)) {
 8001baa:	485f      	ldr	r0, [pc, #380]	; (8001d28 <main+0x280>)
 8001bac:	f7ff fac9 	bl	8001142 <L3G4_CheckConnect>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1e6      	bne.n	8001b84 <main+0xdc>
	}
	HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bbc:	4851      	ldr	r0, [pc, #324]	; (8001d04 <main+0x25c>)
 8001bbe:	f001 ffd3 	bl	8003b68 <HAL_GPIO_WritePin>
	printf("Configuring sensor\n");
 8001bc2:	485c      	ldr	r0, [pc, #368]	; (8001d34 <main+0x28c>)
 8001bc4:	f004 fcfa 	bl	80065bc <puts>
	L3G4_Config(&L3G4);
 8001bc8:	4857      	ldr	r0, [pc, #348]	; (8001d28 <main+0x280>)
 8001bca:	f7ff fb03 	bl	80011d4 <L3G4_Config>

	printf("Calibrating sensor\n");
 8001bce:	485a      	ldr	r0, [pc, #360]	; (8001d38 <main+0x290>)
 8001bd0:	f004 fcf4 	bl	80065bc <puts>
//	L3G4_Calib(&L3G4, 500);
	printf("Calibrating finished: %d, %d, %d\n",
			(int16_t) L3G4_GetCalibX(&L3G4), (int16_t) L3G4_GetCalibY(&L3G4),
 8001bd4:	4854      	ldr	r0, [pc, #336]	; (8001d28 <main+0x280>)
 8001bd6:	f7ff fccb 	bl	8001570 <L3G4_GetCalibX>
 8001bda:	eef0 7a40 	vmov.f32	s15, s0
 8001bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be2:	ee17 3a90 	vmov	r3, s15
 8001be6:	b21b      	sxth	r3, r3
	printf("Calibrating finished: %d, %d, %d\n",
 8001be8:	461c      	mov	r4, r3
			(int16_t) L3G4_GetCalibX(&L3G4), (int16_t) L3G4_GetCalibY(&L3G4),
 8001bea:	484f      	ldr	r0, [pc, #316]	; (8001d28 <main+0x280>)
 8001bec:	f7ff fd2c 	bl	8001648 <L3G4_GetCalibY>
 8001bf0:	eef0 7a40 	vmov.f32	s15, s0
 8001bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf8:	ee17 3a90 	vmov	r3, s15
 8001bfc:	b21b      	sxth	r3, r3
	printf("Calibrating finished: %d, %d, %d\n",
 8001bfe:	461d      	mov	r5, r3
			(int16_t) L3G4_GetCalibZ(&L3G4));
 8001c00:	4849      	ldr	r0, [pc, #292]	; (8001d28 <main+0x280>)
 8001c02:	f7ff fd8d 	bl	8001720 <L3G4_GetCalibZ>
 8001c06:	eef0 7a40 	vmov.f32	s15, s0
 8001c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c0e:	ee17 3a90 	vmov	r3, s15
 8001c12:	b21b      	sxth	r3, r3
	printf("Calibrating finished: %d, %d, %d\n",
 8001c14:	462a      	mov	r2, r5
 8001c16:	4621      	mov	r1, r4
 8001c18:	4848      	ldr	r0, [pc, #288]	; (8001d3c <main+0x294>)
 8001c1a:	f004 fc5b 	bl	80064d4 <iprintf>
#if DEBUG_MOTOR_EN == 1
	uint32_t lastMotorTime = 0;
#endif

	float dT;
	uint32_t lastT = 0, T;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int16_t motorValue1, motorValue2, motorValue3, motorValue4;
	pidHelper_t pidRoll, pidPitch, pidYaw;
	float outputRoll, outputPitch, outputYaw;
	float readRoll, readPitch, readYaw;
	float inRoll = 0, inPitch = 0, inYaw = 0;
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float setRoll = 0, setPitch = 0, setYaw = 0, setThr = 0, setOffset = 0;
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	printf("Setting PID\n");
 8001c64:	4836      	ldr	r0, [pc, #216]	; (8001d40 <main+0x298>)
 8001c66:	f004 fca9 	bl	80065bc <puts>
	PID_Setup(&pidRoll, ROLL_PID, MAX_MOTOR_VALUE);
 8001c6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c6e:	eddf 1a35 	vldr	s3, [pc, #212]	; 8001d44 <main+0x29c>
 8001c72:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8001d48 <main+0x2a0>
 8001c76:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001d4c <main+0x2a4>
 8001c7a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001d50 <main+0x2a8>
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fc68 	bl	8002554 <PID_Setup>
	PID_Setup(&pidPitch, PITCH_PID, MAX_MOTOR_VALUE);
 8001c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c88:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8001d44 <main+0x29c>
 8001c8c:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8001d48 <main+0x2a0>
 8001c90:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8001d4c <main+0x2a4>
 8001c94:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8001d50 <main+0x2a8>
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fc5b 	bl	8002554 <PID_Setup>
	PID_Setup(&pidYaw, YAW_PID, MAX_MOTOR_VALUE);
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	eddf 1a28 	vldr	s3, [pc, #160]	; 8001d44 <main+0x29c>
 8001ca4:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8001d4c <main+0x2a4>
 8001ca8:	eddf 0a28 	vldr	s1, [pc, #160]	; 8001d4c <main+0x2a4>
 8001cac:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fc4f 	bl	8002554 <PID_Setup>

	while (1) {
		if (L3G4_OK == L3G4_CheckDataAvailable(&L3G4)) {
 8001cb6:	481c      	ldr	r0, [pc, #112]	; (8001d28 <main+0x280>)
 8001cb8:	f7ff fa70 	bl	800119c <L3G4_CheckDataAvailable>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f9      	bne.n	8001cb6 <main+0x20e>

			L3G4_ReadAll(&L3G4);
 8001cc2:	4819      	ldr	r0, [pc, #100]	; (8001d28 <main+0x280>)
 8001cc4:	f7ff fd98 	bl	80017f8 <L3G4_ReadAll>

			/* Calculate dT */
			T = __HAL_TIM_GET_COUNTER(&htim7);
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <main+0x264>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			if (T > lastT)
 8001cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d93c      	bls.n	8001d58 <main+0x2b0>
				dT = (float) (T - lastT) / 1000000.0;
 8001cde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cf0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001d54 <main+0x2ac>
 8001cf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf8:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 8001cfc:	e03d      	b.n	8001d7a <main+0x2d2>
 8001cfe:	bf00      	nop
 8001d00:	0800737c 	.word	0x0800737c
 8001d04:	40020400 	.word	0x40020400
 8001d08:	08007390 	.word	0x08007390
 8001d0c:	20000258 	.word	0x20000258
 8001d10:	080073a4 	.word	0x080073a4
 8001d14:	200000e0 	.word	0x200000e0
 8001d18:	20000218 	.word	0x20000218
 8001d1c:	080073bc 	.word	0x080073bc
 8001d20:	200001d8 	.word	0x200001d8
 8001d24:	080073cc 	.word	0x080073cc
 8001d28:	20000114 	.word	0x20000114
 8001d2c:	20000140 	.word	0x20000140
 8001d30:	40020000 	.word	0x40020000
 8001d34:	080073dc 	.word	0x080073dc
 8001d38:	080073f0 	.word	0x080073f0
 8001d3c:	08007404 	.word	0x08007404
 8001d40:	08007428 	.word	0x08007428
 8001d44:	4479c000 	.word	0x4479c000
 8001d48:	3cf5c28f 	.word	0x3cf5c28f
 8001d4c:	00000000 	.word	0x00000000
 8001d50:	408ccccd 	.word	0x408ccccd
 8001d54:	49742400 	.word	0x49742400
			else
				dT = (float) (0xFFFF - lastT + T + 1) / 1000000.0;
 8001d58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d6e:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8001d54 <main+0x2ac>
 8001d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d76:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
			lastT = T;
 8001d7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

			/* Get last data storage */
			readRoll = L3G4_GetLastX(&L3G4);
 8001d82:	484a      	ldr	r0, [pc, #296]	; (8001eac <main+0x404>)
 8001d84:	f7ff fab0 	bl	80012e8 <L3G4_GetLastX>
 8001d88:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
			readPitch = L3G4_GetLastY(&L3G4);
 8001d8c:	4847      	ldr	r0, [pc, #284]	; (8001eac <main+0x404>)
 8001d8e:	f7ff fb17 	bl	80013c0 <L3G4_GetLastY>
 8001d92:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
			readYaw = L3G4_GetLastZ(&L3G4);
 8001d96:	4845      	ldr	r0, [pc, #276]	; (8001eac <main+0x404>)
 8001d98:	f7ff fb7e 	bl	8001498 <L3G4_GetLastZ>
 8001d9c:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
			inRoll = inRoll * 0.0 + (readRoll * 1);
 8001da0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001da4:	f7fe fbc8 	bl	8000538 <__aeabi_f2d>
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	f7fe fc1a 	bl	80005e8 <__aeabi_dmul>
 8001db4:	4603      	mov	r3, r0
 8001db6:	460c      	mov	r4, r1
 8001db8:	4625      	mov	r5, r4
 8001dba:	461c      	mov	r4, r3
 8001dbc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001dc0:	f7fe fbba 	bl	8000538 <__aeabi_f2d>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4620      	mov	r0, r4
 8001dca:	4629      	mov	r1, r5
 8001dcc:	f7fe fa56 	bl	800027c <__adddf3>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	f7fe fe40 	bl	8000a5c <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			inPitch = inPitch * 0.0 + (readPitch * 1);
 8001de2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001de6:	f7fe fba7 	bl	8000538 <__aeabi_f2d>
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	f7fe fbf9 	bl	80005e8 <__aeabi_dmul>
 8001df6:	4603      	mov	r3, r0
 8001df8:	460c      	mov	r4, r1
 8001dfa:	4625      	mov	r5, r4
 8001dfc:	461c      	mov	r4, r3
 8001dfe:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001e02:	f7fe fb99 	bl	8000538 <__aeabi_f2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f7fe fa35 	bl	800027c <__adddf3>
 8001e12:	4603      	mov	r3, r0
 8001e14:	460c      	mov	r4, r1
 8001e16:	4618      	mov	r0, r3
 8001e18:	4621      	mov	r1, r4
 8001e1a:	f7fe fe1f 	bl	8000a5c <__aeabi_d2f>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			inYaw = inYaw * 0.0 + (readYaw * 1);
 8001e24:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001e28:	f7fe fb86 	bl	8000538 <__aeabi_f2d>
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	f7fe fbd8 	bl	80005e8 <__aeabi_dmul>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	4625      	mov	r5, r4
 8001e3e:	461c      	mov	r4, r3
 8001e40:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001e44:	f7fe fb78 	bl	8000538 <__aeabi_f2d>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f7fe fa14 	bl	800027c <__adddf3>
 8001e54:	4603      	mov	r3, r0
 8001e56:	460c      	mov	r4, r1
 8001e58:	4618      	mov	r0, r3
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	f7fe fdfe 	bl	8000a5c <__aeabi_d2f>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				lastSSFilterTime = HAL_GetTick();
				printf("%d, %d, %d\n", (int16_t) readRoll, (int16_t) readPitch,
						(int16_t) readYaw);
			}
#endif
			setOffset = PPM_GetValue(&ppm, 7);
 8001e66:	2107      	movs	r1, #7
 8001e68:	4811      	ldr	r0, [pc, #68]	; (8001eb0 <main+0x408>)
 8001e6a:	f000 fc4a 	bl	8002702 <PPM_GetValue>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e78:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
			if (setOffset == 0) {
 8001e7c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001e80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d114      	bne.n	8001eb4 <main+0x40c>
				setRoll = setPitch = setYaw = setThr = 0;
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001eaa:	e082      	b.n	8001fb2 <main+0x50a>
 8001eac:	20000114 	.word	0x20000114
 8001eb0:	200000e0 	.word	0x200000e0
			} else {
				setRoll = PPM_GetValue(&ppm, 0) - setOffset;
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	48f3      	ldr	r0, [pc, #972]	; (8002284 <main+0x7dc>)
 8001eb8:	f000 fc23 	bl	8002702 <PPM_GetValue>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ece:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
				setRoll = map(setRoll, -500, 500, -30, 30);
 8001ed2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eda:	231e      	movs	r3, #30
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	f06f 031d 	mvn.w	r3, #29
 8001ee2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ee6:	49e8      	ldr	r1, [pc, #928]	; (8002288 <main+0x7e0>)
 8001ee8:	ee17 0a90 	vmov	r0, s15
 8001eec:	f000 fae6 	bl	80024bc <map>
 8001ef0:	ee07 0a90 	vmov	s15, r0
 8001ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
				setPitch = PPM_GetValue(&ppm, 1) - setOffset;
 8001efc:	2101      	movs	r1, #1
 8001efe:	48e1      	ldr	r0, [pc, #900]	; (8002284 <main+0x7dc>)
 8001f00:	f000 fbff 	bl	8002702 <PPM_GetValue>
 8001f04:	4603      	mov	r3, r0
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f16:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
				setPitch = map(setPitch, -500, 500, -30, 30);
 8001f1a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f22:	231e      	movs	r3, #30
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	f06f 031d 	mvn.w	r3, #29
 8001f2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f2e:	49d6      	ldr	r1, [pc, #856]	; (8002288 <main+0x7e0>)
 8001f30:	ee17 0a90 	vmov	r0, s15
 8001f34:	f000 fac2 	bl	80024bc <map>
 8001f38:	ee07 0a90 	vmov	s15, r0
 8001f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f40:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
				setYaw = PPM_GetValue(&ppm, 3) - setOffset;
 8001f44:	2103      	movs	r1, #3
 8001f46:	48cf      	ldr	r0, [pc, #828]	; (8002284 <main+0x7dc>)
 8001f48:	f000 fbdb 	bl	8002702 <PPM_GetValue>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
				setYaw = map(setYaw, -500, 500, 30, -30);
 8001f62:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6a:	f06f 031d 	mvn.w	r3, #29
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	231e      	movs	r3, #30
 8001f72:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f76:	49c4      	ldr	r1, [pc, #784]	; (8002288 <main+0x7e0>)
 8001f78:	ee17 0a90 	vmov	r0, s15
 8001f7c:	f000 fa9e 	bl	80024bc <map>
 8001f80:	ee07 0a90 	vmov	s15, r0
 8001f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f88:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
				setThr = PPM_GetValue(&ppm, 2) - setOffset + 500;
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	48bd      	ldr	r0, [pc, #756]	; (8002284 <main+0x7dc>)
 8001f90:	f000 fbb7 	bl	8002702 <PPM_GetValue>
 8001f94:	4603      	mov	r3, r0
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa6:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800228c <main+0x7e4>
 8001faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fae:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
				printf("%d, %d, %d, %d\n", (int16_t) setRoll,
						(int16_t) setPitch, (int16_t) setYaw, (int16_t) setThr);
			}
#endif

			outputRoll = PID_Calculate(&pidRoll, inRoll, setRoll, dT);
 8001fb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fb6:	ed97 1a31 	vldr	s2, [r7, #196]	; 0xc4
 8001fba:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 8001fbe:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fb01 	bl	80025ca <PID_Calculate>
 8001fc8:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
			outputPitch = PID_Calculate(&pidPitch, inPitch, setPitch, dT);
 8001fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd0:	ed97 1a31 	vldr	s2, [r7, #196]	; 0xc4
 8001fd4:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 8001fd8:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 faf4 	bl	80025ca <PID_Calculate>
 8001fe2:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
			outputYaw = PID_Calculate(&pidYaw, inYaw, setYaw, dT);
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	ed97 1a31 	vldr	s2, [r7, #196]	; 0xc4
 8001fec:	edd7 0a28 	vldr	s1, [r7, #160]	; 0xa0
 8001ff0:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fae8 	bl	80025ca <PID_Calculate>
 8001ffa:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
				printf("%ld, %ld, %ld\n", (int32_t) outputRoll,
						(int32_t) outputPitch, (int32_t) outputYaw);
			}
#endif

			motorValue1 = setThr + (+outputRoll / 2.0) + (-outputPitch / 2.0)
 8001ffe:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002002:	f7fe fa99 	bl	8000538 <__aeabi_f2d>
 8002006:	4604      	mov	r4, r0
 8002008:	460d      	mov	r5, r1
 800200a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800200e:	f7fe fa93 	bl	8000538 <__aeabi_f2d>
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201a:	f7fe fc0f 	bl	800083c <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f7fe f929 	bl	800027c <__adddf3>
 800202a:	4603      	mov	r3, r0
 800202c:	460c      	mov	r4, r1
 800202e:	4625      	mov	r5, r4
 8002030:	461c      	mov	r4, r3
 8002032:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002036:	eef1 7a67 	vneg.f32	s15, s15
 800203a:	ee17 3a90 	vmov	r3, s15
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa7a 	bl	8000538 <__aeabi_f2d>
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800204c:	f7fe fbf6 	bl	800083c <__aeabi_ddiv>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4620      	mov	r0, r4
 8002056:	4629      	mov	r1, r5
 8002058:	f7fe f910 	bl	800027c <__adddf3>
 800205c:	4603      	mov	r3, r0
 800205e:	460c      	mov	r4, r1
 8002060:	4625      	mov	r5, r4
 8002062:	461c      	mov	r4, r3
					+ (-outputYaw / 2.0);
 8002064:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002068:	eef1 7a67 	vneg.f32	s15, s15
 800206c:	ee17 3a90 	vmov	r3, s15
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa61 	bl	8000538 <__aeabi_f2d>
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800207e:	f7fe fbdd 	bl	800083c <__aeabi_ddiv>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f7fe f8f7 	bl	800027c <__adddf3>
 800208e:	4603      	mov	r3, r0
 8002090:	460c      	mov	r4, r1
			motorValue1 = setThr + (+outputRoll / 2.0) + (-outputPitch / 2.0)
 8002092:	4618      	mov	r0, r3
 8002094:	4621      	mov	r1, r4
 8002096:	f7fe fcb9 	bl	8000a0c <__aeabi_d2iz>
 800209a:	4603      	mov	r3, r0
 800209c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
			motorValue2 = setThr + (-outputRoll / 2.0) + (-outputPitch / 2.0)
 80020a0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80020a4:	f7fe fa48 	bl	8000538 <__aeabi_f2d>
 80020a8:	4604      	mov	r4, r0
 80020aa:	460d      	mov	r5, r1
 80020ac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80020b0:	eef1 7a67 	vneg.f32	s15, s15
 80020b4:	ee17 3a90 	vmov	r3, s15
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa3d 	bl	8000538 <__aeabi_f2d>
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c6:	f7fe fbb9 	bl	800083c <__aeabi_ddiv>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4620      	mov	r0, r4
 80020d0:	4629      	mov	r1, r5
 80020d2:	f7fe f8d3 	bl	800027c <__adddf3>
 80020d6:	4603      	mov	r3, r0
 80020d8:	460c      	mov	r4, r1
 80020da:	4625      	mov	r5, r4
 80020dc:	461c      	mov	r4, r3
 80020de:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80020e2:	eef1 7a67 	vneg.f32	s15, s15
 80020e6:	ee17 3a90 	vmov	r3, s15
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fa24 	bl	8000538 <__aeabi_f2d>
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020f8:	f7fe fba0 	bl	800083c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4620      	mov	r0, r4
 8002102:	4629      	mov	r1, r5
 8002104:	f7fe f8ba 	bl	800027c <__adddf3>
 8002108:	4603      	mov	r3, r0
 800210a:	460c      	mov	r4, r1
 800210c:	4625      	mov	r5, r4
 800210e:	461c      	mov	r4, r3
					+ (+outputYaw / 2.0);
 8002110:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002112:	f7fe fa11 	bl	8000538 <__aeabi_f2d>
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800211e:	f7fe fb8d 	bl	800083c <__aeabi_ddiv>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe f8a7 	bl	800027c <__adddf3>
 800212e:	4603      	mov	r3, r0
 8002130:	460c      	mov	r4, r1
			motorValue2 = setThr + (-outputRoll / 2.0) + (-outputPitch / 2.0)
 8002132:	4618      	mov	r0, r3
 8002134:	4621      	mov	r1, r4
 8002136:	f7fe fc69 	bl	8000a0c <__aeabi_d2iz>
 800213a:	4603      	mov	r3, r0
 800213c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
			motorValue3 = setThr + (-outputRoll / 2.0) + (+outputPitch / 2.0)
 8002140:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002144:	f7fe f9f8 	bl	8000538 <__aeabi_f2d>
 8002148:	4604      	mov	r4, r0
 800214a:	460d      	mov	r5, r1
 800214c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002150:	eef1 7a67 	vneg.f32	s15, s15
 8002154:	ee17 3a90 	vmov	r3, s15
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f9ed 	bl	8000538 <__aeabi_f2d>
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002166:	f7fe fb69 	bl	800083c <__aeabi_ddiv>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f7fe f883 	bl	800027c <__adddf3>
 8002176:	4603      	mov	r3, r0
 8002178:	460c      	mov	r4, r1
 800217a:	4625      	mov	r5, r4
 800217c:	461c      	mov	r4, r3
 800217e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002182:	f7fe f9d9 	bl	8000538 <__aeabi_f2d>
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800218e:	f7fe fb55 	bl	800083c <__aeabi_ddiv>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4620      	mov	r0, r4
 8002198:	4629      	mov	r1, r5
 800219a:	f7fe f86f 	bl	800027c <__adddf3>
 800219e:	4603      	mov	r3, r0
 80021a0:	460c      	mov	r4, r1
 80021a2:	4625      	mov	r5, r4
 80021a4:	461c      	mov	r4, r3
					+ (-outputYaw / 2.0);
 80021a6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80021aa:	eef1 7a67 	vneg.f32	s15, s15
 80021ae:	ee17 3a90 	vmov	r3, s15
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9c0 	bl	8000538 <__aeabi_f2d>
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021c0:	f7fe fb3c 	bl	800083c <__aeabi_ddiv>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4620      	mov	r0, r4
 80021ca:	4629      	mov	r1, r5
 80021cc:	f7fe f856 	bl	800027c <__adddf3>
 80021d0:	4603      	mov	r3, r0
 80021d2:	460c      	mov	r4, r1
			motorValue3 = setThr + (-outputRoll / 2.0) + (+outputPitch / 2.0)
 80021d4:	4618      	mov	r0, r3
 80021d6:	4621      	mov	r1, r4
 80021d8:	f7fe fc18 	bl	8000a0c <__aeabi_d2iz>
 80021dc:	4603      	mov	r3, r0
 80021de:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			motorValue4 = setThr + (+outputRoll / 2.0) + (+outputPitch / 2.0)
 80021e2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80021e6:	f7fe f9a7 	bl	8000538 <__aeabi_f2d>
 80021ea:	4604      	mov	r4, r0
 80021ec:	460d      	mov	r5, r1
 80021ee:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80021f2:	f7fe f9a1 	bl	8000538 <__aeabi_f2d>
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021fe:	f7fe fb1d 	bl	800083c <__aeabi_ddiv>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4620      	mov	r0, r4
 8002208:	4629      	mov	r1, r5
 800220a:	f7fe f837 	bl	800027c <__adddf3>
 800220e:	4603      	mov	r3, r0
 8002210:	460c      	mov	r4, r1
 8002212:	4625      	mov	r5, r4
 8002214:	461c      	mov	r4, r3
 8002216:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800221a:	f7fe f98d 	bl	8000538 <__aeabi_f2d>
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002226:	f7fe fb09 	bl	800083c <__aeabi_ddiv>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4620      	mov	r0, r4
 8002230:	4629      	mov	r1, r5
 8002232:	f7fe f823 	bl	800027c <__adddf3>
 8002236:	4603      	mov	r3, r0
 8002238:	460c      	mov	r4, r1
 800223a:	4625      	mov	r5, r4
 800223c:	461c      	mov	r4, r3
					+ (+outputYaw / 2.0);
 800223e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002240:	f7fe f97a 	bl	8000538 <__aeabi_f2d>
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800224c:	f7fe faf6 	bl	800083c <__aeabi_ddiv>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4620      	mov	r0, r4
 8002256:	4629      	mov	r1, r5
 8002258:	f7fe f810 	bl	800027c <__adddf3>
 800225c:	4603      	mov	r3, r0
 800225e:	460c      	mov	r4, r1
			motorValue4 = setThr + (+outputRoll / 2.0) + (+outputPitch / 2.0)
 8002260:	4618      	mov	r0, r3
 8002262:	4621      	mov	r1, r4
 8002264:	f7fe fbd2 	bl	8000a0c <__aeabi_d2iz>
 8002268:	4603      	mov	r3, r0
 800226a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8

			/* Limit motor value */
			if (setThr < 200) {
 800226e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002272:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002290 <main+0x7e8>
 8002276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	d518      	bpl.n	80022b2 <main+0x80a>
 8002280:	e008      	b.n	8002294 <main+0x7ec>
 8002282:	bf00      	nop
 8002284:	200000e0 	.word	0x200000e0
 8002288:	fffffe0c 	.word	0xfffffe0c
 800228c:	43fa0000 	.word	0x43fa0000
 8002290:	43480000 	.word	0x43480000
				motorValue1 = motorValue2 = motorValue3 = motorValue4 = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800229a:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800229e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80022a2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80022a6:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80022aa:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80022ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
			}

			if (motorValue1 > 999) {
 80022b2:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 80022b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ba:	db0a      	blt.n	80022d2 <main+0x82a>
				HAL_GPIO_WritePin(LED_USR_GPIO_Port, LED_USR_Pin, GPIO_PIN_SET);
 80022bc:	2201      	movs	r2, #1
 80022be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022c2:	4834      	ldr	r0, [pc, #208]	; (8002394 <main+0x8ec>)
 80022c4:	f001 fc50 	bl	8003b68 <HAL_GPIO_WritePin>
				motorValue1 = 999;
 80022c8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80022cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80022d0:	e006      	b.n	80022e0 <main+0x838>
			} else if (motorValue1 < 200) {
 80022d2:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 80022d6:	2bc7      	cmp	r3, #199	; 0xc7
 80022d8:	dc02      	bgt.n	80022e0 <main+0x838>
				motorValue1 = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
			}

			if (motorValue2 > 999) {
 80022e0:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 80022e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022e8:	db0a      	blt.n	8002300 <main+0x858>
				HAL_GPIO_WritePin(LED_USR_GPIO_Port, LED_USR_Pin, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022f0:	4828      	ldr	r0, [pc, #160]	; (8002394 <main+0x8ec>)
 80022f2:	f001 fc39 	bl	8003b68 <HAL_GPIO_WritePin>
				motorValue2 = 999;
 80022f6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80022fa:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80022fe:	e006      	b.n	800230e <main+0x866>
			} else if (motorValue2 < 200) {
 8002300:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8002304:	2bc7      	cmp	r3, #199	; 0xc7
 8002306:	dc02      	bgt.n	800230e <main+0x866>
				motorValue2 = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
			}

			if (motorValue3 > 999) {
 800230e:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	; 0xba
 8002312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002316:	db0a      	blt.n	800232e <main+0x886>
				HAL_GPIO_WritePin(LED_USR_GPIO_Port, LED_USR_Pin, GPIO_PIN_SET);
 8002318:	2201      	movs	r2, #1
 800231a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800231e:	481d      	ldr	r0, [pc, #116]	; (8002394 <main+0x8ec>)
 8002320:	f001 fc22 	bl	8003b68 <HAL_GPIO_WritePin>
				motorValue3 = 999;
 8002324:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002328:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800232c:	e006      	b.n	800233c <main+0x894>
			} else if (motorValue3 < 200) {
 800232e:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	; 0xba
 8002332:	2bc7      	cmp	r3, #199	; 0xc7
 8002334:	dc02      	bgt.n	800233c <main+0x894>
				motorValue3 = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			}

			if (motorValue4 > 999) {
 800233c:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 8002340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002344:	db0a      	blt.n	800235c <main+0x8b4>
				HAL_GPIO_WritePin(LED_USR_GPIO_Port, LED_USR_Pin, GPIO_PIN_SET);
 8002346:	2201      	movs	r2, #1
 8002348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800234c:	4811      	ldr	r0, [pc, #68]	; (8002394 <main+0x8ec>)
 800234e:	f001 fc0b 	bl	8003b68 <HAL_GPIO_WritePin>
				motorValue4 = 999;
 8002352:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002356:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800235a:	e006      	b.n	800236a <main+0x8c2>
			} else if (motorValue4 < 200) {
 800235c:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 8002360:	2bc7      	cmp	r3, #199	; 0xc7
 8002362:	dc02      	bgt.n	800236a <main+0x8c2>
				motorValue4 = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
			}

			SET_MOTOR_1(motorValue1);
 800236a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <main+0x8f0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	635a      	str	r2, [r3, #52]	; 0x34
			SET_MOTOR_2(motorValue2);
 8002374:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <main+0x8f0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	639a      	str	r2, [r3, #56]	; 0x38
			SET_MOTOR_3(motorValue3);
 800237e:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <main+0x8f0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c
			SET_MOTOR_4(motorValue4);
 8002388:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 800238c:	4b02      	ldr	r3, [pc, #8]	; (8002398 <main+0x8f0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
		if (L3G4_OK == L3G4_CheckDataAvailable(&L3G4)) {
 8002392:	e490      	b.n	8001cb6 <main+0x20e>
 8002394:	40020400 	.word	0x40020400
 8002398:	200001d8 	.word	0x200001d8

0800239c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b094      	sub	sp, #80	; 0x50
 80023a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80023a2:	f107 0320 	add.w	r3, r7, #32
 80023a6:	2230      	movs	r2, #48	; 0x30
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 f88a 	bl	80064c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	4b28      	ldr	r3, [pc, #160]	; (8002468 <SystemClock_Config+0xcc>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <SystemClock_Config+0xcc>)
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6413      	str	r3, [r2, #64]	; 0x40
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <SystemClock_Config+0xcc>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023dc:	2300      	movs	r3, #0
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <SystemClock_Config+0xd0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a21      	ldr	r2, [pc, #132]	; (800246c <SystemClock_Config+0xd0>)
 80023e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b1f      	ldr	r3, [pc, #124]	; (800246c <SystemClock_Config+0xd0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023f8:	2302      	movs	r3, #2
 80023fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023fc:	2301      	movs	r3, #1
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002400:	2310      	movs	r3, #16
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002404:	2302      	movs	r3, #2
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002408:	2300      	movs	r3, #0
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800240c:	2308      	movs	r3, #8
 800240e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002410:	23a8      	movs	r3, #168	; 0xa8
 8002412:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002414:	2302      	movs	r3, #2
 8002416:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002418:	2304      	movs	r3, #4
 800241a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800241c:	f107 0320 	add.w	r3, r7, #32
 8002420:	4618      	mov	r0, r3
 8002422:	f001 fbed 	bl	8003c00 <HAL_RCC_OscConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <SystemClock_Config+0x94>
		Error_Handler();
 800242c:	f000 f884 	bl	8002538 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002430:	230f      	movs	r3, #15
 8002432:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002434:	2302      	movs	r3, #2
 8002436:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800243c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002440:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002446:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	2105      	movs	r1, #5
 800244e:	4618      	mov	r0, r3
 8002450:	f001 fe46 	bl	80040e0 <HAL_RCC_ClockConfig>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <SystemClock_Config+0xc2>
		Error_Handler();
 800245a:	f000 f86d 	bl	8002538 <Error_Handler>
	}
}
 800245e:	bf00      	nop
 8002460:	3750      	adds	r7, #80	; 0x50
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40007000 	.word	0x40007000

08002470 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DRDY_Pin) {
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d104      	bne.n	800248a <HAL_GPIO_EXTI_Callback+0x1a>
		L3G4_InterruptCallback(&L3G4, GPIO_Pin);
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	4619      	mov	r1, r3
 8002484:	4803      	ldr	r0, [pc, #12]	; (8002494 <HAL_GPIO_EXTI_Callback+0x24>)
 8002486:	f7ff f9f8 	bl	800187a <L3G4_InterruptCallback>
	}
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000114 	.word	0x20000114

08002498 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7f1b      	ldrb	r3, [r3, #28]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d102      	bne.n	80024ae <HAL_TIM_IC_CaptureCallback+0x16>
		PPM_InterruptCallback(&ppm);
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x20>)
 80024aa:	f000 f93b 	bl	8002724 <PPM_InterruptCallback>
	}
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200000e0 	.word	0x200000e0

080024bc <map>:

int32_t map(int32_t value, int32_t input_min, int32_t input_max,
		int32_t output_min, int32_t output_max) {
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
	int32_t v1 = (value - input_min) * 1000 / (input_max - input_min);
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024d4:	fb02 f203 	mul.w	r2, r2, r3
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1acb      	subs	r3, r1, r3
 80024de:	fb92 f3f3 	sdiv	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
	int32_t v2 = v1 * (output_max - output_min) / 1000;
 80024e4:	6a3a      	ldr	r2, [r7, #32]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <map+0x54>)
 80024f2:	fb82 1203 	smull	r1, r2, r2, r3
 80024f6:	1192      	asrs	r2, r2, #6
 80024f8:	17db      	asrs	r3, r3, #31
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	613b      	str	r3, [r7, #16]
	return v2 + output_min;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4413      	add	r3, r2
}
 8002504:	4618      	mov	r0, r3
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	10624dd3 	.word	0x10624dd3

08002514 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d101      	bne.n	800252a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002526:	f000 fdff 	bl	8003128 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40002000 	.word	0x40002000

08002538 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		HAL_GPIO_TogglePin(LED_DBG_GPIO_Port, LED_DBG_Pin);
 800253c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002540:	4803      	ldr	r0, [pc, #12]	; (8002550 <Error_Handler+0x18>)
 8002542:	f001 fb2a 	bl	8003b9a <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8002546:	20c8      	movs	r0, #200	; 0xc8
 8002548:	f000 fe0e 	bl	8003168 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_DBG_GPIO_Port, LED_DBG_Pin);
 800254c:	e7f6      	b.n	800253c <Error_Handler+0x4>
 800254e:	bf00      	nop
 8002550:	40020400 	.word	0x40020400

08002554 <PID_Setup>:
 */
#include <stdio.h>
#include <stdint.h>
#include "pid.h"

void PID_Setup(pidHelper_t *pid, float p, float i, float d, float max) {
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6178      	str	r0, [r7, #20]
 800255c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002560:	edc7 0a03 	vstr	s1, [r7, #12]
 8002564:	ed87 1a02 	vstr	s2, [r7, #8]
 8002568:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->pGain = p;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	601a      	str	r2, [r3, #0]
	pid->iGain = i;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
	pid->dGain = d;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	609a      	str	r2, [r3, #8]
	pid->maxOutput = max;
 800257e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002586:	ee17 2a90 	vmov	r2, s15
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	60da      	str	r2, [r3, #12]
	pid->pMem = 0;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
	pid->iMem = 0;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	615a      	str	r2, [r3, #20]
	pid->dMem = 0;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
	pid->preError = 0;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
	pid->prePreError = 0;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	621a      	str	r2, [r3, #32]
	pid->preOutput = 0;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <PID_Calculate>:

float PID_Calculate(pidHelper_t *pid, float input, float setpoint, float dT) {
 80025ca:	b480      	push	{r7}
 80025cc:	b087      	sub	sp, #28
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80025d6:	edc7 0a01 	vstr	s1, [r7, #4]
 80025da:	ed87 1a00 	vstr	s2, [r7]
	float error = input - setpoint;
 80025de:	ed97 7a02 	vldr	s14, [r7, #8]
 80025e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ea:	edc7 7a05 	vstr	s15, [r7, #20]
	float out;
#if 1
	//P
	pid->pMem = pid->pGain * error;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	ed93 7a00 	vldr	s14, [r3]
 80025f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	edc3 7a04 	vstr	s15, [r3, #16]
	//I
	pid->iMem = pid->iMem + pid->iGain * error * dT;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	ed93 7a05 	vldr	s14, [r3, #20]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	edd3 6a01 	vldr	s13, [r3, #4]
 800260e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002612:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002616:	edd7 7a00 	vldr	s15, [r7]
 800261a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	edc3 7a05 	vstr	s15, [r3, #20]
	//D
	pid->dMem = pid->dGain * (error - pid->preError) / dT;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	ed93 7a02 	vldr	s14, [r3, #8]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	edd3 7a07 	vldr	s15, [r3, #28]
 8002634:	edd7 6a05 	vldr	s13, [r7, #20]
 8002638:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800263c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002640:	ed97 7a00 	vldr	s14, [r7]
 8002644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	edc3 7a06 	vstr	s15, [r3, #24]

	out = pid->preOutput + pid->pMem + pid->iMem + pid->dMem;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	edd3 7a04 	vldr	s15, [r3, #16]
 800265a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	edd3 7a05 	vldr	s15, [r3, #20]
 8002664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	edd3 7a06 	vldr	s15, [r3, #24]
 800266e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002672:	edc7 7a04 	vstr	s15, [r7, #16]
	pid->preError = error;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	61da      	str	r2, [r3, #28]
	out = pid->preOutput + pid->pMem + pid->iMem + pid->dMem;
	pid->prePreError = pid->preError;
	pid->preError = error;
	pid->preOutput = out;
#endif
	return out;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	ee07 3a90 	vmov	s15, r3

}
 8002682:	eeb0 0a67 	vmov.f32	s0, s15
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <PPM_Init>:
#include <string.h>
#include "ppm.h"

#define PPM_BLANK_TIME 2100

void PPM_Init(ppm_t *ppm, uint32_t maxChannel) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	memset(ppm, 0, sizeof(*ppm));
 800269a:	2234      	movs	r2, #52	; 0x34
 800269c:	2100      	movs	r1, #0
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f003 ff10 	bl	80064c4 <memset>
	ppm->maxChannel = maxChannel;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
	ppm->ic2LastValue = 0;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
	ppm->channel = 0;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <PPM_InstallDriver>:

void PPM_InstallDriver(ppm_t *ppm, TIM_HandleTypeDef *tim, uint32_t timChannel) {
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
	ppm->tim = tim;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	601a      	str	r2, [r3, #0]
	ppm->timChannel = timChannel;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	605a      	str	r2, [r3, #4]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <PPM_Start>:

void PPM_Start(ppm_t *ppm) {
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Start_IT(ppm->tim, ppm->timChannel);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f002 faab 	bl	8004c50 <HAL_TIM_IC_Start_IT>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <PPM_GetValue>:

uint16_t PPM_GetValue(ppm_t *ppm, uint32_t channel) {
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
	return (uint16_t) ppm->values[channel];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	3204      	adds	r2, #4
 8002712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002716:	b29b      	uxth	r3, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <PPM_InterruptCallback>:

void PPM_InterruptCallback(ppm_t *ppm) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	uint32_t ic2Value;
	uint32_t ic2DiffValue;
	ic2Value = HAL_TIM_ReadCapturedValue(ppm->tim, ppm->timChannel);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f002 fd5c 	bl	80051f4 <HAL_TIM_ReadCapturedValue>
 800273c:	60b8      	str	r0, [r7, #8]
	if (ic2Value > ppm->ic2LastValue) {
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	d905      	bls.n	8002754 <PPM_InterruptCallback+0x30>
		ic2DiffValue = ic2Value - ppm->ic2LastValue;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	e00b      	b.n	800276c <PPM_InterruptCallback+0x48>
	} else if (ic2Value < ppm->ic2LastValue) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	d206      	bcs.n	800276c <PPM_InterruptCallback+0x48>
		ic2DiffValue = 0xFFFF - ppm->ic2LastValue + ic2Value + 1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800276a:	60fb      	str	r3, [r7, #12]
	}
	ppm->ic2LastValue = ic2Value;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	609a      	str	r2, [r3, #8]

	if (ic2DiffValue > PPM_BLANK_TIME) {
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f640 0234 	movw	r2, #2100	; 0x834
 8002778:	4293      	cmp	r3, r2
 800277a:	d903      	bls.n	8002784 <PPM_InterruptCallback+0x60>
		ppm->channel = 0;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
			ppm->values[ppm->channel] = ic2DiffValue;
		}
		ppm->channel++;
	}

}
 8002782:	e011      	b.n	80027a8 <PPM_InterruptCallback+0x84>
		if (ppm->channel < ppm->maxChannel) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	429a      	cmp	r2, r3
 800278e:	d206      	bcs.n	800279e <PPM_InterruptCallback+0x7a>
			ppm->values[ppm->channel] = ic2DiffValue;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3204      	adds	r2, #4
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		ppm->channel++;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	60da      	str	r2, [r3, #12]
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <MX_SPI3_Init+0x64>)
 80027b6:	4a18      	ldr	r2, [pc, #96]	; (8002818 <MX_SPI3_Init+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <MX_SPI3_Init+0x64>)
 80027bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <MX_SPI3_Init+0x64>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <MX_SPI3_Init+0x64>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <MX_SPI3_Init+0x64>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <MX_SPI3_Init+0x64>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <MX_SPI3_Init+0x64>)
 80027dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <MX_SPI3_Init+0x64>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <MX_SPI3_Init+0x64>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <MX_SPI3_Init+0x64>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <MX_SPI3_Init+0x64>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <MX_SPI3_Init+0x64>)
 80027fc:	220a      	movs	r2, #10
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002800:	4804      	ldr	r0, [pc, #16]	; (8002814 <MX_SPI3_Init+0x64>)
 8002802:	f001 fe6b 	bl	80044dc <HAL_SPI_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800280c:	f7ff fe94 	bl	8002538 <Error_Handler>
  }

}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000140 	.word	0x20000140
 8002818:	40003c00 	.word	0x40003c00

0800281c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_SPI_MspInit+0x84>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d12c      	bne.n	8002898 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_SPI_MspInit+0x88>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <HAL_SPI_MspInit+0x88>)
 8002848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_SPI_MspInit+0x88>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_SPI_MspInit+0x88>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <HAL_SPI_MspInit+0x88>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_SPI_MspInit+0x88>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = SCK3_Pin|MISO3_Pin|MOSI3_Pin;
 8002876:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800287a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002888:	2306      	movs	r3, #6
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	4805      	ldr	r0, [pc, #20]	; (80028a8 <HAL_SPI_MspInit+0x8c>)
 8002894:	f000 ffce 	bl	8003834 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	; 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40003c00 	.word	0x40003c00
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40020800 	.word	0x40020800

080028ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_MspInit+0x4c>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <HAL_MspInit+0x4c>)
 80028bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <HAL_MspInit+0x4c>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_MspInit+0x4c>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <HAL_MspInit+0x4c>)
 80028d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_MspInit+0x4c>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800

080028fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08c      	sub	sp, #48	; 0x30
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 800290c:	2200      	movs	r2, #0
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	202d      	movs	r0, #45	; 0x2d
 8002912:	f000 ff65 	bl	80037e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8002916:	202d      	movs	r0, #45	; 0x2d
 8002918:	f000 ff7e 	bl	8003818 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <HAL_InitTick+0xa4>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	4a1e      	ldr	r2, [pc, #120]	; (80029a0 <HAL_InitTick+0xa4>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6413      	str	r3, [r2, #64]	; 0x40
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <HAL_InitTick+0xa4>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002938:	f107 0210 	add.w	r2, r7, #16
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f001 fd98 	bl	8004478 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002948:	f001 fd6e 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 800294c:	4603      	mov	r3, r0
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <HAL_InitTick+0xa8>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0c9b      	lsrs	r3, r3, #18
 800295c:	3b01      	subs	r3, #1
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_InitTick+0xac>)
 8002962:	4a12      	ldr	r2, [pc, #72]	; (80029ac <HAL_InitTick+0xb0>)
 8002964:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_InitTick+0xac>)
 8002968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800296c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800296e:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <HAL_InitTick+0xac>)
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_InitTick+0xac>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_InitTick+0xac>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8002980:	4809      	ldr	r0, [pc, #36]	; (80029a8 <HAL_InitTick+0xac>)
 8002982:	f002 f85d 	bl	8004a40 <HAL_TIM_Base_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800298c:	4806      	ldr	r0, [pc, #24]	; (80029a8 <HAL_InitTick+0xac>)
 800298e:	f002 f8a6 	bl	8004ade <HAL_TIM_Base_Start_IT>
 8002992:	4603      	mov	r3, r0
 8002994:	e000      	b.n	8002998 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
}
 8002998:	4618      	mov	r0, r3
 800299a:	3730      	adds	r7, #48	; 0x30
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40023800 	.word	0x40023800
 80029a4:	431bde83 	.word	0x431bde83
 80029a8:	20000198 	.word	0x20000198
 80029ac:	40002000 	.word	0x40002000

080029b0 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 80029c4:	2201      	movs	r2, #1
 80029c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029ca:	4808      	ldr	r0, [pc, #32]	; (80029ec <HardFault_Handler+0x2c>)
 80029cc:	f001 f8cc 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80029d0:	2032      	movs	r0, #50	; 0x32
 80029d2:	f000 fbc9 	bl	8003168 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_RESET);
 80029d6:	2200      	movs	r2, #0
 80029d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029dc:	4803      	ldr	r0, [pc, #12]	; (80029ec <HardFault_Handler+0x2c>)
 80029de:	f001 f8c3 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 80029e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029e6:	f000 fbbf 	bl	8003168 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 80029ea:	e7eb      	b.n	80029c4 <HardFault_Handler+0x4>
 80029ec:	40020400 	.word	0x40020400

080029f0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
		/* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 80029f4:	2201      	movs	r2, #1
 80029f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029fa:	4808      	ldr	r0, [pc, #32]	; (8002a1c <MemManage_Handler+0x2c>)
 80029fc:	f001 f8b4 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002a00:	2032      	movs	r0, #50	; 0x32
 8002a02:	f000 fbb1 	bl	8003168 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_RESET);
 8002a06:	2200      	movs	r2, #0
 8002a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a0c:	4803      	ldr	r0, [pc, #12]	; (8002a1c <MemManage_Handler+0x2c>)
 8002a0e:	f001 f8ab 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002a12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a16:	f000 fba7 	bl	8003168 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 8002a1a:	e7eb      	b.n	80029f4 <MemManage_Handler+0x4>
 8002a1c:	40020400 	.word	0x40020400

08002a20 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
		/* USER CODE BEGIN W1_BusFault_IRQn 0 */
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 8002a24:	2201      	movs	r2, #1
 8002a26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a2a:	4808      	ldr	r0, [pc, #32]	; (8002a4c <BusFault_Handler+0x2c>)
 8002a2c:	f001 f89c 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002a30:	2032      	movs	r0, #50	; 0x32
 8002a32:	f000 fb99 	bl	8003168 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_RESET);
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a3c:	4803      	ldr	r0, [pc, #12]	; (8002a4c <BusFault_Handler+0x2c>)
 8002a3e:	f001 f893 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002a42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a46:	f000 fb8f 	bl	8003168 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 8002a4a:	e7eb      	b.n	8002a24 <BusFault_Handler+0x4>
 8002a4c:	40020400 	.word	0x40020400

08002a50 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
		/* USER CODE BEGIN W1_UsageFault_IRQn 0 */
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a5a:	4808      	ldr	r0, [pc, #32]	; (8002a7c <UsageFault_Handler+0x2c>)
 8002a5c:	f001 f884 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002a60:	2032      	movs	r0, #50	; 0x32
 8002a62:	f000 fb81 	bl	8003168 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_RESET);
 8002a66:	2200      	movs	r2, #0
 8002a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a6c:	4803      	ldr	r0, [pc, #12]	; (8002a7c <UsageFault_Handler+0x2c>)
 8002a6e:	f001 f87b 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002a72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a76:	f000 fb77 	bl	8003168 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 8002a7a:	e7eb      	b.n	8002a54 <UsageFault_Handler+0x4>
 8002a7c:	40020400 	.word	0x40020400

08002a80 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <EXTI9_5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002aae:	2040      	movs	r0, #64	; 0x40
 8002ab0:	f001 f88e 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002ab4:	2080      	movs	r0, #128	; 0x80
 8002ab6:	f001 f88b 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8002ac4:	4802      	ldr	r0, [pc, #8]	; (8002ad0 <TIM2_IRQHandler+0x10>)
 8002ac6:	f002 f92b 	bl	8004d20 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000218 	.word	0x20000218

08002ad4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
 * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
 */
void TIM8_TRG_COM_TIM14_IRQHandler(void) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

	/* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
	HAL_TIM_IRQHandler(&htim14);
 8002ad8:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002ada:	f002 f921 	bl	8004d20 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

	/* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000198 	.word	0x20000198

08002ae8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	e00a      	b.n	8002b10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002afa:	f3af 8000 	nop.w
 8002afe:	4601      	mov	r1, r0
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	60ba      	str	r2, [r7, #8]
 8002b06:	b2ca      	uxtb	r2, r1
 8002b08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	dbf0      	blt.n	8002afa <_read+0x12>
	}

return len;
 8002b18:	687b      	ldr	r3, [r7, #4]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
	return -1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b4a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <_isatty>:

int _isatty(int file)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
	return 1;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <_sbrk+0x50>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk+0x16>
		heap_end = &end;
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <_sbrk+0x50>)
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <_sbrk+0x54>)
 8002ba0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <_sbrk+0x50>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <_sbrk+0x50>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	466a      	mov	r2, sp
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d907      	bls.n	8002bc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bb6:	f003 fc5b 	bl	8006470 <__errno>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc4:	e006      	b.n	8002bd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <_sbrk+0x50>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <_sbrk+0x50>)
 8002bd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	2000008c 	.word	0x2000008c
 8002be0:	200002e0 	.word	0x200002e0

08002be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <SystemInit+0x28>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <SystemInit+0x28>)
 8002bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <SystemInit+0x28>)
 8002bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bfe:	609a      	str	r2, [r3, #8]
#endif
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c16:	f107 0310 	add.w	r3, r7, #16
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c20:	463b      	mov	r3, r7
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <MX_TIM2_Init+0xa0>)
 8002c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <MX_TIM2_Init+0xa0>)
 8002c36:	2253      	movs	r2, #83	; 0x53
 8002c38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <MX_TIM2_Init+0xa0>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <MX_TIM2_Init+0xa0>)
 8002c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <MX_TIM2_Init+0xa0>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <MX_TIM2_Init+0xa0>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002c54:	4816      	ldr	r0, [pc, #88]	; (8002cb0 <MX_TIM2_Init+0xa0>)
 8002c56:	f001 ffcf 	bl	8004bf8 <HAL_TIM_IC_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c60:	f7ff fc6a 	bl	8002538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	4619      	mov	r1, r3
 8002c72:	480f      	ldr	r0, [pc, #60]	; (8002cb0 <MX_TIM2_Init+0xa0>)
 8002c74:	f002 fec0 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002c7e:	f7ff fc5b 	bl	8002538 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c82:	2300      	movs	r3, #0
 8002c84:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c86:	2301      	movs	r3, #1
 8002c88:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c92:	463b      	mov	r3, r7
 8002c94:	2200      	movs	r2, #0
 8002c96:	4619      	mov	r1, r3
 8002c98:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <MX_TIM2_Init+0xa0>)
 8002c9a:	f002 f949 	bl	8004f30 <HAL_TIM_IC_ConfigChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002ca4:	f7ff fc48 	bl	8002538 <Error_Handler>
  }

}
 8002ca8:	bf00      	nop
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000218 	.word	0x20000218

08002cb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cba:	f107 0320 	add.w	r3, r7, #32
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
 8002cd0:	611a      	str	r2, [r3, #16]
 8002cd2:	615a      	str	r2, [r3, #20]
 8002cd4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002cd6:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002cd8:	4a32      	ldr	r2, [pc, #200]	; (8002da4 <MX_TIM3_Init+0xf0>)
 8002cda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21;
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002cde:	2215      	movs	r2, #21
 8002ce0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002ce8:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf6:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cfc:	4828      	ldr	r0, [pc, #160]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002cfe:	f001 ff12 	bl	8004b26 <HAL_TIM_PWM_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002d08:	f7ff fc16 	bl	8002538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d14:	f107 0320 	add.w	r3, r7, #32
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4821      	ldr	r0, [pc, #132]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002d1c:	f002 fe6c 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002d26:	f7ff fc07 	bl	8002538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d2a:	2360      	movs	r3, #96	; 0x60
 8002d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4817      	ldr	r0, [pc, #92]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002d42:	f002 f991 	bl	8005068 <HAL_TIM_PWM_ConfigChannel>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002d4c:	f7ff fbf4 	bl	8002538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	2204      	movs	r2, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4812      	ldr	r0, [pc, #72]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002d58:	f002 f986 	bl	8005068 <HAL_TIM_PWM_ConfigChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d62:	f7ff fbe9 	bl	8002538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	2208      	movs	r2, #8
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	480c      	ldr	r0, [pc, #48]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002d6e:	f002 f97b 	bl	8005068 <HAL_TIM_PWM_ConfigChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002d78:	f7ff fbde 	bl	8002538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	220c      	movs	r2, #12
 8002d80:	4619      	mov	r1, r3
 8002d82:	4807      	ldr	r0, [pc, #28]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002d84:	f002 f970 	bl	8005068 <HAL_TIM_PWM_ConfigChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002d8e:	f7ff fbd3 	bl	8002538 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002d92:	4803      	ldr	r0, [pc, #12]	; (8002da0 <MX_TIM3_Init+0xec>)
 8002d94:	f000 f8d0 	bl	8002f38 <HAL_TIM_MspPostInit>

}
 8002d98:	bf00      	nop
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200001d8 	.word	0x200001d8
 8002da4:	40000400 	.word	0x40000400

08002da8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dae:	463b      	mov	r3, r7
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <MX_TIM7_Init+0x64>)
 8002db8:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <MX_TIM7_Init+0x68>)
 8002dba:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <MX_TIM7_Init+0x64>)
 8002dbe:	2253      	movs	r2, #83	; 0x53
 8002dc0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <MX_TIM7_Init+0x64>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <MX_TIM7_Init+0x64>)
 8002dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <MX_TIM7_Init+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002dd6:	480d      	ldr	r0, [pc, #52]	; (8002e0c <MX_TIM7_Init+0x64>)
 8002dd8:	f001 fe32 	bl	8004a40 <HAL_TIM_Base_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002de2:	f7ff fba9 	bl	8002538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002dee:	463b      	mov	r3, r7
 8002df0:	4619      	mov	r1, r3
 8002df2:	4806      	ldr	r0, [pc, #24]	; (8002e0c <MX_TIM7_Init+0x64>)
 8002df4:	f002 fe00 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002dfe:	f7ff fb9b 	bl	8002538 <Error_Handler>
  }

}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000258 	.word	0x20000258
 8002e10:	40001400 	.word	0x40001400

08002e14 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e34:	d133      	bne.n	8002e9e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_TIM_IC_MspInit+0x94>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_TIM_IC_MspInit+0x94>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_TIM_IC_MspInit+0x94>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_TIM_IC_MspInit+0x94>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <HAL_TIM_IC_MspInit+0x94>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_TIM_IC_MspInit+0x94>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PPM_Pin;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PPM_GPIO_Port, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	4808      	ldr	r0, [pc, #32]	; (8002eac <HAL_TIM_IC_MspInit+0x98>)
 8002e8a:	f000 fcd3 	bl	8003834 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2100      	movs	r1, #0
 8002e92:	201c      	movs	r0, #28
 8002e94:	f000 fca4 	bl	80037e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e98:	201c      	movs	r0, #28
 8002e9a:	f000 fcbd 	bl	8003818 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	3728      	adds	r7, #40	; 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020000 	.word	0x40020000

08002eb0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0b      	ldr	r2, [pc, #44]	; (8002eec <HAL_TIM_PWM_MspInit+0x3c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10d      	bne.n	8002ede <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_TIM_PWM_MspInit+0x40>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_TIM_PWM_MspInit+0x40>)
 8002ecc:	f043 0302 	orr.w	r3, r3, #2
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <HAL_TIM_PWM_MspInit+0x40>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40023800 	.word	0x40023800

08002ef4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <HAL_TIM_Base_MspInit+0x3c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10d      	bne.n	8002f22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_TIM_Base_MspInit+0x40>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <HAL_TIM_Base_MspInit+0x40>)
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_TIM_Base_MspInit+0x40>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40001400 	.word	0x40001400
 8002f34:	40023800 	.word	0x40023800

08002f38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 030c 	add.w	r3, r7, #12
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <HAL_TIM_MspPostInit+0x68>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d11d      	bne.n	8002f96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_TIM_MspPostInit+0x6c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <HAL_TIM_MspPostInit+0x6c>)
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_TIM_MspPostInit+0x6c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = M3_Pin|M4_Pin|M1_Pin|M2_Pin;
 8002f76:	2333      	movs	r3, #51	; 0x33
 8002f78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f86:	2302      	movs	r3, #2
 8002f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8a:	f107 030c 	add.w	r3, r7, #12
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <HAL_TIM_MspPostInit+0x70>)
 8002f92:	f000 fc4f 	bl	8003834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f96:	bf00      	nop
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020400 	.word	0x40020400

08002fac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <MX_USART1_UART_Init+0x4c>)
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <MX_USART1_UART_Init+0x50>)
 8002fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <MX_USART1_UART_Init+0x4c>)
 8002fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <MX_USART1_UART_Init+0x4c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <MX_USART1_UART_Init+0x4c>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <MX_USART1_UART_Init+0x4c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <MX_USART1_UART_Init+0x4c>)
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <MX_USART1_UART_Init+0x4c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <MX_USART1_UART_Init+0x4c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fe2:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <MX_USART1_UART_Init+0x4c>)
 8002fe4:	f002 fd98 	bl	8005b18 <HAL_UART_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fee:	f7ff faa3 	bl	8002538 <Error_Handler>
  }

}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000298 	.word	0x20000298
 8002ffc:	40011000 	.word	0x40011000

08003000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_UART_MspInit+0x84>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d12c      	bne.n	800307c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_UART_MspInit+0x88>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a17      	ldr	r2, [pc, #92]	; (8003088 <HAL_UART_MspInit+0x88>)
 800302c:	f043 0310 	orr.w	r3, r3, #16
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_UART_MspInit+0x88>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_UART_MspInit+0x88>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_UART_MspInit+0x88>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_UART_MspInit+0x88>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX1_Pin|RX1_Pin;
 800305a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800305e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003060:	2302      	movs	r3, #2
 8003062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003068:	2303      	movs	r3, #3
 800306a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800306c:	2307      	movs	r3, #7
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4619      	mov	r1, r3
 8003076:	4805      	ldr	r0, [pc, #20]	; (800308c <HAL_UART_MspInit+0x8c>)
 8003078:	f000 fbdc 	bl	8003834 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800307c:	bf00      	nop
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40011000 	.word	0x40011000
 8003088:	40023800 	.word	0x40023800
 800308c:	40020000 	.word	0x40020000

08003090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003094:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003096:	e003      	b.n	80030a0 <LoopCopyDataInit>

08003098 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800309a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800309c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800309e:	3104      	adds	r1, #4

080030a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030a0:	480b      	ldr	r0, [pc, #44]	; (80030d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030a8:	d3f6      	bcc.n	8003098 <CopyDataInit>
  ldr  r2, =_sbss
 80030aa:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030ac:	e002      	b.n	80030b4 <LoopFillZerobss>

080030ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030b0:	f842 3b04 	str.w	r3, [r2], #4

080030b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030b8:	d3f9      	bcc.n	80030ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ba:	f7ff fd93 	bl	8002be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030be:	f003 f9dd 	bl	800647c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030c2:	f7fe fcf1 	bl	8001aa8 <main>
  bx  lr    
 80030c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80030cc:	080074f4 	.word	0x080074f4
  ldr  r0, =_sdata
 80030d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030d4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80030d8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80030dc:	200002e0 	.word	0x200002e0

080030e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e0:	e7fe      	b.n	80030e0 <ADC_IRQHandler>
	...

080030e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_Init+0x40>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <HAL_Init+0x40>)
 80030ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_Init+0x40>)
 80030fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_Init+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a07      	ldr	r2, [pc, #28]	; (8003124 <HAL_Init+0x40>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800310c:	2003      	movs	r0, #3
 800310e:	f000 fb5c 	bl	80037ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003112:	2000      	movs	r0, #0
 8003114:	f7ff fbf2 	bl	80028fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003118:	f7ff fbc8 	bl	80028ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00

08003128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_IncTick+0x20>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_IncTick+0x24>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4413      	add	r3, r2
 8003138:	4a04      	ldr	r2, [pc, #16]	; (800314c <HAL_IncTick+0x24>)
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000008 	.word	0x20000008
 800314c:	200002d8 	.word	0x200002d8

08003150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return uwTick;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_GetTick+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	200002d8 	.word	0x200002d8

08003168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003170:	f7ff ffee 	bl	8003150 <HAL_GetTick>
 8003174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d005      	beq.n	800318e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_Delay+0x40>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800318e:	bf00      	nop
 8003190:	f7ff ffde 	bl	8003150 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d8f7      	bhi.n	8003190 <HAL_Delay+0x28>
  {
  }
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000008 	.word	0x20000008

080031ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e033      	b.n	800322a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd fe68 	bl	8000ea0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d118      	bne.n	800321c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031f2:	f023 0302 	bic.w	r3, r3, #2
 80031f6:	f043 0202 	orr.w	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f93a 	bl	8003478 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f023 0303 	bic.w	r3, r3, #3
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
 800321a:	e001      	b.n	8003220 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x1c>
 800324c:	2302      	movs	r3, #2
 800324e:	e105      	b.n	800345c <HAL_ADC_ConfigChannel+0x228>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b09      	cmp	r3, #9
 800325e:	d925      	bls.n	80032ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68d9      	ldr	r1, [r3, #12]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	3b1e      	subs	r3, #30
 8003276:	2207      	movs	r2, #7
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43da      	mvns	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	400a      	ands	r2, r1
 8003284:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68d9      	ldr	r1, [r3, #12]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	4618      	mov	r0, r3
 8003298:	4603      	mov	r3, r0
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4403      	add	r3, r0
 800329e:	3b1e      	subs	r3, #30
 80032a0:	409a      	lsls	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e022      	b.n	80032f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	2207      	movs	r2, #7
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	400a      	ands	r2, r1
 80032ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6919      	ldr	r1, [r3, #16]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4618      	mov	r0, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4403      	add	r3, r0
 80032e8:	409a      	lsls	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d824      	bhi.n	8003344 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	3b05      	subs	r3, #5
 800330c:	221f      	movs	r2, #31
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	400a      	ands	r2, r1
 800331a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	4618      	mov	r0, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	3b05      	subs	r3, #5
 8003336:	fa00 f203 	lsl.w	r2, r0, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	635a      	str	r2, [r3, #52]	; 0x34
 8003342:	e04c      	b.n	80033de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	d824      	bhi.n	8003396 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	3b23      	subs	r3, #35	; 0x23
 800335e:	221f      	movs	r2, #31
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43da      	mvns	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	400a      	ands	r2, r1
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	4618      	mov	r0, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	3b23      	subs	r3, #35	; 0x23
 8003388:	fa00 f203 	lsl.w	r2, r0, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
 8003394:	e023      	b.n	80033de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	3b41      	subs	r3, #65	; 0x41
 80033a8:	221f      	movs	r2, #31
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43da      	mvns	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	400a      	ands	r2, r1
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	4618      	mov	r0, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	3b41      	subs	r3, #65	; 0x41
 80033d2:	fa00 f203 	lsl.w	r2, r0, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_ADC_ConfigChannel+0x234>)
 80033e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a21      	ldr	r2, [pc, #132]	; (800346c <HAL_ADC_ConfigChannel+0x238>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d109      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1cc>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b12      	cmp	r3, #18
 80033f2:	d105      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <HAL_ADC_ConfigChannel+0x238>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d123      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x21e>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b10      	cmp	r3, #16
 8003410:	d003      	beq.n	800341a <HAL_ADC_ConfigChannel+0x1e6>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b11      	cmp	r3, #17
 8003418:	d11b      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b10      	cmp	r3, #16
 800342c:	d111      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_ADC_ConfigChannel+0x23c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a10      	ldr	r2, [pc, #64]	; (8003474 <HAL_ADC_ConfigChannel+0x240>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	0c9a      	lsrs	r2, r3, #18
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003444:	e002      	b.n	800344c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3b01      	subs	r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f9      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40012300 	.word	0x40012300
 800346c:	40012000 	.word	0x40012000
 8003470:	20000000 	.word	0x20000000
 8003474:	431bde83 	.word	0x431bde83

08003478 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003480:	4b79      	ldr	r3, [pc, #484]	; (8003668 <ADC_Init+0x1f0>)
 8003482:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	021a      	lsls	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	4a58      	ldr	r2, [pc, #352]	; (800366c <ADC_Init+0x1f4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d022      	beq.n	8003556 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800351e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6899      	ldr	r1, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6899      	ldr	r1, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	e00f      	b.n	8003576 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003574:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0202 	bic.w	r2, r2, #2
 8003584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6899      	ldr	r1, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7e1b      	ldrb	r3, [r3, #24]
 8003590:	005a      	lsls	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01b      	beq.n	80035dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	3b01      	subs	r3, #1
 80035d0:	035a      	lsls	r2, r3, #13
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	e007      	b.n	80035ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	3b01      	subs	r3, #1
 8003608:	051a      	lsls	r2, r3, #20
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800362e:	025a      	lsls	r2, r3, #9
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	029a      	lsls	r2, r3, #10
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40012300 	.word	0x40012300
 800366c:	0f000001 	.word	0x0f000001

08003670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800368c:	4013      	ands	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800369c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a2:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	60d3      	str	r3, [r2, #12]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <__NVIC_GetPriorityGrouping+0x18>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	f003 0307 	and.w	r3, r3, #7
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	db0b      	blt.n	80036fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	4907      	ldr	r1, [pc, #28]	; (800370c <__NVIC_EnableIRQ+0x38>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2001      	movs	r0, #1
 80036f6:	fa00 f202 	lsl.w	r2, r0, r2
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	e000e100 	.word	0xe000e100

08003710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	2b00      	cmp	r3, #0
 8003722:	db0a      	blt.n	800373a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	490c      	ldr	r1, [pc, #48]	; (800375c <__NVIC_SetPriority+0x4c>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	0112      	lsls	r2, r2, #4
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	440b      	add	r3, r1
 8003734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003738:	e00a      	b.n	8003750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4908      	ldr	r1, [pc, #32]	; (8003760 <__NVIC_SetPriority+0x50>)
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	3b04      	subs	r3, #4
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	440b      	add	r3, r1
 800374e:	761a      	strb	r2, [r3, #24]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000e100 	.word	0xe000e100
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f1c3 0307 	rsb	r3, r3, #7
 800377e:	2b04      	cmp	r3, #4
 8003780:	bf28      	it	cs
 8003782:	2304      	movcs	r3, #4
 8003784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3304      	adds	r3, #4
 800378a:	2b06      	cmp	r3, #6
 800378c:	d902      	bls.n	8003794 <NVIC_EncodePriority+0x30>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3b03      	subs	r3, #3
 8003792:	e000      	b.n	8003796 <NVIC_EncodePriority+0x32>
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	f04f 32ff 	mov.w	r2, #4294967295
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43da      	mvns	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	401a      	ands	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ac:	f04f 31ff 	mov.w	r1, #4294967295
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	43d9      	mvns	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	4313      	orrs	r3, r2
         );
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3724      	adds	r7, #36	; 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ff4c 	bl	8003670 <__NVIC_SetPriorityGrouping>
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037f2:	f7ff ff61 	bl	80036b8 <__NVIC_GetPriorityGrouping>
 80037f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	6978      	ldr	r0, [r7, #20]
 80037fe:	f7ff ffb1 	bl	8003764 <NVIC_EncodePriority>
 8003802:	4602      	mov	r2, r0
 8003804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff80 	bl	8003710 <__NVIC_SetPriority>
}
 8003810:	bf00      	nop
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ff54 	bl	80036d4 <__NVIC_EnableIRQ>
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e16b      	b.n	8003b28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003850:	2201      	movs	r2, #1
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	f040 815a 	bne.w	8003b22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d00b      	beq.n	800388e <HAL_GPIO_Init+0x5a>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d007      	beq.n	800388e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003882:	2b11      	cmp	r3, #17
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b12      	cmp	r3, #18
 800388c:	d130      	bne.n	80038f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c4:	2201      	movs	r2, #1
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 0201 	and.w	r2, r3, #1
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d003      	beq.n	8003930 <HAL_GPIO_Init+0xfc>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b12      	cmp	r3, #18
 800392e:	d123      	bne.n	8003978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	08da      	lsrs	r2, r3, #3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3208      	adds	r2, #8
 8003938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	220f      	movs	r2, #15
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	08da      	lsrs	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3208      	adds	r2, #8
 8003972:	69b9      	ldr	r1, [r7, #24]
 8003974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0203 	and.w	r2, r3, #3
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80b4 	beq.w	8003b22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b5f      	ldr	r3, [pc, #380]	; (8003b3c <HAL_GPIO_Init+0x308>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	4a5e      	ldr	r2, [pc, #376]	; (8003b3c <HAL_GPIO_Init+0x308>)
 80039c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ca:	4b5c      	ldr	r3, [pc, #368]	; (8003b3c <HAL_GPIO_Init+0x308>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d6:	4a5a      	ldr	r2, [pc, #360]	; (8003b40 <HAL_GPIO_Init+0x30c>)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3302      	adds	r3, #2
 80039de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	220f      	movs	r2, #15
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a51      	ldr	r2, [pc, #324]	; (8003b44 <HAL_GPIO_Init+0x310>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d02b      	beq.n	8003a5a <HAL_GPIO_Init+0x226>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a50      	ldr	r2, [pc, #320]	; (8003b48 <HAL_GPIO_Init+0x314>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d025      	beq.n	8003a56 <HAL_GPIO_Init+0x222>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a4f      	ldr	r2, [pc, #316]	; (8003b4c <HAL_GPIO_Init+0x318>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01f      	beq.n	8003a52 <HAL_GPIO_Init+0x21e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4e      	ldr	r2, [pc, #312]	; (8003b50 <HAL_GPIO_Init+0x31c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d019      	beq.n	8003a4e <HAL_GPIO_Init+0x21a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4d      	ldr	r2, [pc, #308]	; (8003b54 <HAL_GPIO_Init+0x320>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_GPIO_Init+0x216>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4c      	ldr	r2, [pc, #304]	; (8003b58 <HAL_GPIO_Init+0x324>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00d      	beq.n	8003a46 <HAL_GPIO_Init+0x212>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4b      	ldr	r2, [pc, #300]	; (8003b5c <HAL_GPIO_Init+0x328>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <HAL_GPIO_Init+0x20e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a4a      	ldr	r2, [pc, #296]	; (8003b60 <HAL_GPIO_Init+0x32c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_GPIO_Init+0x20a>
 8003a3a:	2307      	movs	r3, #7
 8003a3c:	e00e      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a3e:	2308      	movs	r3, #8
 8003a40:	e00c      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a42:	2306      	movs	r3, #6
 8003a44:	e00a      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a46:	2305      	movs	r3, #5
 8003a48:	e008      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e004      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e002      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	f002 0203 	and.w	r2, r2, #3
 8003a62:	0092      	lsls	r2, r2, #2
 8003a64:	4093      	lsls	r3, r2
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a6c:	4934      	ldr	r1, [pc, #208]	; (8003b40 <HAL_GPIO_Init+0x30c>)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	089b      	lsrs	r3, r3, #2
 8003a72:	3302      	adds	r3, #2
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a7a:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <HAL_GPIO_Init+0x330>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a9e:	4a31      	ldr	r2, [pc, #196]	; (8003b64 <HAL_GPIO_Init+0x330>)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_GPIO_Init+0x330>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac8:	4a26      	ldr	r2, [pc, #152]	; (8003b64 <HAL_GPIO_Init+0x330>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ace:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <HAL_GPIO_Init+0x330>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af2:	4a1c      	ldr	r2, [pc, #112]	; (8003b64 <HAL_GPIO_Init+0x330>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <HAL_GPIO_Init+0x330>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b1c:	4a11      	ldr	r2, [pc, #68]	; (8003b64 <HAL_GPIO_Init+0x330>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3301      	adds	r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	f67f ae90 	bls.w	8003850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b30:	bf00      	nop
 8003b32:	3724      	adds	r7, #36	; 0x24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	40020800 	.word	0x40020800
 8003b50:	40020c00 	.word	0x40020c00
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40021400 	.word	0x40021400
 8003b5c:	40021800 	.word	0x40021800
 8003b60:	40021c00 	.word	0x40021c00
 8003b64:	40013c00 	.word	0x40013c00

08003b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
 8003b74:	4613      	mov	r3, r2
 8003b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b78:	787b      	ldrb	r3, [r7, #1]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7e:	887a      	ldrh	r2, [r7, #2]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b84:	e003      	b.n	8003b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	041a      	lsls	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	619a      	str	r2, [r3, #24]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	401a      	ands	r2, r3
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d104      	bne.n	8003bbe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bb4:	887b      	ldrh	r3, [r7, #2]
 8003bb6:	041a      	lsls	r2, r3, #16
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003bbc:	e002      	b.n	8003bc4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	619a      	str	r2, [r3, #24]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d006      	beq.n	8003bf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003be6:	4a05      	ldr	r2, [pc, #20]	; (8003bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fc3e 	bl	8002470 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40013c00 	.word	0x40013c00

08003c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e25b      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d075      	beq.n	8003d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c1e:	4ba3      	ldr	r3, [pc, #652]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d00c      	beq.n	8003c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2a:	4ba0      	ldr	r3, [pc, #640]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d112      	bne.n	8003c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c36:	4b9d      	ldr	r3, [pc, #628]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c42:	d10b      	bne.n	8003c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	4b99      	ldr	r3, [pc, #612]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d05b      	beq.n	8003d08 <HAL_RCC_OscConfig+0x108>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d157      	bne.n	8003d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e236      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d106      	bne.n	8003c74 <HAL_RCC_OscConfig+0x74>
 8003c66:	4b91      	ldr	r3, [pc, #580]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a90      	ldr	r2, [pc, #576]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e01d      	b.n	8003cb0 <HAL_RCC_OscConfig+0xb0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x98>
 8003c7e:	4b8b      	ldr	r3, [pc, #556]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a8a      	ldr	r2, [pc, #552]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b88      	ldr	r3, [pc, #544]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a87      	ldr	r2, [pc, #540]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0xb0>
 8003c98:	4b84      	ldr	r3, [pc, #528]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a83      	ldr	r2, [pc, #524]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b81      	ldr	r3, [pc, #516]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a80      	ldr	r2, [pc, #512]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d013      	beq.n	8003ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7ff fa4a 	bl	8003150 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7ff fa46 	bl	8003150 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e1fb      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	4b76      	ldr	r3, [pc, #472]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0xc0>
 8003cde:	e014      	b.n	8003d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7ff fa36 	bl	8003150 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7ff fa32 	bl	8003150 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e1e7      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	4b6c      	ldr	r3, [pc, #432]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0xe8>
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d063      	beq.n	8003dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d16:	4b65      	ldr	r3, [pc, #404]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d22:	4b62      	ldr	r3, [pc, #392]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d11c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d2e:	4b5f      	ldr	r3, [pc, #380]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d116      	bne.n	8003d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3a:	4b5c      	ldr	r3, [pc, #368]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_RCC_OscConfig+0x152>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e1bb      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d52:	4b56      	ldr	r3, [pc, #344]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4952      	ldr	r1, [pc, #328]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d66:	e03a      	b.n	8003dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d020      	beq.n	8003db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d70:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <HAL_RCC_OscConfig+0x2b0>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7ff f9eb 	bl	8003150 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7e:	f7ff f9e7 	bl	8003150 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e19c      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d90:	4b46      	ldr	r3, [pc, #280]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9c:	4b43      	ldr	r3, [pc, #268]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4940      	ldr	r1, [pc, #256]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	600b      	str	r3, [r1, #0]
 8003db0:	e015      	b.n	8003dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db2:	4b3f      	ldr	r3, [pc, #252]	; (8003eb0 <HAL_RCC_OscConfig+0x2b0>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7ff f9ca 	bl	8003150 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7ff f9c6 	bl	8003150 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e17b      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	4b36      	ldr	r3, [pc, #216]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d030      	beq.n	8003e4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <HAL_RCC_OscConfig+0x2b4>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df8:	f7ff f9aa 	bl	8003150 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e00:	f7ff f9a6 	bl	8003150 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e15b      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e12:	4b26      	ldr	r3, [pc, #152]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x200>
 8003e1e:	e015      	b.n	8003e4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <HAL_RCC_OscConfig+0x2b4>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e26:	f7ff f993 	bl	8003150 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2e:	f7ff f98f 	bl	8003150 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e144      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80a0 	beq.w	8003f9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5e:	4b13      	ldr	r3, [pc, #76]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCC_OscConfig+0x2b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d121      	bne.n	8003eda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_RCC_OscConfig+0x2b8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a07      	ldr	r2, [pc, #28]	; (8003eb8 <HAL_RCC_OscConfig+0x2b8>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea2:	f7ff f955 	bl	8003150 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea8:	e011      	b.n	8003ece <HAL_RCC_OscConfig+0x2ce>
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	42470000 	.word	0x42470000
 8003eb4:	42470e80 	.word	0x42470e80
 8003eb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ebc:	f7ff f948 	bl	8003150 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e0fd      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ece:	4b81      	ldr	r3, [pc, #516]	; (80040d4 <HAL_RCC_OscConfig+0x4d4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d106      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x2f0>
 8003ee2:	4b7d      	ldr	r3, [pc, #500]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a7c      	ldr	r2, [pc, #496]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
 8003eee:	e01c      	b.n	8003f2a <HAL_RCC_OscConfig+0x32a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d10c      	bne.n	8003f12 <HAL_RCC_OscConfig+0x312>
 8003ef8:	4b77      	ldr	r3, [pc, #476]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	4a76      	ldr	r2, [pc, #472]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003efe:	f043 0304 	orr.w	r3, r3, #4
 8003f02:	6713      	str	r3, [r2, #112]	; 0x70
 8003f04:	4b74      	ldr	r3, [pc, #464]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	4a73      	ldr	r2, [pc, #460]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f10:	e00b      	b.n	8003f2a <HAL_RCC_OscConfig+0x32a>
 8003f12:	4b71      	ldr	r3, [pc, #452]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	4a70      	ldr	r2, [pc, #448]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1e:	4b6e      	ldr	r3, [pc, #440]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	4a6d      	ldr	r2, [pc, #436]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003f24:	f023 0304 	bic.w	r3, r3, #4
 8003f28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d015      	beq.n	8003f5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f32:	f7ff f90d 	bl	8003150 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7ff f909 	bl	8003150 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e0bc      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ee      	beq.n	8003f3a <HAL_RCC_OscConfig+0x33a>
 8003f5c:	e014      	b.n	8003f88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5e:	f7ff f8f7 	bl	8003150 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	e00a      	b.n	8003f7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f66:	f7ff f8f3 	bl	8003150 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e0a6      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	4b56      	ldr	r3, [pc, #344]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ee      	bne.n	8003f66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d105      	bne.n	8003f9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8e:	4b52      	ldr	r3, [pc, #328]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	4a51      	ldr	r2, [pc, #324]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8092 	beq.w	80040c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fa4:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d05c      	beq.n	800406a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d141      	bne.n	800403c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb8:	4b48      	ldr	r3, [pc, #288]	; (80040dc <HAL_RCC_OscConfig+0x4dc>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7ff f8c7 	bl	8003150 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7ff f8c3 	bl	8003150 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e078      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd8:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	019b      	lsls	r3, r3, #6
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	4933      	ldr	r1, [pc, #204]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800400e:	4b33      	ldr	r3, [pc, #204]	; (80040dc <HAL_RCC_OscConfig+0x4dc>)
 8004010:	2201      	movs	r2, #1
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7ff f89c 	bl	8003150 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401c:	f7ff f898 	bl	8003150 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e04d      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0x41c>
 800403a:	e045      	b.n	80040c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403c:	4b27      	ldr	r3, [pc, #156]	; (80040dc <HAL_RCC_OscConfig+0x4dc>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7ff f885 	bl	8003150 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404a:	f7ff f881 	bl	8003150 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e036      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405c:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCC_OscConfig+0x44a>
 8004068:	e02e      	b.n	80040c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e029      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <HAL_RCC_OscConfig+0x4d8>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	429a      	cmp	r2, r3
 8004088:	d11c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d115      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800409e:	4013      	ands	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d10d      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40007000 	.word	0x40007000
 80040d8:	40023800 	.word	0x40023800
 80040dc:	42470060 	.word	0x42470060

080040e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0cc      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f4:	4b68      	ldr	r3, [pc, #416]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d90c      	bls.n	800411c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b65      	ldr	r3, [pc, #404]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b63      	ldr	r3, [pc, #396]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0b8      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d020      	beq.n	800416a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004134:	4b59      	ldr	r3, [pc, #356]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4a58      	ldr	r2, [pc, #352]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800413e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800414c:	4b53      	ldr	r3, [pc, #332]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4a52      	ldr	r2, [pc, #328]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004158:	4b50      	ldr	r3, [pc, #320]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	494d      	ldr	r1, [pc, #308]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d044      	beq.n	8004200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b47      	ldr	r3, [pc, #284]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d119      	bne.n	80041be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e07f      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d003      	beq.n	800419e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419a:	2b03      	cmp	r3, #3
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419e:	4b3f      	ldr	r3, [pc, #252]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e06f      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ae:	4b3b      	ldr	r3, [pc, #236]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e067      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041be:	4b37      	ldr	r3, [pc, #220]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 0203 	bic.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4934      	ldr	r1, [pc, #208]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d0:	f7fe ffbe 	bl	8003150 <HAL_GetTick>
 80041d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d8:	f7fe ffba 	bl	8003150 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e04f      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	4b2b      	ldr	r3, [pc, #172]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 020c 	and.w	r2, r3, #12
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d1eb      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d20c      	bcs.n	8004228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b22      	ldr	r3, [pc, #136]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e032      	b.n	800428e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4916      	ldr	r1, [pc, #88]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	490e      	ldr	r1, [pc, #56]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004266:	f000 f821 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 800426a:	4601      	mov	r1, r0
 800426c:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004278:	5cd3      	ldrb	r3, [r2, r3]
 800427a:	fa21 f303 	lsr.w	r3, r1, r3
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fe fb38 	bl	80028fc <HAL_InitTick>

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40023c00 	.word	0x40023c00
 800429c:	40023800 	.word	0x40023800
 80042a0:	08007434 	.word	0x08007434
 80042a4:	20000000 	.word	0x20000000
 80042a8:	20000004 	.word	0x20000004

080042ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	2300      	movs	r3, #0
 80042bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c2:	4b50      	ldr	r3, [pc, #320]	; (8004404 <HAL_RCC_GetSysClockFreq+0x158>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d007      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0x32>
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d008      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x38>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f040 808d 	bne.w	80043f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d8:	4b4b      	ldr	r3, [pc, #300]	; (8004408 <HAL_RCC_GetSysClockFreq+0x15c>)
 80042da:	60bb      	str	r3, [r7, #8]
       break;
 80042dc:	e08c      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042de:	4b4b      	ldr	r3, [pc, #300]	; (800440c <HAL_RCC_GetSysClockFreq+0x160>)
 80042e0:	60bb      	str	r3, [r7, #8]
      break;
 80042e2:	e089      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e4:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_RCC_GetSysClockFreq+0x158>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ee:	4b45      	ldr	r3, [pc, #276]	; (8004404 <HAL_RCC_GetSysClockFreq+0x158>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d023      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fa:	4b42      	ldr	r3, [pc, #264]	; (8004404 <HAL_RCC_GetSysClockFreq+0x158>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	f04f 0400 	mov.w	r4, #0
 8004304:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	ea03 0501 	and.w	r5, r3, r1
 8004310:	ea04 0602 	and.w	r6, r4, r2
 8004314:	4a3d      	ldr	r2, [pc, #244]	; (800440c <HAL_RCC_GetSysClockFreq+0x160>)
 8004316:	fb02 f106 	mul.w	r1, r2, r6
 800431a:	2200      	movs	r2, #0
 800431c:	fb02 f205 	mul.w	r2, r2, r5
 8004320:	440a      	add	r2, r1
 8004322:	493a      	ldr	r1, [pc, #232]	; (800440c <HAL_RCC_GetSysClockFreq+0x160>)
 8004324:	fba5 0101 	umull	r0, r1, r5, r1
 8004328:	1853      	adds	r3, r2, r1
 800432a:	4619      	mov	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f04f 0400 	mov.w	r4, #0
 8004332:	461a      	mov	r2, r3
 8004334:	4623      	mov	r3, r4
 8004336:	f7fc fbe1 	bl	8000afc <__aeabi_uldivmod>
 800433a:	4603      	mov	r3, r0
 800433c:	460c      	mov	r4, r1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e049      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b30      	ldr	r3, [pc, #192]	; (8004404 <HAL_RCC_GetSysClockFreq+0x158>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	f04f 0400 	mov.w	r4, #0
 800434c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	ea03 0501 	and.w	r5, r3, r1
 8004358:	ea04 0602 	and.w	r6, r4, r2
 800435c:	4629      	mov	r1, r5
 800435e:	4632      	mov	r2, r6
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	0154      	lsls	r4, r2, #5
 800436a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800436e:	014b      	lsls	r3, r1, #5
 8004370:	4619      	mov	r1, r3
 8004372:	4622      	mov	r2, r4
 8004374:	1b49      	subs	r1, r1, r5
 8004376:	eb62 0206 	sbc.w	r2, r2, r6
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	f04f 0400 	mov.w	r4, #0
 8004382:	0194      	lsls	r4, r2, #6
 8004384:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004388:	018b      	lsls	r3, r1, #6
 800438a:	1a5b      	subs	r3, r3, r1
 800438c:	eb64 0402 	sbc.w	r4, r4, r2
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	00e2      	lsls	r2, r4, #3
 800439a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800439e:	00d9      	lsls	r1, r3, #3
 80043a0:	460b      	mov	r3, r1
 80043a2:	4614      	mov	r4, r2
 80043a4:	195b      	adds	r3, r3, r5
 80043a6:	eb44 0406 	adc.w	r4, r4, r6
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	02a2      	lsls	r2, r4, #10
 80043b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043b8:	0299      	lsls	r1, r3, #10
 80043ba:	460b      	mov	r3, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	4621      	mov	r1, r4
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f04f 0400 	mov.w	r4, #0
 80043c8:	461a      	mov	r2, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	f7fc fb96 	bl	8000afc <__aeabi_uldivmod>
 80043d0:	4603      	mov	r3, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_GetSysClockFreq+0x158>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	0c1b      	lsrs	r3, r3, #16
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	3301      	adds	r3, #1
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	60bb      	str	r3, [r7, #8]
      break;
 80043f0:	e002      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_RCC_GetSysClockFreq+0x15c>)
 80043f4:	60bb      	str	r3, [r7, #8]
      break;
 80043f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f8:	68bb      	ldr	r3, [r7, #8]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800
 8004408:	00f42400 	.word	0x00f42400
 800440c:	017d7840 	.word	0x017d7840

08004410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_RCC_GetHCLKFreq+0x14>)
 8004416:	681b      	ldr	r3, [r3, #0]
}
 8004418:	4618      	mov	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000000 	.word	0x20000000

08004428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800442c:	f7ff fff0 	bl	8004410 <HAL_RCC_GetHCLKFreq>
 8004430:	4601      	mov	r1, r0
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	0a9b      	lsrs	r3, r3, #10
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4a03      	ldr	r2, [pc, #12]	; (800444c <HAL_RCC_GetPCLK1Freq+0x24>)
 800443e:	5cd3      	ldrb	r3, [r2, r3]
 8004440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40023800 	.word	0x40023800
 800444c:	08007444 	.word	0x08007444

08004450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004454:	f7ff ffdc 	bl	8004410 <HAL_RCC_GetHCLKFreq>
 8004458:	4601      	mov	r1, r0
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	0b5b      	lsrs	r3, r3, #13
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	4a03      	ldr	r2, [pc, #12]	; (8004474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004466:	5cd3      	ldrb	r3, [r2, r3]
 8004468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40023800 	.word	0x40023800
 8004474:	08007444 	.word	0x08007444

08004478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	220f      	movs	r2, #15
 8004486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <HAL_RCC_GetClockConfig+0x5c>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0203 	and.w	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <HAL_RCC_GetClockConfig+0x5c>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <HAL_RCC_GetClockConfig+0x5c>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_GetClockConfig+0x5c>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	08db      	lsrs	r3, r3, #3
 80044b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <HAL_RCC_GetClockConfig+0x60>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 020f 	and.w	r2, r3, #15
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40023c00 	.word	0x40023c00

080044dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e056      	b.n	800459c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7fe f987 	bl	800281c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004524:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	ea42 0103 	orr.w	r1, r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	0c1b      	lsrs	r3, r3, #16
 800456c:	f003 0104 	and.w	r1, r3, #4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800458a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08c      	sub	sp, #48	; 0x30
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045b2:	2301      	movs	r3, #1
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x26>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e18a      	b.n	80048e0 <HAL_SPI_TransmitReceive+0x33c>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045d2:	f7fe fdbd 	bl	8003150 <HAL_GetTick>
 80045d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d00f      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x70>
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fa:	d107      	bne.n	800460c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d103      	bne.n	800460c <HAL_SPI_TransmitReceive+0x68>
 8004604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004608:	2b04      	cmp	r3, #4
 800460a:	d003      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800460c:	2302      	movs	r3, #2
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004612:	e15b      	b.n	80048cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x82>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x82>
 8004620:	887b      	ldrh	r3, [r7, #2]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800462c:	e14e      	b.n	80048cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b04      	cmp	r3, #4
 8004638:	d003      	beq.n	8004642 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2205      	movs	r2, #5
 800463e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	887a      	ldrh	r2, [r7, #2]
 8004652:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	887a      	ldrh	r2, [r7, #2]
 8004664:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	887a      	ldrh	r2, [r7, #2]
 800466a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	d007      	beq.n	8004696 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004694:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469e:	d178      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <HAL_SPI_TransmitReceive+0x10a>
 80046a8:	8b7b      	ldrh	r3, [r7, #26]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d166      	bne.n	800477c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	881a      	ldrh	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	1c9a      	adds	r2, r3, #2
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d2:	e053      	b.n	800477c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d11b      	bne.n	800471a <HAL_SPI_TransmitReceive+0x176>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d016      	beq.n	800471a <HAL_SPI_TransmitReceive+0x176>
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d113      	bne.n	800471a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	881a      	ldrh	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	1c9a      	adds	r2, r3, #2
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b01      	cmp	r3, #1
 8004726:	d119      	bne.n	800475c <HAL_SPI_TransmitReceive+0x1b8>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d014      	beq.n	800475c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	b292      	uxth	r2, r2
 800473e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	1c9a      	adds	r2, r3, #2
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004758:	2301      	movs	r3, #1
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800475c:	f7fe fcf8 	bl	8003150 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004768:	429a      	cmp	r2, r3
 800476a:	d807      	bhi.n	800477c <HAL_SPI_TransmitReceive+0x1d8>
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d003      	beq.n	800477c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800477a:	e0a7      	b.n	80048cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1a6      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x130>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1a1      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x130>
 8004790:	e07c      	b.n	800488c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_SPI_TransmitReceive+0x1fc>
 800479a:	8b7b      	ldrh	r3, [r7, #26]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d16b      	bne.n	8004878 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	330c      	adds	r3, #12
 80047aa:	7812      	ldrb	r2, [r2, #0]
 80047ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c6:	e057      	b.n	8004878 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d11c      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x26c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x26c>
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d114      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d119      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x2ae>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d014      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800484e:	2301      	movs	r3, #1
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004852:	f7fe fc7d 	bl	8003150 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800485e:	429a      	cmp	r2, r3
 8004860:	d803      	bhi.n	800486a <HAL_SPI_TransmitReceive+0x2c6>
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d102      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x2cc>
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004876:	e029      	b.n	80048cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1a2      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x224>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d19d      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f893 	bl	80049bc <SPI_EndRxTxTransaction>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d006      	beq.n	80048aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048a8:	e010      	b.n	80048cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	e000      	b.n	80048cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3730      	adds	r7, #48	; 0x30
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048f8:	e04c      	b.n	8004994 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d048      	beq.n	8004994 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004902:	f7fe fc25 	bl	8003150 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d902      	bls.n	8004918 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d13d      	bne.n	8004994 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004926:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004930:	d111      	bne.n	8004956 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493a:	d004      	beq.n	8004946 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004944:	d107      	bne.n	8004956 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004954:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495e:	d10f      	bne.n	8004980 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800497e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e00f      	b.n	80049b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4013      	ands	r3, r2
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d1a3      	bne.n	80048fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <SPI_EndRxTxTransaction+0x7c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1b      	ldr	r2, [pc, #108]	; (8004a3c <SPI_EndRxTxTransaction+0x80>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	0d5b      	lsrs	r3, r3, #21
 80049d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e6:	d112      	bne.n	8004a0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2200      	movs	r2, #0
 80049f0:	2180      	movs	r1, #128	; 0x80
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff ff78 	bl	80048e8 <SPI_WaitFlagStateUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	f043 0220 	orr.w	r2, r3, #32
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e00f      	b.n	8004a2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d0f2      	beq.n	8004a0e <SPI_EndRxTxTransaction+0x52>
 8004a28:	e000      	b.n	8004a2c <SPI_EndRxTxTransaction+0x70>
        break;
 8004a2a:	bf00      	nop
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	165e9f81 	.word	0x165e9f81

08004a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e01d      	b.n	8004a8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fe fa44 	bl	8002ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f000 fc1a 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b06      	cmp	r3, #6
 8004ab6:	d007      	beq.n	8004ac8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d007      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e01d      	b.n	8004b74 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fe f9af 	bl	8002eb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f000 fba7 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	6839      	ldr	r1, [r7, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 ff0c 	bl	80059ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <HAL_TIM_PWM_Start+0x74>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_TIM_PWM_Start+0x2c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <HAL_TIM_PWM_Start+0x78>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_TIM_PWM_Start+0x30>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <HAL_TIM_PWM_Start+0x32>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b06      	cmp	r3, #6
 8004bd2:	d007      	beq.n	8004be4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40010400 	.word	0x40010400

08004bf8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e01d      	b.n	8004c46 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fe f8f8 	bl	8002e14 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f000 fb3e 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	d841      	bhi.n	8004ce4 <HAL_TIM_IC_Start_IT+0x94>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <HAL_TIM_IC_Start_IT+0x18>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004ce5 	.word	0x08004ce5
 8004c70:	08004ce5 	.word	0x08004ce5
 8004c74:	08004ce5 	.word	0x08004ce5
 8004c78:	08004caf 	.word	0x08004caf
 8004c7c:	08004ce5 	.word	0x08004ce5
 8004c80:	08004ce5 	.word	0x08004ce5
 8004c84:	08004ce5 	.word	0x08004ce5
 8004c88:	08004cc1 	.word	0x08004cc1
 8004c8c:	08004ce5 	.word	0x08004ce5
 8004c90:	08004ce5 	.word	0x08004ce5
 8004c94:	08004ce5 	.word	0x08004ce5
 8004c98:	08004cd3 	.word	0x08004cd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0202 	orr.w	r2, r2, #2
 8004caa:	60da      	str	r2, [r3, #12]
      break;
 8004cac:	e01b      	b.n	8004ce6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0204 	orr.w	r2, r2, #4
 8004cbc:	60da      	str	r2, [r3, #12]
      break;
 8004cbe:	e012      	b.n	8004ce6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0208 	orr.w	r2, r2, #8
 8004cce:	60da      	str	r2, [r3, #12]
      break;
 8004cd0:	e009      	b.n	8004ce6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0210 	orr.w	r2, r2, #16
 8004ce0:	60da      	str	r2, [r3, #12]
      break;
 8004ce2:	e000      	b.n	8004ce6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004ce4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	6839      	ldr	r1, [r7, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fe5c 	bl	80059ac <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b06      	cmp	r3, #6
 8004d04:	d007      	beq.n	8004d16 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d122      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d11b      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0202 	mvn.w	r2, #2
 8004d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fd fb98 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fa86 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fa8d 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d122      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d11b      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0204 	mvn.w	r2, #4
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fd fb6e 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa5c 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fa63 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d122      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d11b      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0208 	mvn.w	r2, #8
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fd fb44 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa32 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fa39 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d122      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d11b      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0210 	mvn.w	r2, #16
 8004e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fd fb1a 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa08 	bl	800527c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fa0f 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10e      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d107      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0201 	mvn.w	r2, #1
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fd fb38 	bl	8002514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b80      	cmp	r3, #128	; 0x80
 8004eb0:	d10e      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d107      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fe1a 	bl	8005b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d10e      	bne.n	8004efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d107      	bne.n	8004efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f9d4 	bl	80052a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d10e      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d107      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0220 	mvn.w	r2, #32
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fde4 	bl	8005af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f28:	bf00      	nop
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e08a      	b.n	8005060 <HAL_TIM_IC_ConfigChannel+0x130>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2202      	movs	r2, #2
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	6819      	ldr	r1, [r3, #0]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f000 fbf2 	bl	8005758 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 020c 	bic.w	r2, r2, #12
 8004f82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	619a      	str	r2, [r3, #24]
 8004f96:	e05a      	b.n	800504e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d11c      	bne.n	8004fd8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	6819      	ldr	r1, [r3, #0]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f000 fc47 	bl	8005840 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6999      	ldr	r1, [r3, #24]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	021a      	lsls	r2, r3, #8
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	619a      	str	r2, [r3, #24]
 8004fd6:	e03a      	b.n	800504e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d11b      	bne.n	8005016 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f000 fc64 	bl	80058ba <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 020c 	bic.w	r2, r2, #12
 8005000:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69d9      	ldr	r1, [r3, #28]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	61da      	str	r2, [r3, #28]
 8005014:	e01b      	b.n	800504e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	6819      	ldr	r1, [r3, #0]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f000 fc84 	bl	8005932 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005038:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69d9      	ldr	r1, [r3, #28]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	021a      	lsls	r2, r3, #8
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800507e:	2302      	movs	r3, #2
 8005080:	e0b4      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b0c      	cmp	r3, #12
 8005096:	f200 809f 	bhi.w	80051d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800509a:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050d5 	.word	0x080050d5
 80050a4:	080051d9 	.word	0x080051d9
 80050a8:	080051d9 	.word	0x080051d9
 80050ac:	080051d9 	.word	0x080051d9
 80050b0:	08005115 	.word	0x08005115
 80050b4:	080051d9 	.word	0x080051d9
 80050b8:	080051d9 	.word	0x080051d9
 80050bc:	080051d9 	.word	0x080051d9
 80050c0:	08005157 	.word	0x08005157
 80050c4:	080051d9 	.word	0x080051d9
 80050c8:	080051d9 	.word	0x080051d9
 80050cc:	080051d9 	.word	0x080051d9
 80050d0:	08005197 	.word	0x08005197
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f98c 	bl	80053f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0208 	orr.w	r2, r2, #8
 80050ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0204 	bic.w	r2, r2, #4
 80050fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6999      	ldr	r1, [r3, #24]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	619a      	str	r2, [r3, #24]
      break;
 8005112:	e062      	b.n	80051da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f9dc 	bl	80054d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800512e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6999      	ldr	r1, [r3, #24]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	021a      	lsls	r2, r3, #8
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	619a      	str	r2, [r3, #24]
      break;
 8005154:	e041      	b.n	80051da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fa31 	bl	80055c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0208 	orr.w	r2, r2, #8
 8005170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0204 	bic.w	r2, r2, #4
 8005180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69d9      	ldr	r1, [r3, #28]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	61da      	str	r2, [r3, #28]
      break;
 8005194:	e021      	b.n	80051da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fa85 	bl	80056ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69da      	ldr	r2, [r3, #28]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69d9      	ldr	r1, [r3, #28]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	021a      	lsls	r2, r3, #8
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	61da      	str	r2, [r3, #28]
      break;
 80051d6:	e000      	b.n	80051da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80051d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b0c      	cmp	r3, #12
 8005206:	d831      	bhi.n	800526c <HAL_TIM_ReadCapturedValue+0x78>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <HAL_TIM_ReadCapturedValue+0x1c>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005245 	.word	0x08005245
 8005214:	0800526d 	.word	0x0800526d
 8005218:	0800526d 	.word	0x0800526d
 800521c:	0800526d 	.word	0x0800526d
 8005220:	0800524f 	.word	0x0800524f
 8005224:	0800526d 	.word	0x0800526d
 8005228:	0800526d 	.word	0x0800526d
 800522c:	0800526d 	.word	0x0800526d
 8005230:	08005259 	.word	0x08005259
 8005234:	0800526d 	.word	0x0800526d
 8005238:	0800526d 	.word	0x0800526d
 800523c:	0800526d 	.word	0x0800526d
 8005240:	08005263 	.word	0x08005263
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	60fb      	str	r3, [r7, #12]

      break;
 800524c:	e00f      	b.n	800526e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	60fb      	str	r3, [r7, #12]

      break;
 8005256:	e00a      	b.n	800526e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525e:	60fb      	str	r3, [r7, #12]

      break;
 8005260:	e005      	b.n	800526e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	60fb      	str	r3, [r7, #12]

      break;
 800526a:	e000      	b.n	800526e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800526c:	bf00      	nop
  }

  return tmpreg;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a40      	ldr	r2, [pc, #256]	; (80053cc <TIM_Base_SetConfig+0x114>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d6:	d00f      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3d      	ldr	r2, [pc, #244]	; (80053d0 <TIM_Base_SetConfig+0x118>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3c      	ldr	r2, [pc, #240]	; (80053d4 <TIM_Base_SetConfig+0x11c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a3b      	ldr	r2, [pc, #236]	; (80053d8 <TIM_Base_SetConfig+0x120>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a3a      	ldr	r2, [pc, #232]	; (80053dc <TIM_Base_SetConfig+0x124>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2f      	ldr	r2, [pc, #188]	; (80053cc <TIM_Base_SetConfig+0x114>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d02b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005318:	d027      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2c      	ldr	r2, [pc, #176]	; (80053d0 <TIM_Base_SetConfig+0x118>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d023      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2b      	ldr	r2, [pc, #172]	; (80053d4 <TIM_Base_SetConfig+0x11c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01f      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2a      	ldr	r2, [pc, #168]	; (80053d8 <TIM_Base_SetConfig+0x120>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a29      	ldr	r2, [pc, #164]	; (80053dc <TIM_Base_SetConfig+0x124>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d017      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a28      	ldr	r2, [pc, #160]	; (80053e0 <TIM_Base_SetConfig+0x128>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <TIM_Base_SetConfig+0x12c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <TIM_Base_SetConfig+0x130>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a25      	ldr	r2, [pc, #148]	; (80053ec <TIM_Base_SetConfig+0x134>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a24      	ldr	r2, [pc, #144]	; (80053f0 <TIM_Base_SetConfig+0x138>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <TIM_Base_SetConfig+0x13c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d108      	bne.n	800537c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <TIM_Base_SetConfig+0x114>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0xf8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <TIM_Base_SetConfig+0x124>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d103      	bne.n	80053b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	615a      	str	r2, [r3, #20]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	40010400 	.word	0x40010400
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800
 80053ec:	40001800 	.word	0x40001800
 80053f0:	40001c00 	.word	0x40001c00
 80053f4:	40002000 	.word	0x40002000

080053f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0201 	bic.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 0302 	bic.w	r3, r3, #2
 8005440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <TIM_OC1_SetConfig+0xd8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_OC1_SetConfig+0x64>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <TIM_OC1_SetConfig+0xdc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10c      	bne.n	8005476 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0308 	bic.w	r3, r3, #8
 8005462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <TIM_OC1_SetConfig+0xd8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC1_SetConfig+0x8e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC1_SetConfig+0xdc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d111      	bne.n	80054aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40010400 	.word	0x40010400

080054d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f023 0210 	bic.w	r2, r3, #16
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0320 	bic.w	r3, r3, #32
 8005522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a22      	ldr	r2, [pc, #136]	; (80055bc <TIM_OC2_SetConfig+0xe4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC2_SetConfig+0x68>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a21      	ldr	r2, [pc, #132]	; (80055c0 <TIM_OC2_SetConfig+0xe8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d10d      	bne.n	800555c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a17      	ldr	r2, [pc, #92]	; (80055bc <TIM_OC2_SetConfig+0xe4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_OC2_SetConfig+0x94>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <TIM_OC2_SetConfig+0xe8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d113      	bne.n	8005594 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800557a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010400 	.word	0x40010400

080055c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0303 	bic.w	r3, r3, #3
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800560c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a21      	ldr	r2, [pc, #132]	; (80056a4 <TIM_OC3_SetConfig+0xe0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_OC3_SetConfig+0x66>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a20      	ldr	r2, [pc, #128]	; (80056a8 <TIM_OC3_SetConfig+0xe4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10d      	bne.n	8005646 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <TIM_OC3_SetConfig+0xe0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <TIM_OC3_SetConfig+0x92>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <TIM_OC3_SetConfig+0xe4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d113      	bne.n	800567e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800565c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	621a      	str	r2, [r3, #32]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40010400 	.word	0x40010400

080056ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	031b      	lsls	r3, r3, #12
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <TIM_OC4_SetConfig+0xa4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_OC4_SetConfig+0x68>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a11      	ldr	r2, [pc, #68]	; (8005754 <TIM_OC4_SetConfig+0xa8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d109      	bne.n	8005728 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800571a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	019b      	lsls	r3, r3, #6
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400

08005758 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0201 	bic.w	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a28      	ldr	r2, [pc, #160]	; (8005824 <TIM_TI1_SetConfig+0xcc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01b      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d017      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a25      	ldr	r2, [pc, #148]	; (8005828 <TIM_TI1_SetConfig+0xd0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4a24      	ldr	r2, [pc, #144]	; (800582c <TIM_TI1_SetConfig+0xd4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00f      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4a23      	ldr	r2, [pc, #140]	; (8005830 <TIM_TI1_SetConfig+0xd8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00b      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <TIM_TI1_SetConfig+0xdc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d007      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a21      	ldr	r2, [pc, #132]	; (8005838 <TIM_TI1_SetConfig+0xe0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_TI1_SetConfig+0x66>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4a20      	ldr	r2, [pc, #128]	; (800583c <TIM_TI1_SetConfig+0xe4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d101      	bne.n	80057c2 <TIM_TI1_SetConfig+0x6a>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <TIM_TI1_SetConfig+0x6c>
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 0303 	bic.w	r3, r3, #3
 80057ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	e003      	b.n	80057e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f023 030a 	bic.w	r3, r3, #10
 80057fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f003 030a 	and.w	r3, r3, #10
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40010400 	.word	0x40010400
 8005838:	40014000 	.word	0x40014000
 800583c:	40001800 	.word	0x40001800

08005840 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f023 0210 	bic.w	r2, r3, #16
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800587e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	031b      	lsls	r3, r3, #12
 8005884:	b29b      	uxth	r3, r3
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005892:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b087      	sub	sp, #28
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800590a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005932:	b480      	push	{r7}
 8005934:	b087      	sub	sp, #28
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	607a      	str	r2, [r7, #4]
 800593e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005970:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	031b      	lsls	r3, r3, #12
 8005976:	b29b      	uxth	r3, r3
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005984:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	031b      	lsls	r3, r3, #12
 800598a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	621a      	str	r2, [r3, #32]
}
 80059a0:	bf00      	nop
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f003 031f 	and.w	r3, r3, #31
 80059be:	2201      	movs	r2, #1
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a1a      	ldr	r2, [r3, #32]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	401a      	ands	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a1a      	ldr	r2, [r3, #32]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	fa01 f303 	lsl.w	r3, r1, r3
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e05a      	b.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a21      	ldr	r2, [pc, #132]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d022      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5c:	d01d      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1d      	ldr	r2, [pc, #116]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d018      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00e      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d009      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d004      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d10c      	bne.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40010400 	.word	0x40010400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40001800 	.word	0x40001800

08005af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e03f      	b.n	8005baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fd fa5e 	bl	8003000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	; 0x24
 8005b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f90b 	bl	8005d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b088      	sub	sp, #32
 8005bb6:	af02      	add	r7, sp, #8
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	f040 8083 	bne.w	8005cda <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_UART_Transmit+0x2e>
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e07b      	b.n	8005cdc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_UART_Transmit+0x40>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e074      	b.n	8005cdc <HAL_UART_Transmit+0x12a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2221      	movs	r2, #33	; 0x21
 8005c04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c08:	f7fd faa2 	bl	8003150 <HAL_GetTick>
 8005c0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005c22:	e042      	b.n	8005caa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3a:	d122      	bne.n	8005c82 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2200      	movs	r2, #0
 8005c44:	2180      	movs	r1, #128	; 0x80
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f84c 	bl	8005ce4 <UART_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e042      	b.n	8005cdc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3302      	adds	r3, #2
 8005c76:	60bb      	str	r3, [r7, #8]
 8005c78:	e017      	b.n	8005caa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	e013      	b.n	8005caa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2180      	movs	r1, #128	; 0x80
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f829 	bl	8005ce4 <UART_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e01f      	b.n	8005cdc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	60ba      	str	r2, [r7, #8]
 8005ca2:	781a      	ldrb	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1b7      	bne.n	8005c24 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2140      	movs	r1, #64	; 0x40
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f810 	bl	8005ce4 <UART_WaitOnFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e006      	b.n	8005cdc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e000      	b.n	8005cdc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005cda:	2302      	movs	r3, #2
  }
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf4:	e02c      	b.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d028      	beq.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d04:	f7fd fa24 	bl	8003150 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d21d      	bcs.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e00f      	b.n	8005d70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d0c3      	beq.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005dba:	f023 030c 	bic.w	r3, r3, #12
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	68f9      	ldr	r1, [r7, #12]
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de6:	f040 818b 	bne.w	8006100 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4ac1      	ldr	r2, [pc, #772]	; (80060f4 <UART_SetConfig+0x37c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d005      	beq.n	8005e00 <UART_SetConfig+0x88>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4abf      	ldr	r2, [pc, #764]	; (80060f8 <UART_SetConfig+0x380>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	f040 80bd 	bne.w	8005f7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e00:	f7fe fb26 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8005e04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	461d      	mov	r5, r3
 8005e0a:	f04f 0600 	mov.w	r6, #0
 8005e0e:	46a8      	mov	r8, r5
 8005e10:	46b1      	mov	r9, r6
 8005e12:	eb18 0308 	adds.w	r3, r8, r8
 8005e16:	eb49 0409 	adc.w	r4, r9, r9
 8005e1a:	4698      	mov	r8, r3
 8005e1c:	46a1      	mov	r9, r4
 8005e1e:	eb18 0805 	adds.w	r8, r8, r5
 8005e22:	eb49 0906 	adc.w	r9, r9, r6
 8005e26:	f04f 0100 	mov.w	r1, #0
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e3a:	4688      	mov	r8, r1
 8005e3c:	4691      	mov	r9, r2
 8005e3e:	eb18 0005 	adds.w	r0, r8, r5
 8005e42:	eb49 0106 	adc.w	r1, r9, r6
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	461d      	mov	r5, r3
 8005e4c:	f04f 0600 	mov.w	r6, #0
 8005e50:	196b      	adds	r3, r5, r5
 8005e52:	eb46 0406 	adc.w	r4, r6, r6
 8005e56:	461a      	mov	r2, r3
 8005e58:	4623      	mov	r3, r4
 8005e5a:	f7fa fe4f 	bl	8000afc <__aeabi_uldivmod>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	461a      	mov	r2, r3
 8005e64:	4ba5      	ldr	r3, [pc, #660]	; (80060fc <UART_SetConfig+0x384>)
 8005e66:	fba3 2302 	umull	r2, r3, r3, r2
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	461d      	mov	r5, r3
 8005e74:	f04f 0600 	mov.w	r6, #0
 8005e78:	46a9      	mov	r9, r5
 8005e7a:	46b2      	mov	sl, r6
 8005e7c:	eb19 0309 	adds.w	r3, r9, r9
 8005e80:	eb4a 040a 	adc.w	r4, sl, sl
 8005e84:	4699      	mov	r9, r3
 8005e86:	46a2      	mov	sl, r4
 8005e88:	eb19 0905 	adds.w	r9, r9, r5
 8005e8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ea0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ea4:	4689      	mov	r9, r1
 8005ea6:	4692      	mov	sl, r2
 8005ea8:	eb19 0005 	adds.w	r0, r9, r5
 8005eac:	eb4a 0106 	adc.w	r1, sl, r6
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	461d      	mov	r5, r3
 8005eb6:	f04f 0600 	mov.w	r6, #0
 8005eba:	196b      	adds	r3, r5, r5
 8005ebc:	eb46 0406 	adc.w	r4, r6, r6
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4623      	mov	r3, r4
 8005ec4:	f7fa fe1a 	bl	8000afc <__aeabi_uldivmod>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4b8b      	ldr	r3, [pc, #556]	; (80060fc <UART_SetConfig+0x384>)
 8005ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	2164      	movs	r1, #100	; 0x64
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	3332      	adds	r3, #50	; 0x32
 8005ee2:	4a86      	ldr	r2, [pc, #536]	; (80060fc <UART_SetConfig+0x384>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ef0:	4498      	add	r8, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	461d      	mov	r5, r3
 8005ef6:	f04f 0600 	mov.w	r6, #0
 8005efa:	46a9      	mov	r9, r5
 8005efc:	46b2      	mov	sl, r6
 8005efe:	eb19 0309 	adds.w	r3, r9, r9
 8005f02:	eb4a 040a 	adc.w	r4, sl, sl
 8005f06:	4699      	mov	r9, r3
 8005f08:	46a2      	mov	sl, r4
 8005f0a:	eb19 0905 	adds.w	r9, r9, r5
 8005f0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f12:	f04f 0100 	mov.w	r1, #0
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f26:	4689      	mov	r9, r1
 8005f28:	4692      	mov	sl, r2
 8005f2a:	eb19 0005 	adds.w	r0, r9, r5
 8005f2e:	eb4a 0106 	adc.w	r1, sl, r6
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	461d      	mov	r5, r3
 8005f38:	f04f 0600 	mov.w	r6, #0
 8005f3c:	196b      	adds	r3, r5, r5
 8005f3e:	eb46 0406 	adc.w	r4, r6, r6
 8005f42:	461a      	mov	r2, r3
 8005f44:	4623      	mov	r3, r4
 8005f46:	f7fa fdd9 	bl	8000afc <__aeabi_uldivmod>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b6a      	ldr	r3, [pc, #424]	; (80060fc <UART_SetConfig+0x384>)
 8005f52:	fba3 1302 	umull	r1, r3, r3, r2
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	2164      	movs	r1, #100	; 0x64
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	3332      	adds	r3, #50	; 0x32
 8005f64:	4a65      	ldr	r2, [pc, #404]	; (80060fc <UART_SetConfig+0x384>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	f003 0207 	and.w	r2, r3, #7
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4442      	add	r2, r8
 8005f76:	609a      	str	r2, [r3, #8]
 8005f78:	e26f      	b.n	800645a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f7a:	f7fe fa55 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8005f7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	461d      	mov	r5, r3
 8005f84:	f04f 0600 	mov.w	r6, #0
 8005f88:	46a8      	mov	r8, r5
 8005f8a:	46b1      	mov	r9, r6
 8005f8c:	eb18 0308 	adds.w	r3, r8, r8
 8005f90:	eb49 0409 	adc.w	r4, r9, r9
 8005f94:	4698      	mov	r8, r3
 8005f96:	46a1      	mov	r9, r4
 8005f98:	eb18 0805 	adds.w	r8, r8, r5
 8005f9c:	eb49 0906 	adc.w	r9, r9, r6
 8005fa0:	f04f 0100 	mov.w	r1, #0
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fb4:	4688      	mov	r8, r1
 8005fb6:	4691      	mov	r9, r2
 8005fb8:	eb18 0005 	adds.w	r0, r8, r5
 8005fbc:	eb49 0106 	adc.w	r1, r9, r6
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	461d      	mov	r5, r3
 8005fc6:	f04f 0600 	mov.w	r6, #0
 8005fca:	196b      	adds	r3, r5, r5
 8005fcc:	eb46 0406 	adc.w	r4, r6, r6
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	f7fa fd92 	bl	8000afc <__aeabi_uldivmod>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4b47      	ldr	r3, [pc, #284]	; (80060fc <UART_SetConfig+0x384>)
 8005fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	461d      	mov	r5, r3
 8005fee:	f04f 0600 	mov.w	r6, #0
 8005ff2:	46a9      	mov	r9, r5
 8005ff4:	46b2      	mov	sl, r6
 8005ff6:	eb19 0309 	adds.w	r3, r9, r9
 8005ffa:	eb4a 040a 	adc.w	r4, sl, sl
 8005ffe:	4699      	mov	r9, r3
 8006000:	46a2      	mov	sl, r4
 8006002:	eb19 0905 	adds.w	r9, r9, r5
 8006006:	eb4a 0a06 	adc.w	sl, sl, r6
 800600a:	f04f 0100 	mov.w	r1, #0
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006016:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800601a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800601e:	4689      	mov	r9, r1
 8006020:	4692      	mov	sl, r2
 8006022:	eb19 0005 	adds.w	r0, r9, r5
 8006026:	eb4a 0106 	adc.w	r1, sl, r6
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	461d      	mov	r5, r3
 8006030:	f04f 0600 	mov.w	r6, #0
 8006034:	196b      	adds	r3, r5, r5
 8006036:	eb46 0406 	adc.w	r4, r6, r6
 800603a:	461a      	mov	r2, r3
 800603c:	4623      	mov	r3, r4
 800603e:	f7fa fd5d 	bl	8000afc <__aeabi_uldivmod>
 8006042:	4603      	mov	r3, r0
 8006044:	460c      	mov	r4, r1
 8006046:	461a      	mov	r2, r3
 8006048:	4b2c      	ldr	r3, [pc, #176]	; (80060fc <UART_SetConfig+0x384>)
 800604a:	fba3 1302 	umull	r1, r3, r3, r2
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	2164      	movs	r1, #100	; 0x64
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	3332      	adds	r3, #50	; 0x32
 800605c:	4a27      	ldr	r2, [pc, #156]	; (80060fc <UART_SetConfig+0x384>)
 800605e:	fba2 2303 	umull	r2, r3, r2, r3
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800606a:	4498      	add	r8, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	461d      	mov	r5, r3
 8006070:	f04f 0600 	mov.w	r6, #0
 8006074:	46a9      	mov	r9, r5
 8006076:	46b2      	mov	sl, r6
 8006078:	eb19 0309 	adds.w	r3, r9, r9
 800607c:	eb4a 040a 	adc.w	r4, sl, sl
 8006080:	4699      	mov	r9, r3
 8006082:	46a2      	mov	sl, r4
 8006084:	eb19 0905 	adds.w	r9, r9, r5
 8006088:	eb4a 0a06 	adc.w	sl, sl, r6
 800608c:	f04f 0100 	mov.w	r1, #0
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006098:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800609c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060a0:	4689      	mov	r9, r1
 80060a2:	4692      	mov	sl, r2
 80060a4:	eb19 0005 	adds.w	r0, r9, r5
 80060a8:	eb4a 0106 	adc.w	r1, sl, r6
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	461d      	mov	r5, r3
 80060b2:	f04f 0600 	mov.w	r6, #0
 80060b6:	196b      	adds	r3, r5, r5
 80060b8:	eb46 0406 	adc.w	r4, r6, r6
 80060bc:	461a      	mov	r2, r3
 80060be:	4623      	mov	r3, r4
 80060c0:	f7fa fd1c 	bl	8000afc <__aeabi_uldivmod>
 80060c4:	4603      	mov	r3, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	461a      	mov	r2, r3
 80060ca:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <UART_SetConfig+0x384>)
 80060cc:	fba3 1302 	umull	r1, r3, r3, r2
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	2164      	movs	r1, #100	; 0x64
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	3332      	adds	r3, #50	; 0x32
 80060de:	4a07      	ldr	r2, [pc, #28]	; (80060fc <UART_SetConfig+0x384>)
 80060e0:	fba2 2303 	umull	r2, r3, r2, r3
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	f003 0207 	and.w	r2, r3, #7
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4442      	add	r2, r8
 80060f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80060f2:	e1b2      	b.n	800645a <UART_SetConfig+0x6e2>
 80060f4:	40011000 	.word	0x40011000
 80060f8:	40011400 	.word	0x40011400
 80060fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4ad7      	ldr	r2, [pc, #860]	; (8006464 <UART_SetConfig+0x6ec>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d005      	beq.n	8006116 <UART_SetConfig+0x39e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4ad6      	ldr	r2, [pc, #856]	; (8006468 <UART_SetConfig+0x6f0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	f040 80d1 	bne.w	80062b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006116:	f7fe f99b 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 800611a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	469a      	mov	sl, r3
 8006120:	f04f 0b00 	mov.w	fp, #0
 8006124:	46d0      	mov	r8, sl
 8006126:	46d9      	mov	r9, fp
 8006128:	eb18 0308 	adds.w	r3, r8, r8
 800612c:	eb49 0409 	adc.w	r4, r9, r9
 8006130:	4698      	mov	r8, r3
 8006132:	46a1      	mov	r9, r4
 8006134:	eb18 080a 	adds.w	r8, r8, sl
 8006138:	eb49 090b 	adc.w	r9, r9, fp
 800613c:	f04f 0100 	mov.w	r1, #0
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006148:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800614c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006150:	4688      	mov	r8, r1
 8006152:	4691      	mov	r9, r2
 8006154:	eb1a 0508 	adds.w	r5, sl, r8
 8006158:	eb4b 0609 	adc.w	r6, fp, r9
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	4619      	mov	r1, r3
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	f04f 0400 	mov.w	r4, #0
 800616e:	0094      	lsls	r4, r2, #2
 8006170:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006174:	008b      	lsls	r3, r1, #2
 8006176:	461a      	mov	r2, r3
 8006178:	4623      	mov	r3, r4
 800617a:	4628      	mov	r0, r5
 800617c:	4631      	mov	r1, r6
 800617e:	f7fa fcbd 	bl	8000afc <__aeabi_uldivmod>
 8006182:	4603      	mov	r3, r0
 8006184:	460c      	mov	r4, r1
 8006186:	461a      	mov	r2, r3
 8006188:	4bb8      	ldr	r3, [pc, #736]	; (800646c <UART_SetConfig+0x6f4>)
 800618a:	fba3 2302 	umull	r2, r3, r3, r2
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	469b      	mov	fp, r3
 8006198:	f04f 0c00 	mov.w	ip, #0
 800619c:	46d9      	mov	r9, fp
 800619e:	46e2      	mov	sl, ip
 80061a0:	eb19 0309 	adds.w	r3, r9, r9
 80061a4:	eb4a 040a 	adc.w	r4, sl, sl
 80061a8:	4699      	mov	r9, r3
 80061aa:	46a2      	mov	sl, r4
 80061ac:	eb19 090b 	adds.w	r9, r9, fp
 80061b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061b4:	f04f 0100 	mov.w	r1, #0
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061c8:	4689      	mov	r9, r1
 80061ca:	4692      	mov	sl, r2
 80061cc:	eb1b 0509 	adds.w	r5, fp, r9
 80061d0:	eb4c 060a 	adc.w	r6, ip, sl
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4619      	mov	r1, r3
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	f04f 0400 	mov.w	r4, #0
 80061e6:	0094      	lsls	r4, r2, #2
 80061e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061ec:	008b      	lsls	r3, r1, #2
 80061ee:	461a      	mov	r2, r3
 80061f0:	4623      	mov	r3, r4
 80061f2:	4628      	mov	r0, r5
 80061f4:	4631      	mov	r1, r6
 80061f6:	f7fa fc81 	bl	8000afc <__aeabi_uldivmod>
 80061fa:	4603      	mov	r3, r0
 80061fc:	460c      	mov	r4, r1
 80061fe:	461a      	mov	r2, r3
 8006200:	4b9a      	ldr	r3, [pc, #616]	; (800646c <UART_SetConfig+0x6f4>)
 8006202:	fba3 1302 	umull	r1, r3, r3, r2
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2164      	movs	r1, #100	; 0x64
 800620a:	fb01 f303 	mul.w	r3, r1, r3
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	3332      	adds	r3, #50	; 0x32
 8006214:	4a95      	ldr	r2, [pc, #596]	; (800646c <UART_SetConfig+0x6f4>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006220:	4498      	add	r8, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	469b      	mov	fp, r3
 8006226:	f04f 0c00 	mov.w	ip, #0
 800622a:	46d9      	mov	r9, fp
 800622c:	46e2      	mov	sl, ip
 800622e:	eb19 0309 	adds.w	r3, r9, r9
 8006232:	eb4a 040a 	adc.w	r4, sl, sl
 8006236:	4699      	mov	r9, r3
 8006238:	46a2      	mov	sl, r4
 800623a:	eb19 090b 	adds.w	r9, r9, fp
 800623e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006242:	f04f 0100 	mov.w	r1, #0
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800624e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006256:	4689      	mov	r9, r1
 8006258:	4692      	mov	sl, r2
 800625a:	eb1b 0509 	adds.w	r5, fp, r9
 800625e:	eb4c 060a 	adc.w	r6, ip, sl
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4619      	mov	r1, r3
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	f04f 0400 	mov.w	r4, #0
 8006274:	0094      	lsls	r4, r2, #2
 8006276:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800627a:	008b      	lsls	r3, r1, #2
 800627c:	461a      	mov	r2, r3
 800627e:	4623      	mov	r3, r4
 8006280:	4628      	mov	r0, r5
 8006282:	4631      	mov	r1, r6
 8006284:	f7fa fc3a 	bl	8000afc <__aeabi_uldivmod>
 8006288:	4603      	mov	r3, r0
 800628a:	460c      	mov	r4, r1
 800628c:	461a      	mov	r2, r3
 800628e:	4b77      	ldr	r3, [pc, #476]	; (800646c <UART_SetConfig+0x6f4>)
 8006290:	fba3 1302 	umull	r1, r3, r3, r2
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	2164      	movs	r1, #100	; 0x64
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	3332      	adds	r3, #50	; 0x32
 80062a2:	4a72      	ldr	r2, [pc, #456]	; (800646c <UART_SetConfig+0x6f4>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f003 020f 	and.w	r2, r3, #15
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4442      	add	r2, r8
 80062b4:	609a      	str	r2, [r3, #8]
 80062b6:	e0d0      	b.n	800645a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80062b8:	f7fe f8b6 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 80062bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	469a      	mov	sl, r3
 80062c2:	f04f 0b00 	mov.w	fp, #0
 80062c6:	46d0      	mov	r8, sl
 80062c8:	46d9      	mov	r9, fp
 80062ca:	eb18 0308 	adds.w	r3, r8, r8
 80062ce:	eb49 0409 	adc.w	r4, r9, r9
 80062d2:	4698      	mov	r8, r3
 80062d4:	46a1      	mov	r9, r4
 80062d6:	eb18 080a 	adds.w	r8, r8, sl
 80062da:	eb49 090b 	adc.w	r9, r9, fp
 80062de:	f04f 0100 	mov.w	r1, #0
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062f2:	4688      	mov	r8, r1
 80062f4:	4691      	mov	r9, r2
 80062f6:	eb1a 0508 	adds.w	r5, sl, r8
 80062fa:	eb4b 0609 	adc.w	r6, fp, r9
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	4619      	mov	r1, r3
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	f04f 0400 	mov.w	r4, #0
 8006310:	0094      	lsls	r4, r2, #2
 8006312:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006316:	008b      	lsls	r3, r1, #2
 8006318:	461a      	mov	r2, r3
 800631a:	4623      	mov	r3, r4
 800631c:	4628      	mov	r0, r5
 800631e:	4631      	mov	r1, r6
 8006320:	f7fa fbec 	bl	8000afc <__aeabi_uldivmod>
 8006324:	4603      	mov	r3, r0
 8006326:	460c      	mov	r4, r1
 8006328:	461a      	mov	r2, r3
 800632a:	4b50      	ldr	r3, [pc, #320]	; (800646c <UART_SetConfig+0x6f4>)
 800632c:	fba3 2302 	umull	r2, r3, r3, r2
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	469b      	mov	fp, r3
 800633a:	f04f 0c00 	mov.w	ip, #0
 800633e:	46d9      	mov	r9, fp
 8006340:	46e2      	mov	sl, ip
 8006342:	eb19 0309 	adds.w	r3, r9, r9
 8006346:	eb4a 040a 	adc.w	r4, sl, sl
 800634a:	4699      	mov	r9, r3
 800634c:	46a2      	mov	sl, r4
 800634e:	eb19 090b 	adds.w	r9, r9, fp
 8006352:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006356:	f04f 0100 	mov.w	r1, #0
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006362:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006366:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800636a:	4689      	mov	r9, r1
 800636c:	4692      	mov	sl, r2
 800636e:	eb1b 0509 	adds.w	r5, fp, r9
 8006372:	eb4c 060a 	adc.w	r6, ip, sl
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	4619      	mov	r1, r3
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	f04f 0400 	mov.w	r4, #0
 8006388:	0094      	lsls	r4, r2, #2
 800638a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800638e:	008b      	lsls	r3, r1, #2
 8006390:	461a      	mov	r2, r3
 8006392:	4623      	mov	r3, r4
 8006394:	4628      	mov	r0, r5
 8006396:	4631      	mov	r1, r6
 8006398:	f7fa fbb0 	bl	8000afc <__aeabi_uldivmod>
 800639c:	4603      	mov	r3, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	461a      	mov	r2, r3
 80063a2:	4b32      	ldr	r3, [pc, #200]	; (800646c <UART_SetConfig+0x6f4>)
 80063a4:	fba3 1302 	umull	r1, r3, r3, r2
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	2164      	movs	r1, #100	; 0x64
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	3332      	adds	r3, #50	; 0x32
 80063b6:	4a2d      	ldr	r2, [pc, #180]	; (800646c <UART_SetConfig+0x6f4>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c2:	4498      	add	r8, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	469b      	mov	fp, r3
 80063c8:	f04f 0c00 	mov.w	ip, #0
 80063cc:	46d9      	mov	r9, fp
 80063ce:	46e2      	mov	sl, ip
 80063d0:	eb19 0309 	adds.w	r3, r9, r9
 80063d4:	eb4a 040a 	adc.w	r4, sl, sl
 80063d8:	4699      	mov	r9, r3
 80063da:	46a2      	mov	sl, r4
 80063dc:	eb19 090b 	adds.w	r9, r9, fp
 80063e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063e4:	f04f 0100 	mov.w	r1, #0
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063f8:	4689      	mov	r9, r1
 80063fa:	4692      	mov	sl, r2
 80063fc:	eb1b 0509 	adds.w	r5, fp, r9
 8006400:	eb4c 060a 	adc.w	r6, ip, sl
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	4619      	mov	r1, r3
 800640a:	f04f 0200 	mov.w	r2, #0
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	f04f 0400 	mov.w	r4, #0
 8006416:	0094      	lsls	r4, r2, #2
 8006418:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800641c:	008b      	lsls	r3, r1, #2
 800641e:	461a      	mov	r2, r3
 8006420:	4623      	mov	r3, r4
 8006422:	4628      	mov	r0, r5
 8006424:	4631      	mov	r1, r6
 8006426:	f7fa fb69 	bl	8000afc <__aeabi_uldivmod>
 800642a:	4603      	mov	r3, r0
 800642c:	460c      	mov	r4, r1
 800642e:	461a      	mov	r2, r3
 8006430:	4b0e      	ldr	r3, [pc, #56]	; (800646c <UART_SetConfig+0x6f4>)
 8006432:	fba3 1302 	umull	r1, r3, r3, r2
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	2164      	movs	r1, #100	; 0x64
 800643a:	fb01 f303 	mul.w	r3, r1, r3
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	3332      	adds	r3, #50	; 0x32
 8006444:	4a09      	ldr	r2, [pc, #36]	; (800646c <UART_SetConfig+0x6f4>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	f003 020f 	and.w	r2, r3, #15
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4442      	add	r2, r8
 8006456:	609a      	str	r2, [r3, #8]
}
 8006458:	e7ff      	b.n	800645a <UART_SetConfig+0x6e2>
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006464:	40011000 	.word	0x40011000
 8006468:	40011400 	.word	0x40011400
 800646c:	51eb851f 	.word	0x51eb851f

08006470 <__errno>:
 8006470:	4b01      	ldr	r3, [pc, #4]	; (8006478 <__errno+0x8>)
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	2000000c 	.word	0x2000000c

0800647c <__libc_init_array>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	4e0d      	ldr	r6, [pc, #52]	; (80064b4 <__libc_init_array+0x38>)
 8006480:	4c0d      	ldr	r4, [pc, #52]	; (80064b8 <__libc_init_array+0x3c>)
 8006482:	1ba4      	subs	r4, r4, r6
 8006484:	10a4      	asrs	r4, r4, #2
 8006486:	2500      	movs	r5, #0
 8006488:	42a5      	cmp	r5, r4
 800648a:	d109      	bne.n	80064a0 <__libc_init_array+0x24>
 800648c:	4e0b      	ldr	r6, [pc, #44]	; (80064bc <__libc_init_array+0x40>)
 800648e:	4c0c      	ldr	r4, [pc, #48]	; (80064c0 <__libc_init_array+0x44>)
 8006490:	f000 ff68 	bl	8007364 <_init>
 8006494:	1ba4      	subs	r4, r4, r6
 8006496:	10a4      	asrs	r4, r4, #2
 8006498:	2500      	movs	r5, #0
 800649a:	42a5      	cmp	r5, r4
 800649c:	d105      	bne.n	80064aa <__libc_init_array+0x2e>
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064a4:	4798      	blx	r3
 80064a6:	3501      	adds	r5, #1
 80064a8:	e7ee      	b.n	8006488 <__libc_init_array+0xc>
 80064aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064ae:	4798      	blx	r3
 80064b0:	3501      	adds	r5, #1
 80064b2:	e7f2      	b.n	800649a <__libc_init_array+0x1e>
 80064b4:	080074ec 	.word	0x080074ec
 80064b8:	080074ec 	.word	0x080074ec
 80064bc:	080074ec 	.word	0x080074ec
 80064c0:	080074f0 	.word	0x080074f0

080064c4 <memset>:
 80064c4:	4402      	add	r2, r0
 80064c6:	4603      	mov	r3, r0
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d100      	bne.n	80064ce <memset+0xa>
 80064cc:	4770      	bx	lr
 80064ce:	f803 1b01 	strb.w	r1, [r3], #1
 80064d2:	e7f9      	b.n	80064c8 <memset+0x4>

080064d4 <iprintf>:
 80064d4:	b40f      	push	{r0, r1, r2, r3}
 80064d6:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <iprintf+0x2c>)
 80064d8:	b513      	push	{r0, r1, r4, lr}
 80064da:	681c      	ldr	r4, [r3, #0]
 80064dc:	b124      	cbz	r4, 80064e8 <iprintf+0x14>
 80064de:	69a3      	ldr	r3, [r4, #24]
 80064e0:	b913      	cbnz	r3, 80064e8 <iprintf+0x14>
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 fa22 	bl	800692c <__sinit>
 80064e8:	ab05      	add	r3, sp, #20
 80064ea:	9a04      	ldr	r2, [sp, #16]
 80064ec:	68a1      	ldr	r1, [r4, #8]
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fbdb 	bl	8006cac <_vfiprintf_r>
 80064f6:	b002      	add	sp, #8
 80064f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fc:	b004      	add	sp, #16
 80064fe:	4770      	bx	lr
 8006500:	2000000c 	.word	0x2000000c

08006504 <_puts_r>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	460e      	mov	r6, r1
 8006508:	4605      	mov	r5, r0
 800650a:	b118      	cbz	r0, 8006514 <_puts_r+0x10>
 800650c:	6983      	ldr	r3, [r0, #24]
 800650e:	b90b      	cbnz	r3, 8006514 <_puts_r+0x10>
 8006510:	f000 fa0c 	bl	800692c <__sinit>
 8006514:	69ab      	ldr	r3, [r5, #24]
 8006516:	68ac      	ldr	r4, [r5, #8]
 8006518:	b913      	cbnz	r3, 8006520 <_puts_r+0x1c>
 800651a:	4628      	mov	r0, r5
 800651c:	f000 fa06 	bl	800692c <__sinit>
 8006520:	4b23      	ldr	r3, [pc, #140]	; (80065b0 <_puts_r+0xac>)
 8006522:	429c      	cmp	r4, r3
 8006524:	d117      	bne.n	8006556 <_puts_r+0x52>
 8006526:	686c      	ldr	r4, [r5, #4]
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	071b      	lsls	r3, r3, #28
 800652c:	d51d      	bpl.n	800656a <_puts_r+0x66>
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	b1db      	cbz	r3, 800656a <_puts_r+0x66>
 8006532:	3e01      	subs	r6, #1
 8006534:	68a3      	ldr	r3, [r4, #8]
 8006536:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800653a:	3b01      	subs	r3, #1
 800653c:	60a3      	str	r3, [r4, #8]
 800653e:	b9e9      	cbnz	r1, 800657c <_puts_r+0x78>
 8006540:	2b00      	cmp	r3, #0
 8006542:	da2e      	bge.n	80065a2 <_puts_r+0x9e>
 8006544:	4622      	mov	r2, r4
 8006546:	210a      	movs	r1, #10
 8006548:	4628      	mov	r0, r5
 800654a:	f000 f83f 	bl	80065cc <__swbuf_r>
 800654e:	3001      	adds	r0, #1
 8006550:	d011      	beq.n	8006576 <_puts_r+0x72>
 8006552:	200a      	movs	r0, #10
 8006554:	e011      	b.n	800657a <_puts_r+0x76>
 8006556:	4b17      	ldr	r3, [pc, #92]	; (80065b4 <_puts_r+0xb0>)
 8006558:	429c      	cmp	r4, r3
 800655a:	d101      	bne.n	8006560 <_puts_r+0x5c>
 800655c:	68ac      	ldr	r4, [r5, #8]
 800655e:	e7e3      	b.n	8006528 <_puts_r+0x24>
 8006560:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <_puts_r+0xb4>)
 8006562:	429c      	cmp	r4, r3
 8006564:	bf08      	it	eq
 8006566:	68ec      	ldreq	r4, [r5, #12]
 8006568:	e7de      	b.n	8006528 <_puts_r+0x24>
 800656a:	4621      	mov	r1, r4
 800656c:	4628      	mov	r0, r5
 800656e:	f000 f87f 	bl	8006670 <__swsetup_r>
 8006572:	2800      	cmp	r0, #0
 8006574:	d0dd      	beq.n	8006532 <_puts_r+0x2e>
 8006576:	f04f 30ff 	mov.w	r0, #4294967295
 800657a:	bd70      	pop	{r4, r5, r6, pc}
 800657c:	2b00      	cmp	r3, #0
 800657e:	da04      	bge.n	800658a <_puts_r+0x86>
 8006580:	69a2      	ldr	r2, [r4, #24]
 8006582:	429a      	cmp	r2, r3
 8006584:	dc06      	bgt.n	8006594 <_puts_r+0x90>
 8006586:	290a      	cmp	r1, #10
 8006588:	d004      	beq.n	8006594 <_puts_r+0x90>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	6022      	str	r2, [r4, #0]
 8006590:	7019      	strb	r1, [r3, #0]
 8006592:	e7cf      	b.n	8006534 <_puts_r+0x30>
 8006594:	4622      	mov	r2, r4
 8006596:	4628      	mov	r0, r5
 8006598:	f000 f818 	bl	80065cc <__swbuf_r>
 800659c:	3001      	adds	r0, #1
 800659e:	d1c9      	bne.n	8006534 <_puts_r+0x30>
 80065a0:	e7e9      	b.n	8006576 <_puts_r+0x72>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	200a      	movs	r0, #10
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	7018      	strb	r0, [r3, #0]
 80065ac:	e7e5      	b.n	800657a <_puts_r+0x76>
 80065ae:	bf00      	nop
 80065b0:	08007470 	.word	0x08007470
 80065b4:	08007490 	.word	0x08007490
 80065b8:	08007450 	.word	0x08007450

080065bc <puts>:
 80065bc:	4b02      	ldr	r3, [pc, #8]	; (80065c8 <puts+0xc>)
 80065be:	4601      	mov	r1, r0
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	f7ff bf9f 	b.w	8006504 <_puts_r>
 80065c6:	bf00      	nop
 80065c8:	2000000c 	.word	0x2000000c

080065cc <__swbuf_r>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	460e      	mov	r6, r1
 80065d0:	4614      	mov	r4, r2
 80065d2:	4605      	mov	r5, r0
 80065d4:	b118      	cbz	r0, 80065de <__swbuf_r+0x12>
 80065d6:	6983      	ldr	r3, [r0, #24]
 80065d8:	b90b      	cbnz	r3, 80065de <__swbuf_r+0x12>
 80065da:	f000 f9a7 	bl	800692c <__sinit>
 80065de:	4b21      	ldr	r3, [pc, #132]	; (8006664 <__swbuf_r+0x98>)
 80065e0:	429c      	cmp	r4, r3
 80065e2:	d12a      	bne.n	800663a <__swbuf_r+0x6e>
 80065e4:	686c      	ldr	r4, [r5, #4]
 80065e6:	69a3      	ldr	r3, [r4, #24]
 80065e8:	60a3      	str	r3, [r4, #8]
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	071a      	lsls	r2, r3, #28
 80065ee:	d52e      	bpl.n	800664e <__swbuf_r+0x82>
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	b363      	cbz	r3, 800664e <__swbuf_r+0x82>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	6820      	ldr	r0, [r4, #0]
 80065f8:	1ac0      	subs	r0, r0, r3
 80065fa:	6963      	ldr	r3, [r4, #20]
 80065fc:	b2f6      	uxtb	r6, r6
 80065fe:	4283      	cmp	r3, r0
 8006600:	4637      	mov	r7, r6
 8006602:	dc04      	bgt.n	800660e <__swbuf_r+0x42>
 8006604:	4621      	mov	r1, r4
 8006606:	4628      	mov	r0, r5
 8006608:	f000 f926 	bl	8006858 <_fflush_r>
 800660c:	bb28      	cbnz	r0, 800665a <__swbuf_r+0x8e>
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	3b01      	subs	r3, #1
 8006612:	60a3      	str	r3, [r4, #8]
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	6022      	str	r2, [r4, #0]
 800661a:	701e      	strb	r6, [r3, #0]
 800661c:	6963      	ldr	r3, [r4, #20]
 800661e:	3001      	adds	r0, #1
 8006620:	4283      	cmp	r3, r0
 8006622:	d004      	beq.n	800662e <__swbuf_r+0x62>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	07db      	lsls	r3, r3, #31
 8006628:	d519      	bpl.n	800665e <__swbuf_r+0x92>
 800662a:	2e0a      	cmp	r6, #10
 800662c:	d117      	bne.n	800665e <__swbuf_r+0x92>
 800662e:	4621      	mov	r1, r4
 8006630:	4628      	mov	r0, r5
 8006632:	f000 f911 	bl	8006858 <_fflush_r>
 8006636:	b190      	cbz	r0, 800665e <__swbuf_r+0x92>
 8006638:	e00f      	b.n	800665a <__swbuf_r+0x8e>
 800663a:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <__swbuf_r+0x9c>)
 800663c:	429c      	cmp	r4, r3
 800663e:	d101      	bne.n	8006644 <__swbuf_r+0x78>
 8006640:	68ac      	ldr	r4, [r5, #8]
 8006642:	e7d0      	b.n	80065e6 <__swbuf_r+0x1a>
 8006644:	4b09      	ldr	r3, [pc, #36]	; (800666c <__swbuf_r+0xa0>)
 8006646:	429c      	cmp	r4, r3
 8006648:	bf08      	it	eq
 800664a:	68ec      	ldreq	r4, [r5, #12]
 800664c:	e7cb      	b.n	80065e6 <__swbuf_r+0x1a>
 800664e:	4621      	mov	r1, r4
 8006650:	4628      	mov	r0, r5
 8006652:	f000 f80d 	bl	8006670 <__swsetup_r>
 8006656:	2800      	cmp	r0, #0
 8006658:	d0cc      	beq.n	80065f4 <__swbuf_r+0x28>
 800665a:	f04f 37ff 	mov.w	r7, #4294967295
 800665e:	4638      	mov	r0, r7
 8006660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006662:	bf00      	nop
 8006664:	08007470 	.word	0x08007470
 8006668:	08007490 	.word	0x08007490
 800666c:	08007450 	.word	0x08007450

08006670 <__swsetup_r>:
 8006670:	4b32      	ldr	r3, [pc, #200]	; (800673c <__swsetup_r+0xcc>)
 8006672:	b570      	push	{r4, r5, r6, lr}
 8006674:	681d      	ldr	r5, [r3, #0]
 8006676:	4606      	mov	r6, r0
 8006678:	460c      	mov	r4, r1
 800667a:	b125      	cbz	r5, 8006686 <__swsetup_r+0x16>
 800667c:	69ab      	ldr	r3, [r5, #24]
 800667e:	b913      	cbnz	r3, 8006686 <__swsetup_r+0x16>
 8006680:	4628      	mov	r0, r5
 8006682:	f000 f953 	bl	800692c <__sinit>
 8006686:	4b2e      	ldr	r3, [pc, #184]	; (8006740 <__swsetup_r+0xd0>)
 8006688:	429c      	cmp	r4, r3
 800668a:	d10f      	bne.n	80066ac <__swsetup_r+0x3c>
 800668c:	686c      	ldr	r4, [r5, #4]
 800668e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006692:	b29a      	uxth	r2, r3
 8006694:	0715      	lsls	r5, r2, #28
 8006696:	d42c      	bmi.n	80066f2 <__swsetup_r+0x82>
 8006698:	06d0      	lsls	r0, r2, #27
 800669a:	d411      	bmi.n	80066c0 <__swsetup_r+0x50>
 800669c:	2209      	movs	r2, #9
 800669e:	6032      	str	r2, [r6, #0]
 80066a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	f04f 30ff 	mov.w	r0, #4294967295
 80066aa:	e03e      	b.n	800672a <__swsetup_r+0xba>
 80066ac:	4b25      	ldr	r3, [pc, #148]	; (8006744 <__swsetup_r+0xd4>)
 80066ae:	429c      	cmp	r4, r3
 80066b0:	d101      	bne.n	80066b6 <__swsetup_r+0x46>
 80066b2:	68ac      	ldr	r4, [r5, #8]
 80066b4:	e7eb      	b.n	800668e <__swsetup_r+0x1e>
 80066b6:	4b24      	ldr	r3, [pc, #144]	; (8006748 <__swsetup_r+0xd8>)
 80066b8:	429c      	cmp	r4, r3
 80066ba:	bf08      	it	eq
 80066bc:	68ec      	ldreq	r4, [r5, #12]
 80066be:	e7e6      	b.n	800668e <__swsetup_r+0x1e>
 80066c0:	0751      	lsls	r1, r2, #29
 80066c2:	d512      	bpl.n	80066ea <__swsetup_r+0x7a>
 80066c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066c6:	b141      	cbz	r1, 80066da <__swsetup_r+0x6a>
 80066c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066cc:	4299      	cmp	r1, r3
 80066ce:	d002      	beq.n	80066d6 <__swsetup_r+0x66>
 80066d0:	4630      	mov	r0, r6
 80066d2:	f000 fa19 	bl	8006b08 <_free_r>
 80066d6:	2300      	movs	r3, #0
 80066d8:	6363      	str	r3, [r4, #52]	; 0x34
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066e0:	81a3      	strh	r3, [r4, #12]
 80066e2:	2300      	movs	r3, #0
 80066e4:	6063      	str	r3, [r4, #4]
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f043 0308 	orr.w	r3, r3, #8
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	6923      	ldr	r3, [r4, #16]
 80066f4:	b94b      	cbnz	r3, 800670a <__swsetup_r+0x9a>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006700:	d003      	beq.n	800670a <__swsetup_r+0x9a>
 8006702:	4621      	mov	r1, r4
 8006704:	4630      	mov	r0, r6
 8006706:	f000 f9bf 	bl	8006a88 <__smakebuf_r>
 800670a:	89a2      	ldrh	r2, [r4, #12]
 800670c:	f012 0301 	ands.w	r3, r2, #1
 8006710:	d00c      	beq.n	800672c <__swsetup_r+0xbc>
 8006712:	2300      	movs	r3, #0
 8006714:	60a3      	str	r3, [r4, #8]
 8006716:	6963      	ldr	r3, [r4, #20]
 8006718:	425b      	negs	r3, r3
 800671a:	61a3      	str	r3, [r4, #24]
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	b953      	cbnz	r3, 8006736 <__swsetup_r+0xc6>
 8006720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006724:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006728:	d1ba      	bne.n	80066a0 <__swsetup_r+0x30>
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	0792      	lsls	r2, r2, #30
 800672e:	bf58      	it	pl
 8006730:	6963      	ldrpl	r3, [r4, #20]
 8006732:	60a3      	str	r3, [r4, #8]
 8006734:	e7f2      	b.n	800671c <__swsetup_r+0xac>
 8006736:	2000      	movs	r0, #0
 8006738:	e7f7      	b.n	800672a <__swsetup_r+0xba>
 800673a:	bf00      	nop
 800673c:	2000000c 	.word	0x2000000c
 8006740:	08007470 	.word	0x08007470
 8006744:	08007490 	.word	0x08007490
 8006748:	08007450 	.word	0x08007450

0800674c <__sflush_r>:
 800674c:	898a      	ldrh	r2, [r1, #12]
 800674e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006752:	4605      	mov	r5, r0
 8006754:	0710      	lsls	r0, r2, #28
 8006756:	460c      	mov	r4, r1
 8006758:	d458      	bmi.n	800680c <__sflush_r+0xc0>
 800675a:	684b      	ldr	r3, [r1, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	dc05      	bgt.n	800676c <__sflush_r+0x20>
 8006760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	dc02      	bgt.n	800676c <__sflush_r+0x20>
 8006766:	2000      	movs	r0, #0
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800676e:	2e00      	cmp	r6, #0
 8006770:	d0f9      	beq.n	8006766 <__sflush_r+0x1a>
 8006772:	2300      	movs	r3, #0
 8006774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006778:	682f      	ldr	r7, [r5, #0]
 800677a:	6a21      	ldr	r1, [r4, #32]
 800677c:	602b      	str	r3, [r5, #0]
 800677e:	d032      	beq.n	80067e6 <__sflush_r+0x9a>
 8006780:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	075a      	lsls	r2, r3, #29
 8006786:	d505      	bpl.n	8006794 <__sflush_r+0x48>
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	1ac0      	subs	r0, r0, r3
 800678c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800678e:	b10b      	cbz	r3, 8006794 <__sflush_r+0x48>
 8006790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006792:	1ac0      	subs	r0, r0, r3
 8006794:	2300      	movs	r3, #0
 8006796:	4602      	mov	r2, r0
 8006798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800679a:	6a21      	ldr	r1, [r4, #32]
 800679c:	4628      	mov	r0, r5
 800679e:	47b0      	blx	r6
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	d106      	bne.n	80067b4 <__sflush_r+0x68>
 80067a6:	6829      	ldr	r1, [r5, #0]
 80067a8:	291d      	cmp	r1, #29
 80067aa:	d848      	bhi.n	800683e <__sflush_r+0xf2>
 80067ac:	4a29      	ldr	r2, [pc, #164]	; (8006854 <__sflush_r+0x108>)
 80067ae:	40ca      	lsrs	r2, r1
 80067b0:	07d6      	lsls	r6, r2, #31
 80067b2:	d544      	bpl.n	800683e <__sflush_r+0xf2>
 80067b4:	2200      	movs	r2, #0
 80067b6:	6062      	str	r2, [r4, #4]
 80067b8:	04d9      	lsls	r1, r3, #19
 80067ba:	6922      	ldr	r2, [r4, #16]
 80067bc:	6022      	str	r2, [r4, #0]
 80067be:	d504      	bpl.n	80067ca <__sflush_r+0x7e>
 80067c0:	1c42      	adds	r2, r0, #1
 80067c2:	d101      	bne.n	80067c8 <__sflush_r+0x7c>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b903      	cbnz	r3, 80067ca <__sflush_r+0x7e>
 80067c8:	6560      	str	r0, [r4, #84]	; 0x54
 80067ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067cc:	602f      	str	r7, [r5, #0]
 80067ce:	2900      	cmp	r1, #0
 80067d0:	d0c9      	beq.n	8006766 <__sflush_r+0x1a>
 80067d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d6:	4299      	cmp	r1, r3
 80067d8:	d002      	beq.n	80067e0 <__sflush_r+0x94>
 80067da:	4628      	mov	r0, r5
 80067dc:	f000 f994 	bl	8006b08 <_free_r>
 80067e0:	2000      	movs	r0, #0
 80067e2:	6360      	str	r0, [r4, #52]	; 0x34
 80067e4:	e7c0      	b.n	8006768 <__sflush_r+0x1c>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4628      	mov	r0, r5
 80067ea:	47b0      	blx	r6
 80067ec:	1c41      	adds	r1, r0, #1
 80067ee:	d1c8      	bne.n	8006782 <__sflush_r+0x36>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0c5      	beq.n	8006782 <__sflush_r+0x36>
 80067f6:	2b1d      	cmp	r3, #29
 80067f8:	d001      	beq.n	80067fe <__sflush_r+0xb2>
 80067fa:	2b16      	cmp	r3, #22
 80067fc:	d101      	bne.n	8006802 <__sflush_r+0xb6>
 80067fe:	602f      	str	r7, [r5, #0]
 8006800:	e7b1      	b.n	8006766 <__sflush_r+0x1a>
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	e7ad      	b.n	8006768 <__sflush_r+0x1c>
 800680c:	690f      	ldr	r7, [r1, #16]
 800680e:	2f00      	cmp	r7, #0
 8006810:	d0a9      	beq.n	8006766 <__sflush_r+0x1a>
 8006812:	0793      	lsls	r3, r2, #30
 8006814:	680e      	ldr	r6, [r1, #0]
 8006816:	bf08      	it	eq
 8006818:	694b      	ldreq	r3, [r1, #20]
 800681a:	600f      	str	r7, [r1, #0]
 800681c:	bf18      	it	ne
 800681e:	2300      	movne	r3, #0
 8006820:	eba6 0807 	sub.w	r8, r6, r7
 8006824:	608b      	str	r3, [r1, #8]
 8006826:	f1b8 0f00 	cmp.w	r8, #0
 800682a:	dd9c      	ble.n	8006766 <__sflush_r+0x1a>
 800682c:	4643      	mov	r3, r8
 800682e:	463a      	mov	r2, r7
 8006830:	6a21      	ldr	r1, [r4, #32]
 8006832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006834:	4628      	mov	r0, r5
 8006836:	47b0      	blx	r6
 8006838:	2800      	cmp	r0, #0
 800683a:	dc06      	bgt.n	800684a <__sflush_r+0xfe>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	e78e      	b.n	8006768 <__sflush_r+0x1c>
 800684a:	4407      	add	r7, r0
 800684c:	eba8 0800 	sub.w	r8, r8, r0
 8006850:	e7e9      	b.n	8006826 <__sflush_r+0xda>
 8006852:	bf00      	nop
 8006854:	20400001 	.word	0x20400001

08006858 <_fflush_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	690b      	ldr	r3, [r1, #16]
 800685c:	4605      	mov	r5, r0
 800685e:	460c      	mov	r4, r1
 8006860:	b1db      	cbz	r3, 800689a <_fflush_r+0x42>
 8006862:	b118      	cbz	r0, 800686c <_fflush_r+0x14>
 8006864:	6983      	ldr	r3, [r0, #24]
 8006866:	b90b      	cbnz	r3, 800686c <_fflush_r+0x14>
 8006868:	f000 f860 	bl	800692c <__sinit>
 800686c:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <_fflush_r+0x48>)
 800686e:	429c      	cmp	r4, r3
 8006870:	d109      	bne.n	8006886 <_fflush_r+0x2e>
 8006872:	686c      	ldr	r4, [r5, #4]
 8006874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006878:	b17b      	cbz	r3, 800689a <_fflush_r+0x42>
 800687a:	4621      	mov	r1, r4
 800687c:	4628      	mov	r0, r5
 800687e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006882:	f7ff bf63 	b.w	800674c <__sflush_r>
 8006886:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <_fflush_r+0x4c>)
 8006888:	429c      	cmp	r4, r3
 800688a:	d101      	bne.n	8006890 <_fflush_r+0x38>
 800688c:	68ac      	ldr	r4, [r5, #8]
 800688e:	e7f1      	b.n	8006874 <_fflush_r+0x1c>
 8006890:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <_fflush_r+0x50>)
 8006892:	429c      	cmp	r4, r3
 8006894:	bf08      	it	eq
 8006896:	68ec      	ldreq	r4, [r5, #12]
 8006898:	e7ec      	b.n	8006874 <_fflush_r+0x1c>
 800689a:	2000      	movs	r0, #0
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	bf00      	nop
 80068a0:	08007470 	.word	0x08007470
 80068a4:	08007490 	.word	0x08007490
 80068a8:	08007450 	.word	0x08007450

080068ac <std>:
 80068ac:	2300      	movs	r3, #0
 80068ae:	b510      	push	{r4, lr}
 80068b0:	4604      	mov	r4, r0
 80068b2:	e9c0 3300 	strd	r3, r3, [r0]
 80068b6:	6083      	str	r3, [r0, #8]
 80068b8:	8181      	strh	r1, [r0, #12]
 80068ba:	6643      	str	r3, [r0, #100]	; 0x64
 80068bc:	81c2      	strh	r2, [r0, #14]
 80068be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068c2:	6183      	str	r3, [r0, #24]
 80068c4:	4619      	mov	r1, r3
 80068c6:	2208      	movs	r2, #8
 80068c8:	305c      	adds	r0, #92	; 0x5c
 80068ca:	f7ff fdfb 	bl	80064c4 <memset>
 80068ce:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <std+0x38>)
 80068d0:	6263      	str	r3, [r4, #36]	; 0x24
 80068d2:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <std+0x3c>)
 80068d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <std+0x40>)
 80068d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068da:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <std+0x44>)
 80068dc:	6224      	str	r4, [r4, #32]
 80068de:	6323      	str	r3, [r4, #48]	; 0x30
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	bf00      	nop
 80068e4:	08007209 	.word	0x08007209
 80068e8:	0800722b 	.word	0x0800722b
 80068ec:	08007263 	.word	0x08007263
 80068f0:	08007287 	.word	0x08007287

080068f4 <_cleanup_r>:
 80068f4:	4901      	ldr	r1, [pc, #4]	; (80068fc <_cleanup_r+0x8>)
 80068f6:	f000 b885 	b.w	8006a04 <_fwalk_reent>
 80068fa:	bf00      	nop
 80068fc:	08006859 	.word	0x08006859

08006900 <__sfmoreglue>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	1e4a      	subs	r2, r1, #1
 8006904:	2568      	movs	r5, #104	; 0x68
 8006906:	4355      	muls	r5, r2
 8006908:	460e      	mov	r6, r1
 800690a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800690e:	f000 f949 	bl	8006ba4 <_malloc_r>
 8006912:	4604      	mov	r4, r0
 8006914:	b140      	cbz	r0, 8006928 <__sfmoreglue+0x28>
 8006916:	2100      	movs	r1, #0
 8006918:	e9c0 1600 	strd	r1, r6, [r0]
 800691c:	300c      	adds	r0, #12
 800691e:	60a0      	str	r0, [r4, #8]
 8006920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006924:	f7ff fdce 	bl	80064c4 <memset>
 8006928:	4620      	mov	r0, r4
 800692a:	bd70      	pop	{r4, r5, r6, pc}

0800692c <__sinit>:
 800692c:	6983      	ldr	r3, [r0, #24]
 800692e:	b510      	push	{r4, lr}
 8006930:	4604      	mov	r4, r0
 8006932:	bb33      	cbnz	r3, 8006982 <__sinit+0x56>
 8006934:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006938:	6503      	str	r3, [r0, #80]	; 0x50
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <__sinit+0x58>)
 800693c:	4a12      	ldr	r2, [pc, #72]	; (8006988 <__sinit+0x5c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6282      	str	r2, [r0, #40]	; 0x28
 8006942:	4298      	cmp	r0, r3
 8006944:	bf04      	itt	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	6183      	streq	r3, [r0, #24]
 800694a:	f000 f81f 	bl	800698c <__sfp>
 800694e:	6060      	str	r0, [r4, #4]
 8006950:	4620      	mov	r0, r4
 8006952:	f000 f81b 	bl	800698c <__sfp>
 8006956:	60a0      	str	r0, [r4, #8]
 8006958:	4620      	mov	r0, r4
 800695a:	f000 f817 	bl	800698c <__sfp>
 800695e:	2200      	movs	r2, #0
 8006960:	60e0      	str	r0, [r4, #12]
 8006962:	2104      	movs	r1, #4
 8006964:	6860      	ldr	r0, [r4, #4]
 8006966:	f7ff ffa1 	bl	80068ac <std>
 800696a:	2201      	movs	r2, #1
 800696c:	2109      	movs	r1, #9
 800696e:	68a0      	ldr	r0, [r4, #8]
 8006970:	f7ff ff9c 	bl	80068ac <std>
 8006974:	2202      	movs	r2, #2
 8006976:	2112      	movs	r1, #18
 8006978:	68e0      	ldr	r0, [r4, #12]
 800697a:	f7ff ff97 	bl	80068ac <std>
 800697e:	2301      	movs	r3, #1
 8006980:	61a3      	str	r3, [r4, #24]
 8006982:	bd10      	pop	{r4, pc}
 8006984:	0800744c 	.word	0x0800744c
 8006988:	080068f5 	.word	0x080068f5

0800698c <__sfp>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <__sfp+0x70>)
 8006990:	681e      	ldr	r6, [r3, #0]
 8006992:	69b3      	ldr	r3, [r6, #24]
 8006994:	4607      	mov	r7, r0
 8006996:	b913      	cbnz	r3, 800699e <__sfp+0x12>
 8006998:	4630      	mov	r0, r6
 800699a:	f7ff ffc7 	bl	800692c <__sinit>
 800699e:	3648      	adds	r6, #72	; 0x48
 80069a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	d503      	bpl.n	80069b0 <__sfp+0x24>
 80069a8:	6833      	ldr	r3, [r6, #0]
 80069aa:	b133      	cbz	r3, 80069ba <__sfp+0x2e>
 80069ac:	6836      	ldr	r6, [r6, #0]
 80069ae:	e7f7      	b.n	80069a0 <__sfp+0x14>
 80069b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069b4:	b16d      	cbz	r5, 80069d2 <__sfp+0x46>
 80069b6:	3468      	adds	r4, #104	; 0x68
 80069b8:	e7f4      	b.n	80069a4 <__sfp+0x18>
 80069ba:	2104      	movs	r1, #4
 80069bc:	4638      	mov	r0, r7
 80069be:	f7ff ff9f 	bl	8006900 <__sfmoreglue>
 80069c2:	6030      	str	r0, [r6, #0]
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d1f1      	bne.n	80069ac <__sfp+0x20>
 80069c8:	230c      	movs	r3, #12
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	4604      	mov	r4, r0
 80069ce:	4620      	mov	r0, r4
 80069d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <__sfp+0x74>)
 80069d4:	6665      	str	r5, [r4, #100]	; 0x64
 80069d6:	e9c4 5500 	strd	r5, r5, [r4]
 80069da:	60a5      	str	r5, [r4, #8]
 80069dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80069e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80069e4:	2208      	movs	r2, #8
 80069e6:	4629      	mov	r1, r5
 80069e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069ec:	f7ff fd6a 	bl	80064c4 <memset>
 80069f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069f8:	e7e9      	b.n	80069ce <__sfp+0x42>
 80069fa:	bf00      	nop
 80069fc:	0800744c 	.word	0x0800744c
 8006a00:	ffff0001 	.word	0xffff0001

08006a04 <_fwalk_reent>:
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4689      	mov	r9, r1
 8006a0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a10:	2600      	movs	r6, #0
 8006a12:	b914      	cbnz	r4, 8006a1a <_fwalk_reent+0x16>
 8006a14:	4630      	mov	r0, r6
 8006a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006a1e:	3f01      	subs	r7, #1
 8006a20:	d501      	bpl.n	8006a26 <_fwalk_reent+0x22>
 8006a22:	6824      	ldr	r4, [r4, #0]
 8006a24:	e7f5      	b.n	8006a12 <_fwalk_reent+0xe>
 8006a26:	89ab      	ldrh	r3, [r5, #12]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d907      	bls.n	8006a3c <_fwalk_reent+0x38>
 8006a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a30:	3301      	adds	r3, #1
 8006a32:	d003      	beq.n	8006a3c <_fwalk_reent+0x38>
 8006a34:	4629      	mov	r1, r5
 8006a36:	4640      	mov	r0, r8
 8006a38:	47c8      	blx	r9
 8006a3a:	4306      	orrs	r6, r0
 8006a3c:	3568      	adds	r5, #104	; 0x68
 8006a3e:	e7ee      	b.n	8006a1e <_fwalk_reent+0x1a>

08006a40 <__swhatbuf_r>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	460e      	mov	r6, r1
 8006a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	b096      	sub	sp, #88	; 0x58
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	461d      	mov	r5, r3
 8006a50:	da07      	bge.n	8006a62 <__swhatbuf_r+0x22>
 8006a52:	2300      	movs	r3, #0
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	89b3      	ldrh	r3, [r6, #12]
 8006a58:	061a      	lsls	r2, r3, #24
 8006a5a:	d410      	bmi.n	8006a7e <__swhatbuf_r+0x3e>
 8006a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a60:	e00e      	b.n	8006a80 <__swhatbuf_r+0x40>
 8006a62:	466a      	mov	r2, sp
 8006a64:	f000 fc36 	bl	80072d4 <_fstat_r>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	dbf2      	blt.n	8006a52 <__swhatbuf_r+0x12>
 8006a6c:	9a01      	ldr	r2, [sp, #4]
 8006a6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a76:	425a      	negs	r2, r3
 8006a78:	415a      	adcs	r2, r3
 8006a7a:	602a      	str	r2, [r5, #0]
 8006a7c:	e7ee      	b.n	8006a5c <__swhatbuf_r+0x1c>
 8006a7e:	2340      	movs	r3, #64	; 0x40
 8006a80:	2000      	movs	r0, #0
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	b016      	add	sp, #88	; 0x58
 8006a86:	bd70      	pop	{r4, r5, r6, pc}

08006a88 <__smakebuf_r>:
 8006a88:	898b      	ldrh	r3, [r1, #12]
 8006a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a8c:	079d      	lsls	r5, r3, #30
 8006a8e:	4606      	mov	r6, r0
 8006a90:	460c      	mov	r4, r1
 8006a92:	d507      	bpl.n	8006aa4 <__smakebuf_r+0x1c>
 8006a94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	6123      	str	r3, [r4, #16]
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	6163      	str	r3, [r4, #20]
 8006aa0:	b002      	add	sp, #8
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	ab01      	add	r3, sp, #4
 8006aa6:	466a      	mov	r2, sp
 8006aa8:	f7ff ffca 	bl	8006a40 <__swhatbuf_r>
 8006aac:	9900      	ldr	r1, [sp, #0]
 8006aae:	4605      	mov	r5, r0
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f000 f877 	bl	8006ba4 <_malloc_r>
 8006ab6:	b948      	cbnz	r0, 8006acc <__smakebuf_r+0x44>
 8006ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006abc:	059a      	lsls	r2, r3, #22
 8006abe:	d4ef      	bmi.n	8006aa0 <__smakebuf_r+0x18>
 8006ac0:	f023 0303 	bic.w	r3, r3, #3
 8006ac4:	f043 0302 	orr.w	r3, r3, #2
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	e7e3      	b.n	8006a94 <__smakebuf_r+0xc>
 8006acc:	4b0d      	ldr	r3, [pc, #52]	; (8006b04 <__smakebuf_r+0x7c>)
 8006ace:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	6020      	str	r0, [r4, #0]
 8006ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	9b00      	ldr	r3, [sp, #0]
 8006adc:	6163      	str	r3, [r4, #20]
 8006ade:	9b01      	ldr	r3, [sp, #4]
 8006ae0:	6120      	str	r0, [r4, #16]
 8006ae2:	b15b      	cbz	r3, 8006afc <__smakebuf_r+0x74>
 8006ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f000 fc05 	bl	80072f8 <_isatty_r>
 8006aee:	b128      	cbz	r0, 8006afc <__smakebuf_r+0x74>
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	431d      	orrs	r5, r3
 8006b00:	81a5      	strh	r5, [r4, #12]
 8006b02:	e7cd      	b.n	8006aa0 <__smakebuf_r+0x18>
 8006b04:	080068f5 	.word	0x080068f5

08006b08 <_free_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d045      	beq.n	8006b9c <_free_r+0x94>
 8006b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b14:	1f0c      	subs	r4, r1, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfb8      	it	lt
 8006b1a:	18e4      	addlt	r4, r4, r3
 8006b1c:	f000 fc0e 	bl	800733c <__malloc_lock>
 8006b20:	4a1f      	ldr	r2, [pc, #124]	; (8006ba0 <_free_r+0x98>)
 8006b22:	6813      	ldr	r3, [r2, #0]
 8006b24:	4610      	mov	r0, r2
 8006b26:	b933      	cbnz	r3, 8006b36 <_free_r+0x2e>
 8006b28:	6063      	str	r3, [r4, #4]
 8006b2a:	6014      	str	r4, [r2, #0]
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b32:	f000 bc04 	b.w	800733e <__malloc_unlock>
 8006b36:	42a3      	cmp	r3, r4
 8006b38:	d90c      	bls.n	8006b54 <_free_r+0x4c>
 8006b3a:	6821      	ldr	r1, [r4, #0]
 8006b3c:	1862      	adds	r2, r4, r1
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	bf04      	itt	eq
 8006b42:	681a      	ldreq	r2, [r3, #0]
 8006b44:	685b      	ldreq	r3, [r3, #4]
 8006b46:	6063      	str	r3, [r4, #4]
 8006b48:	bf04      	itt	eq
 8006b4a:	1852      	addeq	r2, r2, r1
 8006b4c:	6022      	streq	r2, [r4, #0]
 8006b4e:	6004      	str	r4, [r0, #0]
 8006b50:	e7ec      	b.n	8006b2c <_free_r+0x24>
 8006b52:	4613      	mov	r3, r2
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	b10a      	cbz	r2, 8006b5c <_free_r+0x54>
 8006b58:	42a2      	cmp	r2, r4
 8006b5a:	d9fa      	bls.n	8006b52 <_free_r+0x4a>
 8006b5c:	6819      	ldr	r1, [r3, #0]
 8006b5e:	1858      	adds	r0, r3, r1
 8006b60:	42a0      	cmp	r0, r4
 8006b62:	d10b      	bne.n	8006b7c <_free_r+0x74>
 8006b64:	6820      	ldr	r0, [r4, #0]
 8006b66:	4401      	add	r1, r0
 8006b68:	1858      	adds	r0, r3, r1
 8006b6a:	4282      	cmp	r2, r0
 8006b6c:	6019      	str	r1, [r3, #0]
 8006b6e:	d1dd      	bne.n	8006b2c <_free_r+0x24>
 8006b70:	6810      	ldr	r0, [r2, #0]
 8006b72:	6852      	ldr	r2, [r2, #4]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	4401      	add	r1, r0
 8006b78:	6019      	str	r1, [r3, #0]
 8006b7a:	e7d7      	b.n	8006b2c <_free_r+0x24>
 8006b7c:	d902      	bls.n	8006b84 <_free_r+0x7c>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	e7d3      	b.n	8006b2c <_free_r+0x24>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	1821      	adds	r1, r4, r0
 8006b88:	428a      	cmp	r2, r1
 8006b8a:	bf04      	itt	eq
 8006b8c:	6811      	ldreq	r1, [r2, #0]
 8006b8e:	6852      	ldreq	r2, [r2, #4]
 8006b90:	6062      	str	r2, [r4, #4]
 8006b92:	bf04      	itt	eq
 8006b94:	1809      	addeq	r1, r1, r0
 8006b96:	6021      	streq	r1, [r4, #0]
 8006b98:	605c      	str	r4, [r3, #4]
 8006b9a:	e7c7      	b.n	8006b2c <_free_r+0x24>
 8006b9c:	bd38      	pop	{r3, r4, r5, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000090 	.word	0x20000090

08006ba4 <_malloc_r>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	1ccd      	adds	r5, r1, #3
 8006ba8:	f025 0503 	bic.w	r5, r5, #3
 8006bac:	3508      	adds	r5, #8
 8006bae:	2d0c      	cmp	r5, #12
 8006bb0:	bf38      	it	cc
 8006bb2:	250c      	movcc	r5, #12
 8006bb4:	2d00      	cmp	r5, #0
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	db01      	blt.n	8006bbe <_malloc_r+0x1a>
 8006bba:	42a9      	cmp	r1, r5
 8006bbc:	d903      	bls.n	8006bc6 <_malloc_r+0x22>
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	6033      	str	r3, [r6, #0]
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
 8006bc6:	f000 fbb9 	bl	800733c <__malloc_lock>
 8006bca:	4a21      	ldr	r2, [pc, #132]	; (8006c50 <_malloc_r+0xac>)
 8006bcc:	6814      	ldr	r4, [r2, #0]
 8006bce:	4621      	mov	r1, r4
 8006bd0:	b991      	cbnz	r1, 8006bf8 <_malloc_r+0x54>
 8006bd2:	4c20      	ldr	r4, [pc, #128]	; (8006c54 <_malloc_r+0xb0>)
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	b91b      	cbnz	r3, 8006be0 <_malloc_r+0x3c>
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f000 fb05 	bl	80071e8 <_sbrk_r>
 8006bde:	6020      	str	r0, [r4, #0]
 8006be0:	4629      	mov	r1, r5
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 fb00 	bl	80071e8 <_sbrk_r>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d124      	bne.n	8006c36 <_malloc_r+0x92>
 8006bec:	230c      	movs	r3, #12
 8006bee:	6033      	str	r3, [r6, #0]
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f000 fba4 	bl	800733e <__malloc_unlock>
 8006bf6:	e7e4      	b.n	8006bc2 <_malloc_r+0x1e>
 8006bf8:	680b      	ldr	r3, [r1, #0]
 8006bfa:	1b5b      	subs	r3, r3, r5
 8006bfc:	d418      	bmi.n	8006c30 <_malloc_r+0x8c>
 8006bfe:	2b0b      	cmp	r3, #11
 8006c00:	d90f      	bls.n	8006c22 <_malloc_r+0x7e>
 8006c02:	600b      	str	r3, [r1, #0]
 8006c04:	50cd      	str	r5, [r1, r3]
 8006c06:	18cc      	adds	r4, r1, r3
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f000 fb98 	bl	800733e <__malloc_unlock>
 8006c0e:	f104 000b 	add.w	r0, r4, #11
 8006c12:	1d23      	adds	r3, r4, #4
 8006c14:	f020 0007 	bic.w	r0, r0, #7
 8006c18:	1ac3      	subs	r3, r0, r3
 8006c1a:	d0d3      	beq.n	8006bc4 <_malloc_r+0x20>
 8006c1c:	425a      	negs	r2, r3
 8006c1e:	50e2      	str	r2, [r4, r3]
 8006c20:	e7d0      	b.n	8006bc4 <_malloc_r+0x20>
 8006c22:	428c      	cmp	r4, r1
 8006c24:	684b      	ldr	r3, [r1, #4]
 8006c26:	bf16      	itet	ne
 8006c28:	6063      	strne	r3, [r4, #4]
 8006c2a:	6013      	streq	r3, [r2, #0]
 8006c2c:	460c      	movne	r4, r1
 8006c2e:	e7eb      	b.n	8006c08 <_malloc_r+0x64>
 8006c30:	460c      	mov	r4, r1
 8006c32:	6849      	ldr	r1, [r1, #4]
 8006c34:	e7cc      	b.n	8006bd0 <_malloc_r+0x2c>
 8006c36:	1cc4      	adds	r4, r0, #3
 8006c38:	f024 0403 	bic.w	r4, r4, #3
 8006c3c:	42a0      	cmp	r0, r4
 8006c3e:	d005      	beq.n	8006c4c <_malloc_r+0xa8>
 8006c40:	1a21      	subs	r1, r4, r0
 8006c42:	4630      	mov	r0, r6
 8006c44:	f000 fad0 	bl	80071e8 <_sbrk_r>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d0cf      	beq.n	8006bec <_malloc_r+0x48>
 8006c4c:	6025      	str	r5, [r4, #0]
 8006c4e:	e7db      	b.n	8006c08 <_malloc_r+0x64>
 8006c50:	20000090 	.word	0x20000090
 8006c54:	20000094 	.word	0x20000094

08006c58 <__sfputc_r>:
 8006c58:	6893      	ldr	r3, [r2, #8]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	b410      	push	{r4}
 8006c60:	6093      	str	r3, [r2, #8]
 8006c62:	da08      	bge.n	8006c76 <__sfputc_r+0x1e>
 8006c64:	6994      	ldr	r4, [r2, #24]
 8006c66:	42a3      	cmp	r3, r4
 8006c68:	db01      	blt.n	8006c6e <__sfputc_r+0x16>
 8006c6a:	290a      	cmp	r1, #10
 8006c6c:	d103      	bne.n	8006c76 <__sfputc_r+0x1e>
 8006c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c72:	f7ff bcab 	b.w	80065cc <__swbuf_r>
 8006c76:	6813      	ldr	r3, [r2, #0]
 8006c78:	1c58      	adds	r0, r3, #1
 8006c7a:	6010      	str	r0, [r2, #0]
 8006c7c:	7019      	strb	r1, [r3, #0]
 8006c7e:	4608      	mov	r0, r1
 8006c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <__sfputs_r>:
 8006c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c88:	4606      	mov	r6, r0
 8006c8a:	460f      	mov	r7, r1
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	18d5      	adds	r5, r2, r3
 8006c90:	42ac      	cmp	r4, r5
 8006c92:	d101      	bne.n	8006c98 <__sfputs_r+0x12>
 8006c94:	2000      	movs	r0, #0
 8006c96:	e007      	b.n	8006ca8 <__sfputs_r+0x22>
 8006c98:	463a      	mov	r2, r7
 8006c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	f7ff ffda 	bl	8006c58 <__sfputc_r>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d1f3      	bne.n	8006c90 <__sfputs_r+0xa>
 8006ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cac <_vfiprintf_r>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	b09d      	sub	sp, #116	; 0x74
 8006cb4:	4617      	mov	r7, r2
 8006cb6:	461d      	mov	r5, r3
 8006cb8:	4606      	mov	r6, r0
 8006cba:	b118      	cbz	r0, 8006cc4 <_vfiprintf_r+0x18>
 8006cbc:	6983      	ldr	r3, [r0, #24]
 8006cbe:	b90b      	cbnz	r3, 8006cc4 <_vfiprintf_r+0x18>
 8006cc0:	f7ff fe34 	bl	800692c <__sinit>
 8006cc4:	4b7c      	ldr	r3, [pc, #496]	; (8006eb8 <_vfiprintf_r+0x20c>)
 8006cc6:	429c      	cmp	r4, r3
 8006cc8:	d158      	bne.n	8006d7c <_vfiprintf_r+0xd0>
 8006cca:	6874      	ldr	r4, [r6, #4]
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	0718      	lsls	r0, r3, #28
 8006cd0:	d55e      	bpl.n	8006d90 <_vfiprintf_r+0xe4>
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d05b      	beq.n	8006d90 <_vfiprintf_r+0xe4>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9309      	str	r3, [sp, #36]	; 0x24
 8006cdc:	2320      	movs	r3, #32
 8006cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ce2:	2330      	movs	r3, #48	; 0x30
 8006ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ce8:	9503      	str	r5, [sp, #12]
 8006cea:	f04f 0b01 	mov.w	fp, #1
 8006cee:	46b8      	mov	r8, r7
 8006cf0:	4645      	mov	r5, r8
 8006cf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cf6:	b10b      	cbz	r3, 8006cfc <_vfiprintf_r+0x50>
 8006cf8:	2b25      	cmp	r3, #37	; 0x25
 8006cfa:	d154      	bne.n	8006da6 <_vfiprintf_r+0xfa>
 8006cfc:	ebb8 0a07 	subs.w	sl, r8, r7
 8006d00:	d00b      	beq.n	8006d1a <_vfiprintf_r+0x6e>
 8006d02:	4653      	mov	r3, sl
 8006d04:	463a      	mov	r2, r7
 8006d06:	4621      	mov	r1, r4
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7ff ffbc 	bl	8006c86 <__sfputs_r>
 8006d0e:	3001      	adds	r0, #1
 8006d10:	f000 80c2 	beq.w	8006e98 <_vfiprintf_r+0x1ec>
 8006d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d16:	4453      	add	r3, sl
 8006d18:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1a:	f898 3000 	ldrb.w	r3, [r8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80ba 	beq.w	8006e98 <_vfiprintf_r+0x1ec>
 8006d24:	2300      	movs	r3, #0
 8006d26:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d2e:	9304      	str	r3, [sp, #16]
 8006d30:	9307      	str	r3, [sp, #28]
 8006d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d36:	931a      	str	r3, [sp, #104]	; 0x68
 8006d38:	46a8      	mov	r8, r5
 8006d3a:	2205      	movs	r2, #5
 8006d3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006d40:	485e      	ldr	r0, [pc, #376]	; (8006ebc <_vfiprintf_r+0x210>)
 8006d42:	f7f9 fa45 	bl	80001d0 <memchr>
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	bb78      	cbnz	r0, 8006daa <_vfiprintf_r+0xfe>
 8006d4a:	06d9      	lsls	r1, r3, #27
 8006d4c:	bf44      	itt	mi
 8006d4e:	2220      	movmi	r2, #32
 8006d50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d54:	071a      	lsls	r2, r3, #28
 8006d56:	bf44      	itt	mi
 8006d58:	222b      	movmi	r2, #43	; 0x2b
 8006d5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d5e:	782a      	ldrb	r2, [r5, #0]
 8006d60:	2a2a      	cmp	r2, #42	; 0x2a
 8006d62:	d02a      	beq.n	8006dba <_vfiprintf_r+0x10e>
 8006d64:	9a07      	ldr	r2, [sp, #28]
 8006d66:	46a8      	mov	r8, r5
 8006d68:	2000      	movs	r0, #0
 8006d6a:	250a      	movs	r5, #10
 8006d6c:	4641      	mov	r1, r8
 8006d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d72:	3b30      	subs	r3, #48	; 0x30
 8006d74:	2b09      	cmp	r3, #9
 8006d76:	d969      	bls.n	8006e4c <_vfiprintf_r+0x1a0>
 8006d78:	b360      	cbz	r0, 8006dd4 <_vfiprintf_r+0x128>
 8006d7a:	e024      	b.n	8006dc6 <_vfiprintf_r+0x11a>
 8006d7c:	4b50      	ldr	r3, [pc, #320]	; (8006ec0 <_vfiprintf_r+0x214>)
 8006d7e:	429c      	cmp	r4, r3
 8006d80:	d101      	bne.n	8006d86 <_vfiprintf_r+0xda>
 8006d82:	68b4      	ldr	r4, [r6, #8]
 8006d84:	e7a2      	b.n	8006ccc <_vfiprintf_r+0x20>
 8006d86:	4b4f      	ldr	r3, [pc, #316]	; (8006ec4 <_vfiprintf_r+0x218>)
 8006d88:	429c      	cmp	r4, r3
 8006d8a:	bf08      	it	eq
 8006d8c:	68f4      	ldreq	r4, [r6, #12]
 8006d8e:	e79d      	b.n	8006ccc <_vfiprintf_r+0x20>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7ff fc6c 	bl	8006670 <__swsetup_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d09d      	beq.n	8006cd8 <_vfiprintf_r+0x2c>
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	b01d      	add	sp, #116	; 0x74
 8006da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da6:	46a8      	mov	r8, r5
 8006da8:	e7a2      	b.n	8006cf0 <_vfiprintf_r+0x44>
 8006daa:	4a44      	ldr	r2, [pc, #272]	; (8006ebc <_vfiprintf_r+0x210>)
 8006dac:	1a80      	subs	r0, r0, r2
 8006dae:	fa0b f000 	lsl.w	r0, fp, r0
 8006db2:	4318      	orrs	r0, r3
 8006db4:	9004      	str	r0, [sp, #16]
 8006db6:	4645      	mov	r5, r8
 8006db8:	e7be      	b.n	8006d38 <_vfiprintf_r+0x8c>
 8006dba:	9a03      	ldr	r2, [sp, #12]
 8006dbc:	1d11      	adds	r1, r2, #4
 8006dbe:	6812      	ldr	r2, [r2, #0]
 8006dc0:	9103      	str	r1, [sp, #12]
 8006dc2:	2a00      	cmp	r2, #0
 8006dc4:	db01      	blt.n	8006dca <_vfiprintf_r+0x11e>
 8006dc6:	9207      	str	r2, [sp, #28]
 8006dc8:	e004      	b.n	8006dd4 <_vfiprintf_r+0x128>
 8006dca:	4252      	negs	r2, r2
 8006dcc:	f043 0302 	orr.w	r3, r3, #2
 8006dd0:	9207      	str	r2, [sp, #28]
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	f898 3000 	ldrb.w	r3, [r8]
 8006dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8006dda:	d10e      	bne.n	8006dfa <_vfiprintf_r+0x14e>
 8006ddc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006de0:	2b2a      	cmp	r3, #42	; 0x2a
 8006de2:	d138      	bne.n	8006e56 <_vfiprintf_r+0x1aa>
 8006de4:	9b03      	ldr	r3, [sp, #12]
 8006de6:	1d1a      	adds	r2, r3, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	9203      	str	r2, [sp, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	bfb8      	it	lt
 8006df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006df4:	f108 0802 	add.w	r8, r8, #2
 8006df8:	9305      	str	r3, [sp, #20]
 8006dfa:	4d33      	ldr	r5, [pc, #204]	; (8006ec8 <_vfiprintf_r+0x21c>)
 8006dfc:	f898 1000 	ldrb.w	r1, [r8]
 8006e00:	2203      	movs	r2, #3
 8006e02:	4628      	mov	r0, r5
 8006e04:	f7f9 f9e4 	bl	80001d0 <memchr>
 8006e08:	b140      	cbz	r0, 8006e1c <_vfiprintf_r+0x170>
 8006e0a:	2340      	movs	r3, #64	; 0x40
 8006e0c:	1b40      	subs	r0, r0, r5
 8006e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006e12:	9b04      	ldr	r3, [sp, #16]
 8006e14:	4303      	orrs	r3, r0
 8006e16:	f108 0801 	add.w	r8, r8, #1
 8006e1a:	9304      	str	r3, [sp, #16]
 8006e1c:	f898 1000 	ldrb.w	r1, [r8]
 8006e20:	482a      	ldr	r0, [pc, #168]	; (8006ecc <_vfiprintf_r+0x220>)
 8006e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e26:	2206      	movs	r2, #6
 8006e28:	f108 0701 	add.w	r7, r8, #1
 8006e2c:	f7f9 f9d0 	bl	80001d0 <memchr>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d037      	beq.n	8006ea4 <_vfiprintf_r+0x1f8>
 8006e34:	4b26      	ldr	r3, [pc, #152]	; (8006ed0 <_vfiprintf_r+0x224>)
 8006e36:	bb1b      	cbnz	r3, 8006e80 <_vfiprintf_r+0x1d4>
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	3307      	adds	r3, #7
 8006e3c:	f023 0307 	bic.w	r3, r3, #7
 8006e40:	3308      	adds	r3, #8
 8006e42:	9303      	str	r3, [sp, #12]
 8006e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e46:	444b      	add	r3, r9
 8006e48:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4a:	e750      	b.n	8006cee <_vfiprintf_r+0x42>
 8006e4c:	fb05 3202 	mla	r2, r5, r2, r3
 8006e50:	2001      	movs	r0, #1
 8006e52:	4688      	mov	r8, r1
 8006e54:	e78a      	b.n	8006d6c <_vfiprintf_r+0xc0>
 8006e56:	2300      	movs	r3, #0
 8006e58:	f108 0801 	add.w	r8, r8, #1
 8006e5c:	9305      	str	r3, [sp, #20]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	250a      	movs	r5, #10
 8006e62:	4640      	mov	r0, r8
 8006e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e68:	3a30      	subs	r2, #48	; 0x30
 8006e6a:	2a09      	cmp	r2, #9
 8006e6c:	d903      	bls.n	8006e76 <_vfiprintf_r+0x1ca>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0c3      	beq.n	8006dfa <_vfiprintf_r+0x14e>
 8006e72:	9105      	str	r1, [sp, #20]
 8006e74:	e7c1      	b.n	8006dfa <_vfiprintf_r+0x14e>
 8006e76:	fb05 2101 	mla	r1, r5, r1, r2
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	e7f0      	b.n	8006e62 <_vfiprintf_r+0x1b6>
 8006e80:	ab03      	add	r3, sp, #12
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	4622      	mov	r2, r4
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <_vfiprintf_r+0x228>)
 8006e88:	a904      	add	r1, sp, #16
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f3af 8000 	nop.w
 8006e90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e94:	4681      	mov	r9, r0
 8006e96:	d1d5      	bne.n	8006e44 <_vfiprintf_r+0x198>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	065b      	lsls	r3, r3, #25
 8006e9c:	f53f af7e 	bmi.w	8006d9c <_vfiprintf_r+0xf0>
 8006ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea2:	e77d      	b.n	8006da0 <_vfiprintf_r+0xf4>
 8006ea4:	ab03      	add	r3, sp, #12
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <_vfiprintf_r+0x228>)
 8006eac:	a904      	add	r1, sp, #16
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f000 f888 	bl	8006fc4 <_printf_i>
 8006eb4:	e7ec      	b.n	8006e90 <_vfiprintf_r+0x1e4>
 8006eb6:	bf00      	nop
 8006eb8:	08007470 	.word	0x08007470
 8006ebc:	080074b0 	.word	0x080074b0
 8006ec0:	08007490 	.word	0x08007490
 8006ec4:	08007450 	.word	0x08007450
 8006ec8:	080074b6 	.word	0x080074b6
 8006ecc:	080074ba 	.word	0x080074ba
 8006ed0:	00000000 	.word	0x00000000
 8006ed4:	08006c87 	.word	0x08006c87

08006ed8 <_printf_common>:
 8006ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	4691      	mov	r9, r2
 8006ede:	461f      	mov	r7, r3
 8006ee0:	688a      	ldr	r2, [r1, #8]
 8006ee2:	690b      	ldr	r3, [r1, #16]
 8006ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	bfb8      	it	lt
 8006eec:	4613      	movlt	r3, r2
 8006eee:	f8c9 3000 	str.w	r3, [r9]
 8006ef2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460c      	mov	r4, r1
 8006efa:	b112      	cbz	r2, 8006f02 <_printf_common+0x2a>
 8006efc:	3301      	adds	r3, #1
 8006efe:	f8c9 3000 	str.w	r3, [r9]
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	0699      	lsls	r1, r3, #26
 8006f06:	bf42      	ittt	mi
 8006f08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f0c:	3302      	addmi	r3, #2
 8006f0e:	f8c9 3000 	strmi.w	r3, [r9]
 8006f12:	6825      	ldr	r5, [r4, #0]
 8006f14:	f015 0506 	ands.w	r5, r5, #6
 8006f18:	d107      	bne.n	8006f2a <_printf_common+0x52>
 8006f1a:	f104 0a19 	add.w	sl, r4, #25
 8006f1e:	68e3      	ldr	r3, [r4, #12]
 8006f20:	f8d9 2000 	ldr.w	r2, [r9]
 8006f24:	1a9b      	subs	r3, r3, r2
 8006f26:	42ab      	cmp	r3, r5
 8006f28:	dc28      	bgt.n	8006f7c <_printf_common+0xa4>
 8006f2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f2e:	6822      	ldr	r2, [r4, #0]
 8006f30:	3300      	adds	r3, #0
 8006f32:	bf18      	it	ne
 8006f34:	2301      	movne	r3, #1
 8006f36:	0692      	lsls	r2, r2, #26
 8006f38:	d42d      	bmi.n	8006f96 <_printf_common+0xbe>
 8006f3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f3e:	4639      	mov	r1, r7
 8006f40:	4630      	mov	r0, r6
 8006f42:	47c0      	blx	r8
 8006f44:	3001      	adds	r0, #1
 8006f46:	d020      	beq.n	8006f8a <_printf_common+0xb2>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	68e5      	ldr	r5, [r4, #12]
 8006f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006f50:	f003 0306 	and.w	r3, r3, #6
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	bf08      	it	eq
 8006f58:	1aad      	subeq	r5, r5, r2
 8006f5a:	68a3      	ldr	r3, [r4, #8]
 8006f5c:	6922      	ldr	r2, [r4, #16]
 8006f5e:	bf0c      	ite	eq
 8006f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f64:	2500      	movne	r5, #0
 8006f66:	4293      	cmp	r3, r2
 8006f68:	bfc4      	itt	gt
 8006f6a:	1a9b      	subgt	r3, r3, r2
 8006f6c:	18ed      	addgt	r5, r5, r3
 8006f6e:	f04f 0900 	mov.w	r9, #0
 8006f72:	341a      	adds	r4, #26
 8006f74:	454d      	cmp	r5, r9
 8006f76:	d11a      	bne.n	8006fae <_printf_common+0xd6>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	e008      	b.n	8006f8e <_printf_common+0xb6>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4639      	mov	r1, r7
 8006f82:	4630      	mov	r0, r6
 8006f84:	47c0      	blx	r8
 8006f86:	3001      	adds	r0, #1
 8006f88:	d103      	bne.n	8006f92 <_printf_common+0xba>
 8006f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f92:	3501      	adds	r5, #1
 8006f94:	e7c3      	b.n	8006f1e <_printf_common+0x46>
 8006f96:	18e1      	adds	r1, r4, r3
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	2030      	movs	r0, #48	; 0x30
 8006f9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fa0:	4422      	add	r2, r4
 8006fa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006faa:	3302      	adds	r3, #2
 8006fac:	e7c5      	b.n	8006f3a <_printf_common+0x62>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	47c0      	blx	r8
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d0e6      	beq.n	8006f8a <_printf_common+0xb2>
 8006fbc:	f109 0901 	add.w	r9, r9, #1
 8006fc0:	e7d8      	b.n	8006f74 <_printf_common+0x9c>
	...

08006fc4 <_printf_i>:
 8006fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006fcc:	460c      	mov	r4, r1
 8006fce:	7e09      	ldrb	r1, [r1, #24]
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	296e      	cmp	r1, #110	; 0x6e
 8006fd4:	4617      	mov	r7, r2
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	4698      	mov	r8, r3
 8006fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fdc:	f000 80b3 	beq.w	8007146 <_printf_i+0x182>
 8006fe0:	d822      	bhi.n	8007028 <_printf_i+0x64>
 8006fe2:	2963      	cmp	r1, #99	; 0x63
 8006fe4:	d036      	beq.n	8007054 <_printf_i+0x90>
 8006fe6:	d80a      	bhi.n	8006ffe <_printf_i+0x3a>
 8006fe8:	2900      	cmp	r1, #0
 8006fea:	f000 80b9 	beq.w	8007160 <_printf_i+0x19c>
 8006fee:	2958      	cmp	r1, #88	; 0x58
 8006ff0:	f000 8083 	beq.w	80070fa <_printf_i+0x136>
 8006ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ff8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006ffc:	e032      	b.n	8007064 <_printf_i+0xa0>
 8006ffe:	2964      	cmp	r1, #100	; 0x64
 8007000:	d001      	beq.n	8007006 <_printf_i+0x42>
 8007002:	2969      	cmp	r1, #105	; 0x69
 8007004:	d1f6      	bne.n	8006ff4 <_printf_i+0x30>
 8007006:	6820      	ldr	r0, [r4, #0]
 8007008:	6813      	ldr	r3, [r2, #0]
 800700a:	0605      	lsls	r5, r0, #24
 800700c:	f103 0104 	add.w	r1, r3, #4
 8007010:	d52a      	bpl.n	8007068 <_printf_i+0xa4>
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6011      	str	r1, [r2, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	da03      	bge.n	8007022 <_printf_i+0x5e>
 800701a:	222d      	movs	r2, #45	; 0x2d
 800701c:	425b      	negs	r3, r3
 800701e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007022:	486f      	ldr	r0, [pc, #444]	; (80071e0 <_printf_i+0x21c>)
 8007024:	220a      	movs	r2, #10
 8007026:	e039      	b.n	800709c <_printf_i+0xd8>
 8007028:	2973      	cmp	r1, #115	; 0x73
 800702a:	f000 809d 	beq.w	8007168 <_printf_i+0x1a4>
 800702e:	d808      	bhi.n	8007042 <_printf_i+0x7e>
 8007030:	296f      	cmp	r1, #111	; 0x6f
 8007032:	d020      	beq.n	8007076 <_printf_i+0xb2>
 8007034:	2970      	cmp	r1, #112	; 0x70
 8007036:	d1dd      	bne.n	8006ff4 <_printf_i+0x30>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	f043 0320 	orr.w	r3, r3, #32
 800703e:	6023      	str	r3, [r4, #0]
 8007040:	e003      	b.n	800704a <_printf_i+0x86>
 8007042:	2975      	cmp	r1, #117	; 0x75
 8007044:	d017      	beq.n	8007076 <_printf_i+0xb2>
 8007046:	2978      	cmp	r1, #120	; 0x78
 8007048:	d1d4      	bne.n	8006ff4 <_printf_i+0x30>
 800704a:	2378      	movs	r3, #120	; 0x78
 800704c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007050:	4864      	ldr	r0, [pc, #400]	; (80071e4 <_printf_i+0x220>)
 8007052:	e055      	b.n	8007100 <_printf_i+0x13c>
 8007054:	6813      	ldr	r3, [r2, #0]
 8007056:	1d19      	adds	r1, r3, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6011      	str	r1, [r2, #0]
 800705c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007064:	2301      	movs	r3, #1
 8007066:	e08c      	b.n	8007182 <_printf_i+0x1be>
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6011      	str	r1, [r2, #0]
 800706c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007070:	bf18      	it	ne
 8007072:	b21b      	sxthne	r3, r3
 8007074:	e7cf      	b.n	8007016 <_printf_i+0x52>
 8007076:	6813      	ldr	r3, [r2, #0]
 8007078:	6825      	ldr	r5, [r4, #0]
 800707a:	1d18      	adds	r0, r3, #4
 800707c:	6010      	str	r0, [r2, #0]
 800707e:	0628      	lsls	r0, r5, #24
 8007080:	d501      	bpl.n	8007086 <_printf_i+0xc2>
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	e002      	b.n	800708c <_printf_i+0xc8>
 8007086:	0668      	lsls	r0, r5, #25
 8007088:	d5fb      	bpl.n	8007082 <_printf_i+0xbe>
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	4854      	ldr	r0, [pc, #336]	; (80071e0 <_printf_i+0x21c>)
 800708e:	296f      	cmp	r1, #111	; 0x6f
 8007090:	bf14      	ite	ne
 8007092:	220a      	movne	r2, #10
 8007094:	2208      	moveq	r2, #8
 8007096:	2100      	movs	r1, #0
 8007098:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800709c:	6865      	ldr	r5, [r4, #4]
 800709e:	60a5      	str	r5, [r4, #8]
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	f2c0 8095 	blt.w	80071d0 <_printf_i+0x20c>
 80070a6:	6821      	ldr	r1, [r4, #0]
 80070a8:	f021 0104 	bic.w	r1, r1, #4
 80070ac:	6021      	str	r1, [r4, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d13d      	bne.n	800712e <_printf_i+0x16a>
 80070b2:	2d00      	cmp	r5, #0
 80070b4:	f040 808e 	bne.w	80071d4 <_printf_i+0x210>
 80070b8:	4665      	mov	r5, ip
 80070ba:	2a08      	cmp	r2, #8
 80070bc:	d10b      	bne.n	80070d6 <_printf_i+0x112>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	07db      	lsls	r3, r3, #31
 80070c2:	d508      	bpl.n	80070d6 <_printf_i+0x112>
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	6862      	ldr	r2, [r4, #4]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	bfde      	ittt	le
 80070cc:	2330      	movle	r3, #48	; 0x30
 80070ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070d6:	ebac 0305 	sub.w	r3, ip, r5
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	f8cd 8000 	str.w	r8, [sp]
 80070e0:	463b      	mov	r3, r7
 80070e2:	aa03      	add	r2, sp, #12
 80070e4:	4621      	mov	r1, r4
 80070e6:	4630      	mov	r0, r6
 80070e8:	f7ff fef6 	bl	8006ed8 <_printf_common>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d14d      	bne.n	800718c <_printf_i+0x1c8>
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	b005      	add	sp, #20
 80070f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070fa:	4839      	ldr	r0, [pc, #228]	; (80071e0 <_printf_i+0x21c>)
 80070fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007100:	6813      	ldr	r3, [r2, #0]
 8007102:	6821      	ldr	r1, [r4, #0]
 8007104:	1d1d      	adds	r5, r3, #4
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6015      	str	r5, [r2, #0]
 800710a:	060a      	lsls	r2, r1, #24
 800710c:	d50b      	bpl.n	8007126 <_printf_i+0x162>
 800710e:	07ca      	lsls	r2, r1, #31
 8007110:	bf44      	itt	mi
 8007112:	f041 0120 	orrmi.w	r1, r1, #32
 8007116:	6021      	strmi	r1, [r4, #0]
 8007118:	b91b      	cbnz	r3, 8007122 <_printf_i+0x15e>
 800711a:	6822      	ldr	r2, [r4, #0]
 800711c:	f022 0220 	bic.w	r2, r2, #32
 8007120:	6022      	str	r2, [r4, #0]
 8007122:	2210      	movs	r2, #16
 8007124:	e7b7      	b.n	8007096 <_printf_i+0xd2>
 8007126:	064d      	lsls	r5, r1, #25
 8007128:	bf48      	it	mi
 800712a:	b29b      	uxthmi	r3, r3
 800712c:	e7ef      	b.n	800710e <_printf_i+0x14a>
 800712e:	4665      	mov	r5, ip
 8007130:	fbb3 f1f2 	udiv	r1, r3, r2
 8007134:	fb02 3311 	mls	r3, r2, r1, r3
 8007138:	5cc3      	ldrb	r3, [r0, r3]
 800713a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800713e:	460b      	mov	r3, r1
 8007140:	2900      	cmp	r1, #0
 8007142:	d1f5      	bne.n	8007130 <_printf_i+0x16c>
 8007144:	e7b9      	b.n	80070ba <_printf_i+0xf6>
 8007146:	6813      	ldr	r3, [r2, #0]
 8007148:	6825      	ldr	r5, [r4, #0]
 800714a:	6961      	ldr	r1, [r4, #20]
 800714c:	1d18      	adds	r0, r3, #4
 800714e:	6010      	str	r0, [r2, #0]
 8007150:	0628      	lsls	r0, r5, #24
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	d501      	bpl.n	800715a <_printf_i+0x196>
 8007156:	6019      	str	r1, [r3, #0]
 8007158:	e002      	b.n	8007160 <_printf_i+0x19c>
 800715a:	066a      	lsls	r2, r5, #25
 800715c:	d5fb      	bpl.n	8007156 <_printf_i+0x192>
 800715e:	8019      	strh	r1, [r3, #0]
 8007160:	2300      	movs	r3, #0
 8007162:	6123      	str	r3, [r4, #16]
 8007164:	4665      	mov	r5, ip
 8007166:	e7b9      	b.n	80070dc <_printf_i+0x118>
 8007168:	6813      	ldr	r3, [r2, #0]
 800716a:	1d19      	adds	r1, r3, #4
 800716c:	6011      	str	r1, [r2, #0]
 800716e:	681d      	ldr	r5, [r3, #0]
 8007170:	6862      	ldr	r2, [r4, #4]
 8007172:	2100      	movs	r1, #0
 8007174:	4628      	mov	r0, r5
 8007176:	f7f9 f82b 	bl	80001d0 <memchr>
 800717a:	b108      	cbz	r0, 8007180 <_printf_i+0x1bc>
 800717c:	1b40      	subs	r0, r0, r5
 800717e:	6060      	str	r0, [r4, #4]
 8007180:	6863      	ldr	r3, [r4, #4]
 8007182:	6123      	str	r3, [r4, #16]
 8007184:	2300      	movs	r3, #0
 8007186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800718a:	e7a7      	b.n	80070dc <_printf_i+0x118>
 800718c:	6923      	ldr	r3, [r4, #16]
 800718e:	462a      	mov	r2, r5
 8007190:	4639      	mov	r1, r7
 8007192:	4630      	mov	r0, r6
 8007194:	47c0      	blx	r8
 8007196:	3001      	adds	r0, #1
 8007198:	d0aa      	beq.n	80070f0 <_printf_i+0x12c>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	079b      	lsls	r3, r3, #30
 800719e:	d413      	bmi.n	80071c8 <_printf_i+0x204>
 80071a0:	68e0      	ldr	r0, [r4, #12]
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	4298      	cmp	r0, r3
 80071a6:	bfb8      	it	lt
 80071a8:	4618      	movlt	r0, r3
 80071aa:	e7a3      	b.n	80070f4 <_printf_i+0x130>
 80071ac:	2301      	movs	r3, #1
 80071ae:	464a      	mov	r2, r9
 80071b0:	4639      	mov	r1, r7
 80071b2:	4630      	mov	r0, r6
 80071b4:	47c0      	blx	r8
 80071b6:	3001      	adds	r0, #1
 80071b8:	d09a      	beq.n	80070f0 <_printf_i+0x12c>
 80071ba:	3501      	adds	r5, #1
 80071bc:	68e3      	ldr	r3, [r4, #12]
 80071be:	9a03      	ldr	r2, [sp, #12]
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	42ab      	cmp	r3, r5
 80071c4:	dcf2      	bgt.n	80071ac <_printf_i+0x1e8>
 80071c6:	e7eb      	b.n	80071a0 <_printf_i+0x1dc>
 80071c8:	2500      	movs	r5, #0
 80071ca:	f104 0919 	add.w	r9, r4, #25
 80071ce:	e7f5      	b.n	80071bc <_printf_i+0x1f8>
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1ac      	bne.n	800712e <_printf_i+0x16a>
 80071d4:	7803      	ldrb	r3, [r0, #0]
 80071d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071de:	e76c      	b.n	80070ba <_printf_i+0xf6>
 80071e0:	080074c1 	.word	0x080074c1
 80071e4:	080074d2 	.word	0x080074d2

080071e8 <_sbrk_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4c06      	ldr	r4, [pc, #24]	; (8007204 <_sbrk_r+0x1c>)
 80071ec:	2300      	movs	r3, #0
 80071ee:	4605      	mov	r5, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	f7fb fcca 	bl	8002b8c <_sbrk>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_sbrk_r+0x1a>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_sbrk_r+0x1a>
 8007200:	602b      	str	r3, [r5, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	200002dc 	.word	0x200002dc

08007208 <__sread>:
 8007208:	b510      	push	{r4, lr}
 800720a:	460c      	mov	r4, r1
 800720c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007210:	f000 f896 	bl	8007340 <_read_r>
 8007214:	2800      	cmp	r0, #0
 8007216:	bfab      	itete	ge
 8007218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800721a:	89a3      	ldrhlt	r3, [r4, #12]
 800721c:	181b      	addge	r3, r3, r0
 800721e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007222:	bfac      	ite	ge
 8007224:	6563      	strge	r3, [r4, #84]	; 0x54
 8007226:	81a3      	strhlt	r3, [r4, #12]
 8007228:	bd10      	pop	{r4, pc}

0800722a <__swrite>:
 800722a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722e:	461f      	mov	r7, r3
 8007230:	898b      	ldrh	r3, [r1, #12]
 8007232:	05db      	lsls	r3, r3, #23
 8007234:	4605      	mov	r5, r0
 8007236:	460c      	mov	r4, r1
 8007238:	4616      	mov	r6, r2
 800723a:	d505      	bpl.n	8007248 <__swrite+0x1e>
 800723c:	2302      	movs	r3, #2
 800723e:	2200      	movs	r2, #0
 8007240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007244:	f000 f868 	bl	8007318 <_lseek_r>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800724e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	4632      	mov	r2, r6
 8007256:	463b      	mov	r3, r7
 8007258:	4628      	mov	r0, r5
 800725a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800725e:	f000 b817 	b.w	8007290 <_write_r>

08007262 <__sseek>:
 8007262:	b510      	push	{r4, lr}
 8007264:	460c      	mov	r4, r1
 8007266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726a:	f000 f855 	bl	8007318 <_lseek_r>
 800726e:	1c43      	adds	r3, r0, #1
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	bf15      	itete	ne
 8007274:	6560      	strne	r0, [r4, #84]	; 0x54
 8007276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800727a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800727e:	81a3      	strheq	r3, [r4, #12]
 8007280:	bf18      	it	ne
 8007282:	81a3      	strhne	r3, [r4, #12]
 8007284:	bd10      	pop	{r4, pc}

08007286 <__sclose>:
 8007286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728a:	f000 b813 	b.w	80072b4 <_close_r>
	...

08007290 <_write_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	4c07      	ldr	r4, [pc, #28]	; (80072b0 <_write_r+0x20>)
 8007294:	4605      	mov	r5, r0
 8007296:	4608      	mov	r0, r1
 8007298:	4611      	mov	r1, r2
 800729a:	2200      	movs	r2, #0
 800729c:	6022      	str	r2, [r4, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	f7fa fbe8 	bl	8001a74 <_write>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_write_r+0x1e>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_write_r+0x1e>
 80072ac:	602b      	str	r3, [r5, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	200002dc 	.word	0x200002dc

080072b4 <_close_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4c06      	ldr	r4, [pc, #24]	; (80072d0 <_close_r+0x1c>)
 80072b8:	2300      	movs	r3, #0
 80072ba:	4605      	mov	r5, r0
 80072bc:	4608      	mov	r0, r1
 80072be:	6023      	str	r3, [r4, #0]
 80072c0:	f7fb fc2f 	bl	8002b22 <_close>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	d102      	bne.n	80072ce <_close_r+0x1a>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	b103      	cbz	r3, 80072ce <_close_r+0x1a>
 80072cc:	602b      	str	r3, [r5, #0]
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	200002dc 	.word	0x200002dc

080072d4 <_fstat_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4c07      	ldr	r4, [pc, #28]	; (80072f4 <_fstat_r+0x20>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4605      	mov	r5, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	f7fb fc2a 	bl	8002b3a <_fstat>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d102      	bne.n	80072f0 <_fstat_r+0x1c>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	b103      	cbz	r3, 80072f0 <_fstat_r+0x1c>
 80072ee:	602b      	str	r3, [r5, #0]
 80072f0:	bd38      	pop	{r3, r4, r5, pc}
 80072f2:	bf00      	nop
 80072f4:	200002dc 	.word	0x200002dc

080072f8 <_isatty_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4c06      	ldr	r4, [pc, #24]	; (8007314 <_isatty_r+0x1c>)
 80072fc:	2300      	movs	r3, #0
 80072fe:	4605      	mov	r5, r0
 8007300:	4608      	mov	r0, r1
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	f7fb fc29 	bl	8002b5a <_isatty>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_isatty_r+0x1a>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	b103      	cbz	r3, 8007312 <_isatty_r+0x1a>
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	200002dc 	.word	0x200002dc

08007318 <_lseek_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4c07      	ldr	r4, [pc, #28]	; (8007338 <_lseek_r+0x20>)
 800731c:	4605      	mov	r5, r0
 800731e:	4608      	mov	r0, r1
 8007320:	4611      	mov	r1, r2
 8007322:	2200      	movs	r2, #0
 8007324:	6022      	str	r2, [r4, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	f7fb fc22 	bl	8002b70 <_lseek>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_lseek_r+0x1e>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	b103      	cbz	r3, 8007336 <_lseek_r+0x1e>
 8007334:	602b      	str	r3, [r5, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	200002dc 	.word	0x200002dc

0800733c <__malloc_lock>:
 800733c:	4770      	bx	lr

0800733e <__malloc_unlock>:
 800733e:	4770      	bx	lr

08007340 <_read_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4c07      	ldr	r4, [pc, #28]	; (8007360 <_read_r+0x20>)
 8007344:	4605      	mov	r5, r0
 8007346:	4608      	mov	r0, r1
 8007348:	4611      	mov	r1, r2
 800734a:	2200      	movs	r2, #0
 800734c:	6022      	str	r2, [r4, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	f7fb fbca 	bl	8002ae8 <_read>
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	d102      	bne.n	800735e <_read_r+0x1e>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	b103      	cbz	r3, 800735e <_read_r+0x1e>
 800735c:	602b      	str	r3, [r5, #0]
 800735e:	bd38      	pop	{r3, r4, r5, pc}
 8007360:	200002dc 	.word	0x200002dc

08007364 <_init>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	bf00      	nop
 8007368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736a:	bc08      	pop	{r3}
 800736c:	469e      	mov	lr, r3
 800736e:	4770      	bx	lr

08007370 <_fini>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr
